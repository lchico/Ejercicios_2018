
Ejercicios3/Rodrigo_Tirapegui/out/Rodrigo_Tirapegui.elf:     file format elf32-littlearm
Ejercicios3/Rodrigo_Tirapegui/out/Rodrigo_Tirapegui.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a002801

Program Header:
0x70000001 off    0x0000b208 vaddr 0x1a003208 paddr 0x1a003208 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008048 vaddr 0x10000048 paddr 0x10000048 align 2**15
         filesz 0x00000000 memsz 0x00000104 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00003210 memsz 0x00003210 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a003210 align 2**15
         filesz 0x00000044 memsz 0x00000044 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003208  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  10000000  1a003210  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00010044  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00010044  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00010044  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00010044  2**2
                  CONTENTS
  6 .bss          00000104  10000048  10000048  00008048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00010044  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00010044  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00010044  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00010044  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a003208  1a003208  0000b208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00010044  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00010044  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00010044  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00010044  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00010044  2**2
                  CONTENTS
 17 .noinit       00000000  1000014c  1000014c  00010044  2**2
                  CONTENTS
 18 .debug_info   0000f6f3  00000000  00000000  00010044  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002f7d  00000000  00000000  0001f737  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00004e5d  00000000  00000000  000226b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000003e0  00000000  00000000  00027511  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  0000bb94  00000000  00000000  000278f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   0000d594  00000000  00000000  00033485  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    000210c6  00000000  00000000  00040a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      000000e0  00000000  00000000  00061adf  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000039  00000000  00000000  00061bbf  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000136c  00000000  00000000  00061bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_ranges 000000d0  00000000  00000000  00062f64  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003208 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000014c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 app.c
1a000300 l     F .text	00000040 setBlinkPeriod
1a000340 l     F .text	00000030 setBlinkyLed
1a000370 l     F .text	0000005c appTask
1a002e40 l     O .text	00000018 gLedsGpioMap
1a002e58 l     O .text	0000000c gBlinkPeriodsArray
10000048 l     O .bss	00000004 gAppControl
00000000 l    df *ABS*	00000000 buttons.c
1a00047c l     F .text	0000002c getButton
1a0004a8 l     F .text	00000002 doNothing
1a0004ac l     F .text	0000000e setButtonDelay
1a0004bc l     F .text	0000000e setButtonStatusAsPressed
1a0004cc l     F .text	0000000e setButtonStatusAsReleased
1a0004dc l     F .text	0000003a eventGenerator
1a002e6c l     O .text	00000018 buttonPressed
1a002ea4 l     O .text	00000024 buttonTransitionReleasing
1a002e84 l     O .text	00000018 buttonRelased
1a002ec8 l     O .text	00000024 buttonTransitionPressing
1a002e9c l     O .text	00000008 buttonsGpioBoardMap
1000004c l     O .bss	00000020 gButtons
1000006c l     O .bss	00000001 gInitFlag
00000000 l    df *ABS*	00000000 cooperativeOs_isr.c
00000000 l    df *ABS*	00000000 cooperativeOs_scheduler.c
1a00067c l     F .text	00000008 schedulerGoToSleep
00000000 l    df *ABS*	00000000 fsm.c
00000000 l    df *ABS*	00000000 leds.c
1a000760 l     F .text	00000034 getBlinkyLed
1a000794 l     F .text	00000024 eventGenerator
1a0007b8 l     F .text	00000014 setBlinkPeriodDelay
1a0007cc l     F .text	0000001a setLedOffAndBlinkPeriodDelay
1a0007e8 l     F .text	0000001a setLedOnAndBlinkPeriodDelay
1a002eec l     O .text	00000018 ledsGpioBoardMap
1a002f04 l     O .text	00000018 ledBlinkOnWaitPeriodTimeout
1a002f1c l     O .text	00000018 ledBlinkOffWaitPeriodTimeout
10000070 l     O .bss	00000078 gLeds
100000e8 l     O .bss	00000001 gInitFlag
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a000bd0 l     F .text	0000002c gpioObtainPinConfig
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a000f18 l     F .text	00000002 errorOcurred
1a000f1c l     F .text	00000002 doNothing
1a00306c l     O .text	00000030 timer_sd
10000004 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 board.c
1a0013b8 l     F .text	00000040 Board_LED_Init
1a00309c l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0030b8 l     O .text	00000060 pinmuxing
1a003118 l     O .text	0000000c InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
1a001690 l     F .text	00000034 Chip_USB_PllSetup
1a003124 l     O .text	00000014 usbPLLSetup
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001754 l     F .text	000000a8 pll_calc_divs
1a0017fc l     F .text	00000104 pll_get_frac
1a001900 l     F .text	00000024 Chip_Clock_TestMainPLLMultiplier
1a001924 l     F .text	00000048 Chip_Clock_FindBaseClock
1a001d4c l     F .text	00000022 Chip_Clock_GetDivRate
1a003138 l     O .text	0000006c periph_to_base
100000ec l     O .bss	00000008 audio_usb_pll_freq
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ring_buffer.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0031b0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 timer_18xx_43xx.c
1a0023a0 l     F .text	0000002c Chip_TIMER_GetClockIndex
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002424 l     F .text	0000002c Chip_UART_GetIndex
1a002450 l     F .text	00000048 Chip_UART_ABIntHandler
1a0031f8 l     O .text	00000008 UART_PClock
1a003200 l     O .text	00000008 UART_BClock
100000f4 l     O .bss	00000001 ABsyncSts
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a003210 l       .ARM.exidx	00000000 __exidx_end
1a003210 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a003208 l       .text	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1000014c l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a001a1c g     F .text	0000001c Chip_Clock_GetDividerSource
1a0028dc g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a001180 g     F .text	00000040 TIMER2_IRQHandler
1a000194  w    F .text	00000002 DebugMon_Handler
1a0001a0  w    F .text	00000002 RIT_IRQHandler
1a00102c g     F .text	00000040 Timer_DeInit
1a0001a0  w    F .text	00000002 ADCHS_IRQHandler
1a002910 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a0  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001a0  w    F .text	00000002 I2C0_IRQHandler
1a001264 g     F .text	00000044 uartReadByte
1a0016c4 g     F .text	00000034 Chip_USB0_Init
1a002528 g     F .text	00000010 Chip_UART_CheckBusy
1a000b74 g     F .text	0000003e delayRead
1a000180  w    F .text	00000002 HardFault_Handler
1a0027bc g     F .text	0000000c Chip_UART_GetABEOStatus
1a000000 g       *ABS*	00000000 __vectors_start__
1a00216c g     F .text	00000030 RingBuffer_Pop
1a001464 g     F .text	00000014 Board_UARTPutSTR
1a001e00 g     F .text	00000018 Chip_Clock_DisableBaseClock
1a000ef4 g     F .text	00000024 SysTick_Handler
1a0025a4 g     F .text	00000044 Chip_UART_SetBaud
1a001b8c g     F .text	0000009c Chip_Clock_SetupMainPLLMult
1a0001a0  w    F .text	00000002 SDIO_IRQHandler
1a001448 g     F .text	0000001c Board_UARTGetChar
1a0001a0  w    F .text	00000002 ATIMER_IRQHandler
1a000198  w    F .text	00000002 PendSV_Handler
1a00017c  w    F .text	00000002 NMI_Handler
1a000840 g     F .text	0000006c ledsStartBlinking
1a000150 g       .text	00000000 __data_section_table_end
1a0001a0  w    F .text	00000002 I2C1_IRQHandler
1a0001a0  w    F .text	00000002 UART1_IRQHandler
1a0001a0  w    F .text	00000002 GPIO5_IRQHandler
1a0006f8 g     F .text	00000040 schedulerDispatchTasks
1a0001a0  w    F .text	00000002 CAN1_IRQHandler
1a00073c g     F .text	00000024 fsm
1a002008 g     F .text	00000014 Chip_Clock_EnablePLL
53ff5066 g       *ABS*	00000000 __valid_user_code_checksum
1a001584 g     F .text	00000028 Board_SSP_Init
1a0001a0  w    F .text	00000002 USB1_IRQHandler
1a0001a0  w    F .text	00000002 I2S0_IRQHandler
1a0005a4 g     F .text	00000034 debounceTec0Task
1a0012d8 g     F .text	00000084 waitForReceiveStringOrTimeout
1a0011c0 g     F .text	00000040 TIMER3_IRQHandler
1a001e5c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	00000002 UART0_IRQHandler
1a0001c0 g     F .text	00000012 bss_init
1a0023fc g     F .text	00000028 Chip_TIMER_ExtMatchControlSet
1a000804 g     F .text	0000003c ledsInit
1a00268c g     F .text	0000000e Chip_UART_ReadRB
1a0023e4 g     F .text	00000018 Chip_TIMER_Reset
1a002e18 g     F .text	00000016 memcpy
1a0001a0  w    F .text	00000002 SGPIO_IRQHandler
1a0023d8 g     F .text	0000000c Chip_TIMER_DeInit
1a001fc8 g     F .text	00000040 Chip_Clock_SetupPLL
1a00287c g     F .text	00000000 .hidden __aeabi_uldivmod
1000014c g       .noinit	00000000 _noinit
1a001398 g     F .text	00000018 uartWriteString
10000148 g     O .bss	00000004 SystemCoreClock
1a002498 g     F .text	00000050 Chip_UART_Init
1a0001a0  w    F .text	00000002 ADC0_IRQHandler
1a0020dc g     F .text	00000090 RingBuffer_InsertMult
1a000b54 g     F .text	00000020 delayConfig
1a00018c  w    F .text	00000002 UsageFault_Handler
1a001f4c g     F .text	0000004c Chip_Clock_GetRate
1a0001a0  w    F .text	00000002 GPIO6_IRQHandler
10000138 g     O .bss	00000008 tickCounter
1a0015f4 g     F .text	00000074 Board_SetupClocking
1a002398 g     F .text	00000008 Chip_SystemInit
1a0030b4 g     O .text	00000004 ExtRateIn
1a0001a0  w    F .text	00000002 IntDefaultHandler
1a0008c8 g     F .text	00000020 ledsTurnOn
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000ee8 g     F .text	0000000c tickWrite
1a002098 g     F .text	00000002 Chip_GPIO_DeInit
1a000684 g     F .text	00000040 schedulerAddTask
1a0001a0  w    F .text	00000002 GPIO1_IRQHandler
1a000e64 g     F .text	00000078 tickConfig
1a0016f8 g     F .text	00000048 Chip_USB1_Init
1a0001a0  w    F .text	00000002 SSP0_IRQHandler
1a000bfc g     F .text	0000019c gpioConfig
1a0002fc g     O .text	00000004 CRP_WORD
1a002384 g     F .text	00000014 Chip_SetupIrcClocking
1a002bac g     F .text	0000026a .hidden __udivdi3
1a0001a0  w    F .text	00000002 ADC1_IRQHandler
1000006d g     O .bss	00000001 errorCode
1a0020ac g     F .text	00000030 RingBuffer_Insert
1a00150c g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a0001a0  w    F .text	00000002 RTC_IRQHandler
1000014c g       .bss	00000000 _ebss
1a001108 g     F .text	0000003c TIMER0_IRQHandler
1a0001a0  w    F .text	00000002 SPI_IRQHandler
1a0001a0  w    F .text	00000002 LCD_IRQHandler
1a00196c g     F .text	0000004c Chip_Clock_EnableCrystal
1a000978 g     F .text	000000ee boardConfig
1a0001a4 g     F .text	0000001a data_init
1a001144 g     F .text	0000003c TIMER1_IRQHandler
1a0019c8 g     F .text	00000054 Chip_Clock_SetDivider
1a0013b0 g     F .text	00000002 UART2_IRQHandler
1a001ce4 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0024e8 g     F .text	0000001c Chip_UART_DeInit
1a000a68 g     F .text	00000004 sAPI_NullFuncPtr
1a0003cc g     F .text	000000a8 appInit
1a0012a8 g     F .text	00000030 uartWriteByte
1a000e48 g     F .text	00000016 gpioToggle
1a0001a0  w    F .text	00000002 GPIO2_IRQHandler
1a0019b8 g     F .text	00000010 Chip_Clock_DisableCrystal
1a001f24 g     F .text	00000014 Chip_Clock_StartPowerDown
1a000f20 g     F .text	0000010c Timer_Init
1a00066c g     F .text	00000010 schedulerStart
1a00106c g     F .text	00000008 Timer_microsecondsToTicks
1a001e38 g     F .text	00000024 Chip_Clock_GetBaseClock
1a002030 g     F .text	0000000c Chip_Clock_GetPLLStatus
1a0025e8 g     F .text	00000024 Chip_UART_RXIntHandlerRB
1a002648 g     F .text	00000042 Chip_UART_SendRB
10000048 g       .bss	00000000 _bss
1a0001a0  w    F .text	00000002 I2S1_IRQHandler
1a0006c4 g     F .text	00000034 schedulerDeleteTask
1a001c28 g     F .text	000000bc Chip_Clock_SetupMainPLLHz
1a002094 g     F .text	00000002 Chip_GPIO_Init
1a0030b0 g     O .text	00000004 OscRateIn
1a001534 g     F .text	00000024 Board_I2C_Init
1000014c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0014e8 g     F .text	00000024 Board_ENET_GetMacADDR
1a000a6c g     F .text	00000052 delayInaccurate
1a0001a0  w    F .text	00000002 SSP1_IRQHandler
1a0023cc g     F .text	0000000c Chip_TIMER_Init
1a001e18 g     F .text	00000020 Chip_Clock_IsBaseClockEnabled
1a000178 g       .text	00000000 __bss_section_table_end
1a001db4 g     F .text	00000034 Chip_Clock_GetBaseClockOpts
1a000e60 g     F .text	00000004 sleepUntilNextInterrupt
1a00290c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00219c g     F .text	00000082 RingBuffer_PopMult
1a0001a0  w    F .text	00000002 USB0_IRQHandler
1a000908 g     F .text	00000060 blinkLedTask
1a001ef0 g     F .text	00000034 Chip_Clock_Disable
1a0001a0  w    F .text	00000002 GPIO3_IRQHandler
1a0010ac g     F .text	00000044 Timer_DisableCompareMatch
1a001434 g     F .text	00000014 Board_UARTPutChar
1a002504 g     F .text	00000022 Chip_UART_Send
1a0001a0  w    F .text	00000002 SCT_IRQHandler
1a001f98 g     F .text	00000030 Chip_Clock_GetEMCRate
1a00269c g     F .text	00000036 Chip_UART_IRQRBHandler
1a001a38 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002e2e g     F .text	00000010 memset
1a000184  w    F .text	00000002 MemManage_Handler
1a000968 g     F .text	00000010 main
1a00255c g     F .text	00000022 Chip_UART_Read
1a0001a0  w    F .text	00000002 WDT_IRQHandler
1a000190  w    F .text	00000002 SVC_Handler
1a000610 g     F .text	0000003c schedulerUpdate
1a001074 g     F .text	00000038 Timer_EnableCompareMatch
1a002370 g     F .text	00000014 Chip_SetupXtalClocking
1a0014d0 g     F .text	00000016 Board_LED_Toggle
1a0001a0  w    F .text	00000002 GPIO7_IRQHandler
1a001e68 g     F .text	0000003c Chip_Clock_EnableOpts
1a002f34 g     O .text	00000136 gpioPinsConfig
1a001a54 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00203c g     F .text	00000058 fpuInit
1a0014a0 g     F .text	00000030 Board_LED_Test
1a001b0c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001674 g     F .text	0000001c SystemInit
1a0001a0  w    F .text	00000002 SPIFI_IRQHandler
1a000b1c g     F .text	00000038 delay
1a0001a0  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001ed8 g     F .text	00000018 Chip_Clock_RTCEnable
1a000d98 g     F .text	00000058 gpioWrite
1a002538 g     F .text	00000024 Chip_UART_SendBlocking
1a0015c0 g     F .text	00000034 Board_SetupMuxing
1a0026d4 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000edc g     F .text	0000000c tickRead
10000140 g     O .bss	00000008 tickRateMS
1a0005d8 g     F .text	00000038 debounceTec1Task
1a0008e8 g     F .text	00000020 ledsTurnOff
1a0001a0  w    F .text	00000002 ETH_IRQHandler
10000000 g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00135c g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a0001a0  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a000518 g     F .text	00000060 buttonsInit
1a001200 g     F .text	00000064 uartConfig
1a0001a0  w    F .text	00000002 GINT0_IRQHandler
1a0001a0  w    F .text	00000002 DAC_IRQHandler
1a00140c g     F .text	00000028 Board_Debug_Init
10000044 g       .data	00000000 _edata
1a0001a0  w    F .text	00000002 M0SUB_IRQHandler
1a0027c8 g     F .text	00000038 Chip_UART_ABCmd
1a000738 g     F .text	00000002 schedulerReportStatus
1a002220 g     F .text	00000150 Chip_SetupCoreClock
1a0001a0  w    F .text	00000002 GPIO0_IRQHandler
1a000578 g     F .text	0000002c buttonsGetStatus
1a001558 g     F .text	0000002c Board_SDMMC_Init
1a000000 g     O .text	00000114 g_pfnVectors
1a002800 g     F .text	0000007c ResetISR
1a001740 g     F .text	00000014 SystemCoreClockUpdate
1a0015ac g     F .text	00000014 Board_DAC_Init
1a0001a0  w    F .text	00000002 DMA_IRQHandler
1a0001a0  w    F .text	00000002 EVRT_IRQHandler
1a0008ac g     F .text	0000001c ledsSetBlinkPeriod
1a00209c g     F .text	00000010 RingBuffer_Init
1a000ac0 g     F .text	0000005a delayInaccurateUs
1a00290c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00201c g     F .text	00000014 Chip_Clock_DisablePLL
1a001f38 g     F .text	00000014 Chip_Clock_ClearPowerDown
1a00260c g     F .text	0000003a Chip_UART_TXIntHandlerRB
1a000188  w    F .text	00000002 BusFault_Handler
1a001ea4 g     F .text	00000034 Chip_Clock_Enable
1a0013b4 g     F .text	00000002 UART3_IRQHandler
1a000bb4 g     F .text	0000001c delayWrite
1a0001a0  w    F .text	00000002 MCPWM_IRQHandler
1a0028ac g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a001478 g     F .text	00000028 Board_LED_Set
1a0001a0  w    F .text	00000002 M0APP_IRQHandler
1a000df0 g     F .text	00000058 gpioRead
100000f8 g     O .bss	00000040 schedulerTasks
1a0001a0  w    F .text	00000002 GINT1_IRQHandler
1a00064c g     F .text	00000020 schedulerInit
1a0010f0 g     F .text	00000018 Timer_SetCompareMatch
1a002580 g     F .text	00000024 Chip_UART_ReadBlocking
1a0013f8 g     F .text	00000014 Board_UART_Init
1a001de8 g     F .text	00000018 Chip_Clock_EnableBaseClock
1a001d70 g     F .text	00000044 Chip_Clock_SetBaseClock
1a0001a0  w    F .text	00000002 GPIO4_IRQHandler
1a000474 g     F .text	00000008 appRun
1a001668 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 01 28 00 1a 7d 01 00 1a 81 01 00 1a     .....(..}.......
1a000010:	85 01 00 1a 89 01 00 1a 8d 01 00 1a 66 50 ff 53     ............fP.S
	...
1a00002c:	91 01 00 1a 95 01 00 1a 00 00 00 00 99 01 00 1a     ................
1a00003c:	f5 0e 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00004c:	00 00 00 00 a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00005c:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00006c:	a1 01 00 1a 09 11 00 1a 45 11 00 1a 81 11 00 1a     ........E.......
1a00007c:	c1 11 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00008c:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00009c:	a1 01 00 1a 79 01 00 1a a1 01 00 1a b1 13 00 1a     ....y...........
1a0000ac:	b5 13 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000bc:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000cc:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000dc:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000ec:	a1 01 00 1a 00 00 00 00 a1 01 00 1a a1 01 00 1a     ................
1a0000fc:	a1 01 00 1a 00 00 00 00 a1 01 00 1a a1 01 00 1a     ................
1a00010c:	a1 01 00 1a a1 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a003210 	.word	0x1a003210
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000044 	.word	0x00000044
1a000120:	1a003210 	.word	0x1a003210
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003210 	.word	0x1a003210
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003210 	.word	0x1a003210
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003210 	.word	0x1a003210
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000104 	.word	0x00000104
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
1a000178:	4770      	bx	lr
1a00017a:	bf00      	nop

1a00017c <NMI_Handler>:
1a00017c:	e7fe      	b.n	1a00017c <NMI_Handler>
1a00017e:	bf00      	nop

1a000180 <HardFault_Handler>:
1a000180:	e7fe      	b.n	1a000180 <HardFault_Handler>
1a000182:	bf00      	nop

1a000184 <MemManage_Handler>:
1a000184:	e7fe      	b.n	1a000184 <MemManage_Handler>
1a000186:	bf00      	nop

1a000188 <BusFault_Handler>:
1a000188:	e7fe      	b.n	1a000188 <BusFault_Handler>
1a00018a:	bf00      	nop

1a00018c <UsageFault_Handler>:
1a00018c:	e7fe      	b.n	1a00018c <UsageFault_Handler>
1a00018e:	bf00      	nop

1a000190 <SVC_Handler>:
1a000190:	e7fe      	b.n	1a000190 <SVC_Handler>
1a000192:	bf00      	nop

1a000194 <DebugMon_Handler>:
1a000194:	e7fe      	b.n	1a000194 <DebugMon_Handler>
1a000196:	bf00      	nop

1a000198 <PendSV_Handler>:
1a000198:	e7fe      	b.n	1a000198 <PendSV_Handler>
1a00019a:	bf00      	nop
1a00019c:	e7fe      	b.n	1a00019c <PendSV_Handler+0x4>
1a00019e:	bf00      	nop

1a0001a0 <ADC0_IRQHandler>:
1a0001a0:	e7fe      	b.n	1a0001a0 <ADC0_IRQHandler>
1a0001a2:	bf00      	nop

1a0001a4 <data_init>:
1a0001a4:	b410      	push	{r4}
1a0001a6:	2300      	movs	r3, #0
1a0001a8:	e004      	b.n	1a0001b4 <data_init+0x10>
1a0001aa:	6804      	ldr	r4, [r0, #0]
1a0001ac:	600c      	str	r4, [r1, #0]
1a0001ae:	3304      	adds	r3, #4
1a0001b0:	3004      	adds	r0, #4
1a0001b2:	3104      	adds	r1, #4
1a0001b4:	4293      	cmp	r3, r2
1a0001b6:	d3f8      	bcc.n	1a0001aa <data_init+0x6>
1a0001b8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001bc:	4770      	bx	lr
1a0001be:	bf00      	nop

1a0001c0 <bss_init>:
1a0001c0:	2300      	movs	r3, #0
1a0001c2:	e003      	b.n	1a0001cc <bss_init+0xc>
1a0001c4:	2200      	movs	r2, #0
1a0001c6:	6002      	str	r2, [r0, #0]
1a0001c8:	3304      	adds	r3, #4
1a0001ca:	3004      	adds	r0, #4
1a0001cc:	428b      	cmp	r3, r1
1a0001ce:	d3f9      	bcc.n	1a0001c4 <bss_init+0x4>
1a0001d0:	4770      	bx	lr
1a0001d2:	bf00      	nop
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <setBlinkPeriod>:
/*==================[declaraciones de funciones internas]====================*/

/*==================[declaraciones de funciones externas]====================*/

/*==================[definiciones de funciones internas]=====================*/
static void setBlinkPeriod() {
1a000300:	b510      	push	{r4, lr}

   uint8_t ledIndex;

   // Configurar el periodo de parpadeo para todos los leds usados
   // en la aplicaci�n
   for(ledIndex = 0;ledIndex < LEDS_MAX;ledIndex++)
1a000302:	2400      	movs	r4, #0
1a000304:	e00b      	b.n	1a00031e <setBlinkPeriod+0x1e>
      ledsSetBlinkPeriod(gLedsGpioMap[ledIndex],
                         gBlinkPeriodsArray[gAppControl.blinkPeriodIndex]);
1a000306:	4b0c      	ldr	r3, [pc, #48]	; (1a000338 <setBlinkPeriod+0x38>)
1a000308:	785b      	ldrb	r3, [r3, #1]
   uint8_t ledIndex;

   // Configurar el periodo de parpadeo para todos los leds usados
   // en la aplicaci�n
   for(ledIndex = 0;ledIndex < LEDS_MAX;ledIndex++)
      ledsSetBlinkPeriod(gLedsGpioMap[ledIndex],
1a00030a:	4a0c      	ldr	r2, [pc, #48]	; (1a00033c <setBlinkPeriod+0x3c>)
1a00030c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1a000310:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
1a000314:	6999      	ldr	r1, [r3, #24]
1a000316:	f000 fac9 	bl	1a0008ac <ledsSetBlinkPeriod>

   uint8_t ledIndex;

   // Configurar el periodo de parpadeo para todos los leds usados
   // en la aplicaci�n
   for(ledIndex = 0;ledIndex < LEDS_MAX;ledIndex++)
1a00031a:	3401      	adds	r4, #1
1a00031c:	b2e4      	uxtb	r4, r4
1a00031e:	2c05      	cmp	r4, #5
1a000320:	d9f1      	bls.n	1a000306 <setBlinkPeriod+0x6>
      ledsSetBlinkPeriod(gLedsGpioMap[ledIndex],
                         gBlinkPeriodsArray[gAppControl.blinkPeriodIndex]);

   // Incrementar �ndice a periodo de parpadeo de los leds
   gAppControl.blinkPeriodIndex++;
1a000322:	4a05      	ldr	r2, [pc, #20]	; (1a000338 <setBlinkPeriod+0x38>)
1a000324:	7853      	ldrb	r3, [r2, #1]
1a000326:	3301      	adds	r3, #1
1a000328:	b2db      	uxtb	r3, r3
1a00032a:	7053      	strb	r3, [r2, #1]

   if(PERIODS_MAX <= gAppControl.blinkPeriodIndex)
1a00032c:	2b02      	cmp	r3, #2
1a00032e:	d902      	bls.n	1a000336 <setBlinkPeriod+0x36>
      gAppControl.blinkPeriodIndex = 0;
1a000330:	2200      	movs	r2, #0
1a000332:	4b01      	ldr	r3, [pc, #4]	; (1a000338 <setBlinkPeriod+0x38>)
1a000334:	705a      	strb	r2, [r3, #1]
1a000336:	bd10      	pop	{r4, pc}
1a000338:	10000048 	.word	0x10000048
1a00033c:	1a002e40 	.word	0x1a002e40

1a000340 <setBlinkyLed>:
}

static void setBlinkyLed() {
1a000340:	b508      	push	{r3, lr}

   // Incrementar �ndice a led de parpadeo de los leds
   gAppControl.blinkLedIndex++;
1a000342:	4a09      	ldr	r2, [pc, #36]	; (1a000368 <setBlinkyLed+0x28>)
1a000344:	7813      	ldrb	r3, [r2, #0]
1a000346:	3301      	adds	r3, #1
1a000348:	b2db      	uxtb	r3, r3
1a00034a:	7013      	strb	r3, [r2, #0]

   if(LEDS_MAX <= gAppControl.blinkLedIndex)
1a00034c:	2b05      	cmp	r3, #5
1a00034e:	d902      	bls.n	1a000356 <setBlinkyLed+0x16>
      gAppControl.blinkLedIndex = 0;
1a000350:	2200      	movs	r2, #0
1a000352:	4b05      	ldr	r3, [pc, #20]	; (1a000368 <setBlinkyLed+0x28>)
1a000354:	701a      	strb	r2, [r3, #0]

   // Iniciar el parpadeo del nuevo led
   ledsStartBlinking(gLedsGpioMap[gAppControl.blinkLedIndex]);
1a000356:	4b04      	ldr	r3, [pc, #16]	; (1a000368 <setBlinkyLed+0x28>)
1a000358:	781a      	ldrb	r2, [r3, #0]
1a00035a:	4b04      	ldr	r3, [pc, #16]	; (1a00036c <setBlinkyLed+0x2c>)
1a00035c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a000360:	f000 fa6e 	bl	1a000840 <ledsStartBlinking>
1a000364:	bd08      	pop	{r3, pc}
1a000366:	bf00      	nop
1a000368:	10000048 	.word	0x10000048
1a00036c:	1a002e40 	.word	0x1a002e40

1a000370 <appTask>:
 *
 * \param No recibe par�metros
 *
 * \return void No devuelve nada
 */
static void appTask(void) {
1a000370:	b500      	push	{lr}
1a000372:	b083      	sub	sp, #12
   buttonStatus_t currentStatusTEC1, currentStatusTEC2;

   // Obtener el estado de los botones TEC1 y TEC2
   buttonsGetStatus(TEC1, &currentStatusTEC1);
1a000374:	2024      	movs	r0, #36	; 0x24
1a000376:	f10d 0107 	add.w	r1, sp, #7
1a00037a:	f000 f8fd 	bl	1a000578 <buttonsGetStatus>
   buttonsGetStatus(TEC2, &currentStatusTEC2);
1a00037e:	2025      	movs	r0, #37	; 0x25
1a000380:	f10d 0106 	add.w	r1, sp, #6
1a000384:	f000 f8f8 	bl	1a000578 <buttonsGetStatus>

   // Operar en base al estado de TEC1
   if(gAppControl.statusTEC1 != currentStatusTEC1) {
1a000388:	4b0f      	ldr	r3, [pc, #60]	; (1a0003c8 <appTask+0x58>)
1a00038a:	789a      	ldrb	r2, [r3, #2]
1a00038c:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000390:	429a      	cmp	r2, r3
1a000392:	d007      	beq.n	1a0003a4 <appTask+0x34>

      if (BUTTON_DOWN == currentStatusTEC1) {
1a000394:	2b02      	cmp	r3, #2
1a000396:	d101      	bne.n	1a00039c <appTask+0x2c>
         // Cambiar el periodo de parpadeo de los leds
         setBlinkPeriod();
1a000398:	f7ff ffb2 	bl	1a000300 <setBlinkPeriod>
      }

      // Almacenar el nuevo estado del boton TEC1
      gAppControl.statusTEC1 = currentStatusTEC1;
1a00039c:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a0003a0:	4b09      	ldr	r3, [pc, #36]	; (1a0003c8 <appTask+0x58>)
1a0003a2:	709a      	strb	r2, [r3, #2]
   }

   // Operar en base al estado de TEC2
   if(gAppControl.statusTEC2 != currentStatusTEC2) {
1a0003a4:	4b08      	ldr	r3, [pc, #32]	; (1a0003c8 <appTask+0x58>)
1a0003a6:	78da      	ldrb	r2, [r3, #3]
1a0003a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a0003ac:	429a      	cmp	r2, r3
1a0003ae:	d007      	beq.n	1a0003c0 <appTask+0x50>

      if(BUTTON_DOWN == currentStatusTEC2) {
1a0003b0:	2b02      	cmp	r3, #2
1a0003b2:	d101      	bne.n	1a0003b8 <appTask+0x48>
         // Cambiar el led que parpadea
         setBlinkyLed();
1a0003b4:	f7ff ffc4 	bl	1a000340 <setBlinkyLed>
      }

      // Almacenar el nuevo estado del boton TEC2
      gAppControl.statusTEC2 = currentStatusTEC2;
1a0003b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
1a0003bc:	4b02      	ldr	r3, [pc, #8]	; (1a0003c8 <appTask+0x58>)
1a0003be:	70da      	strb	r2, [r3, #3]
   }
}
1a0003c0:	b003      	add	sp, #12
1a0003c2:	f85d fb04 	ldr.w	pc, [sp], #4
1a0003c6:	bf00      	nop
1a0003c8:	10000048 	.word	0x10000048

1a0003cc <appInit>:

/*==================[definiciones de funciones externas]=====================*/
bool_t appInit() {
1a0003cc:	b530      	push	{r4, r5, lr}
1a0003ce:	b083      	sub	sp, #12

   // ---------- CONFIGURACIONES ------------------------------
   uint8_t i, taskInitialDelay = 0;

   // Inicializar y configurar la plataforma
   boardConfig();
1a0003d0:	f000 fad2 	bl	1a000978 <boardConfig>

   // Inicializar planificador de tareas
   schedulerInit();
1a0003d4:	f000 f93a 	bl	1a00064c <schedulerInit>

   // Inicializar m�dulo de control de los botones
   buttonsInit();
1a0003d8:	f000 f89e 	bl	1a000518 <buttonsInit>

   // Inicializar m�dulo de control de los leds
   ledsInit();
1a0003dc:	f000 fa12 	bl	1a000804 <ledsInit>

   // Determinar el estado inicial de los botones
   buttonsGetStatus(TEC1, &gAppControl.statusTEC1);
1a0003e0:	4c20      	ldr	r4, [pc, #128]	; (1a000464 <appInit+0x98>)
1a0003e2:	2024      	movs	r0, #36	; 0x24
1a0003e4:	1ca1      	adds	r1, r4, #2
1a0003e6:	f000 f8c7 	bl	1a000578 <buttonsGetStatus>
   buttonsGetStatus(TEC2, &gAppControl.statusTEC2);
1a0003ea:	2025      	movs	r0, #37	; 0x25
1a0003ec:	1ce1      	adds	r1, r4, #3
1a0003ee:	f000 f8c3 	bl	1a000578 <buttonsGetStatus>

   // Configurar el periodo inicial de parpadeo de los leds
   setBlinkPeriod();
1a0003f2:	f7ff ff85 	bl	1a000300 <setBlinkPeriod>

   // Inicializar led RGB rojo parpadeando
   setBlinkyLed();
1a0003f6:	f7ff ffa3 	bl	1a000340 <setBlinkyLed>

   // Cargar las tareas que componen el scheduler
   if(SCHEDULER_MAX_TASKS <= schedulerAddTask((sAPI_FuncPtr_t) blinkLedTask, taskInitialDelay++, BLINK_LED_TASK_TIME_PERIOD))
1a0003fa:	481b      	ldr	r0, [pc, #108]	; (1a000468 <appInit+0x9c>)
1a0003fc:	2100      	movs	r1, #0
1a0003fe:	220a      	movs	r2, #10
1a000400:	f000 f940 	bl	1a000684 <schedulerAddTask>
1a000404:	2803      	cmp	r0, #3
1a000406:	dc25      	bgt.n	1a000454 <appInit+0x88>
      return FALSE;

   const void (*buttonTasksVector[]) = {
1a000408:	4b18      	ldr	r3, [pc, #96]	; (1a00046c <appInit+0xa0>)
1a00040a:	e893 0003 	ldmia.w	r3, {r0, r1}
1a00040e:	ab02      	add	r3, sp, #8
1a000410:	e903 0003 	stmdb	r3, {r0, r1}

   // Inicializar led RGB rojo parpadeando
   setBlinkyLed();

   // Cargar las tareas que componen el scheduler
   if(SCHEDULER_MAX_TASKS <= schedulerAddTask((sAPI_FuncPtr_t) blinkLedTask, taskInitialDelay++, BLINK_LED_TASK_TIME_PERIOD))
1a000414:	2101      	movs	r1, #1

   const void (*buttonTasksVector[]) = {
      MREPEAT(BUTTONS_MAX, DECLARE_BUTTON_TASK_VECTOR, ~)
   };

   for(i = 0;i < sizeof(buttonTasksVector)/sizeof(buttonTasksVector[0]);i++) {
1a000416:	2400      	movs	r4, #0
1a000418:	e00e      	b.n	1a000438 <appInit+0x6c>
      if(SCHEDULER_MAX_TASKS <= schedulerAddTask((sAPI_FuncPtr_t) buttonTasksVector[i], taskInitialDelay++, DEBOUNCE_TECn_TASK_TIME_PERIOD))
1a00041a:	1c4b      	adds	r3, r1, #1
1a00041c:	b2dd      	uxtb	r5, r3
1a00041e:	ab02      	add	r3, sp, #8
1a000420:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1a000424:	f853 0c08 	ldr.w	r0, [r3, #-8]
1a000428:	2214      	movs	r2, #20
1a00042a:	f000 f92b 	bl	1a000684 <schedulerAddTask>
1a00042e:	2803      	cmp	r0, #3
1a000430:	dc12      	bgt.n	1a000458 <appInit+0x8c>

   const void (*buttonTasksVector[]) = {
      MREPEAT(BUTTONS_MAX, DECLARE_BUTTON_TASK_VECTOR, ~)
   };

   for(i = 0;i < sizeof(buttonTasksVector)/sizeof(buttonTasksVector[0]);i++) {
1a000432:	3401      	adds	r4, #1
1a000434:	b2e4      	uxtb	r4, r4
      if(SCHEDULER_MAX_TASKS <= schedulerAddTask((sAPI_FuncPtr_t) buttonTasksVector[i], taskInitialDelay++, DEBOUNCE_TECn_TASK_TIME_PERIOD))
1a000436:	4629      	mov	r1, r5

   const void (*buttonTasksVector[]) = {
      MREPEAT(BUTTONS_MAX, DECLARE_BUTTON_TASK_VECTOR, ~)
   };

   for(i = 0;i < sizeof(buttonTasksVector)/sizeof(buttonTasksVector[0]);i++) {
1a000438:	2c01      	cmp	r4, #1
1a00043a:	d9ee      	bls.n	1a00041a <appInit+0x4e>
      if(SCHEDULER_MAX_TASKS <= schedulerAddTask((sAPI_FuncPtr_t) buttonTasksVector[i], taskInitialDelay++, DEBOUNCE_TECn_TASK_TIME_PERIOD))
         return FALSE;
   }

   if(SCHEDULER_MAX_TASKS <= schedulerAddTask((sAPI_FuncPtr_t) appTask, taskInitialDelay++, CONTROL_TASK_TIME_PERIOD))
1a00043c:	480c      	ldr	r0, [pc, #48]	; (1a000470 <appInit+0xa4>)
1a00043e:	2228      	movs	r2, #40	; 0x28
1a000440:	f000 f920 	bl	1a000684 <schedulerAddTask>
1a000444:	2803      	cmp	r0, #3
1a000446:	dc09      	bgt.n	1a00045c <appInit+0x90>
      return FALSE;

   // Iniciar el planificador de tareas
   schedulerStart(SCHEDULER_TICK);
1a000448:	2001      	movs	r0, #1
1a00044a:	2100      	movs	r1, #0
1a00044c:	f000 f90e 	bl	1a00066c <schedulerStart>

   return TRUE;
1a000450:	2001      	movs	r0, #1
1a000452:	e004      	b.n	1a00045e <appInit+0x92>
   // Inicializar led RGB rojo parpadeando
   setBlinkyLed();

   // Cargar las tareas que componen el scheduler
   if(SCHEDULER_MAX_TASKS <= schedulerAddTask((sAPI_FuncPtr_t) blinkLedTask, taskInitialDelay++, BLINK_LED_TASK_TIME_PERIOD))
      return FALSE;
1a000454:	2000      	movs	r0, #0
1a000456:	e002      	b.n	1a00045e <appInit+0x92>
      MREPEAT(BUTTONS_MAX, DECLARE_BUTTON_TASK_VECTOR, ~)
   };

   for(i = 0;i < sizeof(buttonTasksVector)/sizeof(buttonTasksVector[0]);i++) {
      if(SCHEDULER_MAX_TASKS <= schedulerAddTask((sAPI_FuncPtr_t) buttonTasksVector[i], taskInitialDelay++, DEBOUNCE_TECn_TASK_TIME_PERIOD))
         return FALSE;
1a000458:	2000      	movs	r0, #0
1a00045a:	e000      	b.n	1a00045e <appInit+0x92>
   }

   if(SCHEDULER_MAX_TASKS <= schedulerAddTask((sAPI_FuncPtr_t) appTask, taskInitialDelay++, CONTROL_TASK_TIME_PERIOD))
      return FALSE;
1a00045c:	2000      	movs	r0, #0

   // Iniciar el planificador de tareas
   schedulerStart(SCHEDULER_TICK);

   return TRUE;
}
1a00045e:	b003      	add	sp, #12
1a000460:	bd30      	pop	{r4, r5, pc}
1a000462:	bf00      	nop
1a000464:	10000048 	.word	0x10000048
1a000468:	1a000909 	.word	0x1a000909
1a00046c:	1a002e64 	.word	0x1a002e64
1a000470:	1a000371 	.word	0x1a000371

1a000474 <appRun>:

void appRun() {
1a000474:	b508      	push	{r3, lr}
   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE )
   {
      /* Ejecutar tareas que componen el programa */

      schedulerDispatchTasks();
1a000476:	f000 f93f 	bl	1a0006f8 <schedulerDispatchTasks>
   }
1a00047a:	e7fc      	b.n	1a000476 <appRun+0x2>

1a00047c <getButton>:

/*==================[definiciones de datos externos]=========================*/

/*==================[definiciones de funciones internas]=====================*/

static button_t* getButton(const uint32_t buttonId) {
1a00047c:	b410      	push	{r4}

	uint8_t i;

	for(i = 0;i < BUTTONS_MAX;i++) {
1a00047e:	2300      	movs	r3, #0
1a000480:	e00a      	b.n	1a000498 <getButton+0x1c>
	   if(buttonId == gButtons[i].id)
1a000482:	461c      	mov	r4, r3
1a000484:	011a      	lsls	r2, r3, #4
1a000486:	4907      	ldr	r1, [pc, #28]	; (1a0004a4 <getButton+0x28>)
1a000488:	588a      	ldr	r2, [r1, r2]
1a00048a:	4282      	cmp	r2, r0
1a00048c:	d102      	bne.n	1a000494 <getButton+0x18>
		   return &gButtons[i];
1a00048e:	eb01 1004 	add.w	r0, r1, r4, lsl #4
1a000492:	e004      	b.n	1a00049e <getButton+0x22>

static button_t* getButton(const uint32_t buttonId) {

	uint8_t i;

	for(i = 0;i < BUTTONS_MAX;i++) {
1a000494:	3301      	adds	r3, #1
1a000496:	b2db      	uxtb	r3, r3
1a000498:	2b01      	cmp	r3, #1
1a00049a:	d9f2      	bls.n	1a000482 <getButton+0x6>
	   if(buttonId == gButtons[i].id)
		   return &gButtons[i];
	}

	return NULL;
1a00049c:	2000      	movs	r0, #0
}
1a00049e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0004a2:	4770      	bx	lr
1a0004a4:	1000004c 	.word	0x1000004c

1a0004a8 <doNothing>:
	return FALSE;
}

/* Funciones de acci�n de la m�quina de estados finita */

static void doNothing(const uint32_t buttonId) {
1a0004a8:	4770      	bx	lr
1a0004aa:	bf00      	nop

1a0004ac <setButtonDelay>:
	(void) buttonId;
}

static void setButtonDelay(const uint32_t buttonId) {
1a0004ac:	b508      	push	{r3, lr}

   button_t* button = getButton(buttonId);
1a0004ae:	f7ff ffe5 	bl	1a00047c <getButton>

   if(button) {
1a0004b2:	b108      	cbz	r0, 1a0004b8 <setButtonDelay+0xc>

      // Configurar delay
      button->delay = TRANSITION_WAIT_INTERVAL_MS/DEBOUNCE_TECn_TASK_TIME_PERIOD;
1a0004b4:	2202      	movs	r2, #2
1a0004b6:	6082      	str	r2, [r0, #8]
1a0004b8:	bd08      	pop	{r3, pc}
1a0004ba:	bf00      	nop

1a0004bc <setButtonStatusAsPressed>:
   }
}

static void setButtonStatusAsPressed(const uint32_t buttonId) {
1a0004bc:	b508      	push	{r3, lr}
   button_t* button = getButton(buttonId);
1a0004be:	f7ff ffdd 	bl	1a00047c <getButton>

   if(button) {
1a0004c2:	b108      	cbz	r0, 1a0004c8 <setButtonStatusAsPressed+0xc>

      // Configurar el bot�n como presionado
	  button->status = BUTTON_DOWN;
1a0004c4:	2202      	movs	r2, #2
1a0004c6:	7102      	strb	r2, [r0, #4]
1a0004c8:	bd08      	pop	{r3, pc}
1a0004ca:	bf00      	nop

1a0004cc <setButtonStatusAsReleased>:
   }
}
static void setButtonStatusAsReleased(const uint32_t buttonId) {
1a0004cc:	b508      	push	{r3, lr}
   button_t* button = getButton(buttonId);
1a0004ce:	f7ff ffd5 	bl	1a00047c <getButton>

   if(button) {
1a0004d2:	b108      	cbz	r0, 1a0004d8 <setButtonStatusAsReleased+0xc>

     // Configurar el bot�n como liberado
     button->status = BUTTON_UP;
1a0004d4:	2201      	movs	r2, #1
1a0004d6:	7102      	strb	r2, [r0, #4]
1a0004d8:	bd08      	pop	{r3, pc}
1a0004da:	bf00      	nop

1a0004dc <eventGenerator>:
	}

	return NULL;
}

static bool_t eventGenerator(button_t* button, uint8_t* event) {
1a0004dc:	b510      	push	{r4, lr}

   if(button && event) {
1a0004de:	b190      	cbz	r0, 1a000506 <eventGenerator+0x2a>
1a0004e0:	4602      	mov	r2, r0
1a0004e2:	b191      	cbz	r1, 1a00050a <eventGenerator+0x2e>
		// Leer el nivel del bot�n y generar el evento correspondiente
		if(!button->delay || (button->delay && (0 == --button->delay))) {
1a0004e4:	6883      	ldr	r3, [r0, #8]
1a0004e6:	b11b      	cbz	r3, 1a0004f0 <eventGenerator+0x14>
1a0004e8:	b18b      	cbz	r3, 1a00050e <eventGenerator+0x32>
1a0004ea:	3b01      	subs	r3, #1
1a0004ec:	6083      	str	r3, [r0, #8]
1a0004ee:	b983      	cbnz	r3, 1a000512 <eventGenerator+0x36>
1a0004f0:	460c      	mov	r4, r1
		   *event = (0 == gpioRead(button->id) ? BUTTON_DOWN : BUTTON_UP);
1a0004f2:	7810      	ldrb	r0, [r2, #0]
1a0004f4:	f000 fc7c 	bl	1a000df0 <gpioRead>
1a0004f8:	b908      	cbnz	r0, 1a0004fe <eventGenerator+0x22>
1a0004fa:	2302      	movs	r3, #2
1a0004fc:	e000      	b.n	1a000500 <eventGenerator+0x24>
1a0004fe:	2301      	movs	r3, #1
1a000500:	7023      	strb	r3, [r4, #0]

		   return TRUE;
1a000502:	2001      	movs	r0, #1
1a000504:	bd10      	pop	{r4, pc}
		}
	}

	return FALSE;
1a000506:	2000      	movs	r0, #0
1a000508:	bd10      	pop	{r4, pc}
1a00050a:	2000      	movs	r0, #0
1a00050c:	bd10      	pop	{r4, pc}
1a00050e:	2000      	movs	r0, #0
1a000510:	bd10      	pop	{r4, pc}
1a000512:	2000      	movs	r0, #0
}
1a000514:	bd10      	pop	{r4, pc}
1a000516:	bf00      	nop

1a000518 <buttonsInit>:
   }
}

/*==================[definiciones de funciones externas]=====================*/

void buttonsInit(void) {
1a000518:	b538      	push	{r3, r4, r5, lr}
   uint8_t i;

   // Inicializar y configurar el arreglo de control de los botones
   for(i = 0;i < BUTTONS_MAX;i++) {
1a00051a:	2400      	movs	r4, #0
1a00051c:	e01f      	b.n	1a00055e <buttonsInit+0x46>

	   // Asignar como id del bot�n el gpio correpondiente
	   gButtons[i].id = buttonsGpioBoardMap[i];
1a00051e:	4625      	mov	r5, r4
1a000520:	4b12      	ldr	r3, [pc, #72]	; (1a00056c <buttonsInit+0x54>)
1a000522:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1a000526:	6b18      	ldr	r0, [r3, #48]	; 0x30
1a000528:	0123      	lsls	r3, r4, #4
1a00052a:	4a11      	ldr	r2, [pc, #68]	; (1a000570 <buttonsInit+0x58>)
1a00052c:	50d0      	str	r0, [r2, r3]

	   // Determinar el estado inicial del bot�n.
	   // Es necesario invertir el valor leido, pues un 0 (OFF) significa
	   // tecla presionada y un 1 (ON) significa tecla liberada.
      gButtons[i].status = (0 == gpioRead(gButtons[i].id) ? BUTTON_DOWN : BUTTON_UP);
1a00052e:	b2c0      	uxtb	r0, r0
1a000530:	f000 fc5e 	bl	1a000df0 <gpioRead>
1a000534:	b908      	cbnz	r0, 1a00053a <buttonsInit+0x22>
1a000536:	2202      	movs	r2, #2
1a000538:	e000      	b.n	1a00053c <buttonsInit+0x24>
1a00053a:	2201      	movs	r2, #1
1a00053c:	4b0c      	ldr	r3, [pc, #48]	; (1a000570 <buttonsInit+0x58>)
1a00053e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
1a000542:	711a      	strb	r2, [r3, #4]

      // Determinar el estado inicial de la maquina de estados en funcion
      // del estado del bot�n (presionado o liberado)
      gButtons[i].state = (fsmState_t* ) (BUTTON_DOWN == gButtons[i].status ? buttonPressed : buttonRelased);
1a000544:	2a02      	cmp	r2, #2
1a000546:	d101      	bne.n	1a00054c <buttonsInit+0x34>
1a000548:	4a08      	ldr	r2, [pc, #32]	; (1a00056c <buttonsInit+0x54>)
1a00054a:	e000      	b.n	1a00054e <buttonsInit+0x36>
1a00054c:	4a09      	ldr	r2, [pc, #36]	; (1a000574 <buttonsInit+0x5c>)
1a00054e:	4b08      	ldr	r3, [pc, #32]	; (1a000570 <buttonsInit+0x58>)
1a000550:	eb03 1305 	add.w	r3, r3, r5, lsl #4
1a000554:	60da      	str	r2, [r3, #12]

      // Deshabilitar el delay asociado al bot�n
      gButtons[i].delay = 0;
1a000556:	2200      	movs	r2, #0
1a000558:	609a      	str	r2, [r3, #8]

void buttonsInit(void) {
   uint8_t i;

   // Inicializar y configurar el arreglo de control de los botones
   for(i = 0;i < BUTTONS_MAX;i++) {
1a00055a:	3401      	adds	r4, #1
1a00055c:	b2e4      	uxtb	r4, r4
1a00055e:	2c01      	cmp	r4, #1
1a000560:	d9dd      	bls.n	1a00051e <buttonsInit+0x6>

      // Deshabilitar el delay asociado al bot�n
      gButtons[i].delay = 0;
   }

   gInitFlag = TRUE;
1a000562:	2201      	movs	r2, #1
1a000564:	4b02      	ldr	r3, [pc, #8]	; (1a000570 <buttonsInit+0x58>)
1a000566:	f883 2020 	strb.w	r2, [r3, #32]
1a00056a:	bd38      	pop	{r3, r4, r5, pc}
1a00056c:	1a002e6c 	.word	0x1a002e6c
1a000570:	1000004c 	.word	0x1000004c
1a000574:	1a002e84 	.word	0x1a002e84

1a000578 <buttonsGetStatus>:
}

bool_t buttonsGetStatus(const uint32_t buttonId, buttonStatus_t* status) {
   if(gInitFlag && status) {
1a000578:	4b09      	ldr	r3, [pc, #36]	; (1a0005a0 <buttonsGetStatus+0x28>)
1a00057a:	f893 3020 	ldrb.w	r3, [r3, #32]
1a00057e:	b153      	cbz	r3, 1a000596 <buttonsGetStatus+0x1e>
1a000580:	b141      	cbz	r1, 1a000594 <buttonsGetStatus+0x1c>
   }

   gInitFlag = TRUE;
}

bool_t buttonsGetStatus(const uint32_t buttonId, buttonStatus_t* status) {
1a000582:	b510      	push	{r4, lr}
1a000584:	460c      	mov	r4, r1
   if(gInitFlag && status) {
      button_t* button = getButton(buttonId);
1a000586:	f7ff ff79 	bl	1a00047c <getButton>

      if(button) {
1a00058a:	b130      	cbz	r0, 1a00059a <buttonsGetStatus+0x22>

         // Devolver el estado actual del bot�n (presionado o liberado)
    	   *status = button->status;
1a00058c:	7903      	ldrb	r3, [r0, #4]
1a00058e:	7023      	strb	r3, [r4, #0]

         return TRUE;
1a000590:	2301      	movs	r3, #1
1a000592:	e003      	b.n	1a00059c <buttonsGetStatus+0x24>
      }
   }

   return FALSE;
1a000594:	2300      	movs	r3, #0
}
1a000596:	4618      	mov	r0, r3
1a000598:	4770      	bx	lr

         return TRUE;
      }
   }

   return FALSE;
1a00059a:	2300      	movs	r3, #0
}
1a00059c:	4618      	mov	r0, r3
1a00059e:	bd10      	pop	{r4, pc}
1a0005a0:	1000004c 	.word	0x1000004c

1a0005a4 <debounceTec0Task>:

/* Tareas autogeneradas en terminos de la cantidad de botones de la BOARD */
MREPEAT(BUTTONS_MAX, DEFINE_BUTTON_TASK, ~);
1a0005a4:	4b0b      	ldr	r3, [pc, #44]	; (1a0005d4 <debounceTec0Task+0x30>)
1a0005a6:	f893 3020 	ldrb.w	r3, [r3, #32]
1a0005aa:	b193      	cbz	r3, 1a0005d2 <debounceTec0Task+0x2e>
1a0005ac:	b500      	push	{lr}
1a0005ae:	b083      	sub	sp, #12
1a0005b0:	4808      	ldr	r0, [pc, #32]	; (1a0005d4 <debounceTec0Task+0x30>)
1a0005b2:	f10d 0107 	add.w	r1, sp, #7
1a0005b6:	f7ff ff91 	bl	1a0004dc <eventGenerator>
1a0005ba:	b138      	cbz	r0, 1a0005cc <debounceTec0Task+0x28>
1a0005bc:	4b05      	ldr	r3, [pc, #20]	; (1a0005d4 <debounceTec0Task+0x30>)
1a0005be:	f103 000c 	add.w	r0, r3, #12
1a0005c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0005c6:	681a      	ldr	r2, [r3, #0]
1a0005c8:	f000 f8b8 	bl	1a00073c <fsm>
1a0005cc:	b003      	add	sp, #12
1a0005ce:	f85d fb04 	ldr.w	pc, [sp], #4
1a0005d2:	4770      	bx	lr
1a0005d4:	1000004c 	.word	0x1000004c

1a0005d8 <debounceTec1Task>:
1a0005d8:	4b0b      	ldr	r3, [pc, #44]	; (1a000608 <debounceTec1Task+0x30>)
1a0005da:	f893 3020 	ldrb.w	r3, [r3, #32]
1a0005de:	b193      	cbz	r3, 1a000606 <debounceTec1Task+0x2e>
1a0005e0:	b500      	push	{lr}
1a0005e2:	b083      	sub	sp, #12
1a0005e4:	4809      	ldr	r0, [pc, #36]	; (1a00060c <debounceTec1Task+0x34>)
1a0005e6:	f10d 0107 	add.w	r1, sp, #7
1a0005ea:	f7ff ff77 	bl	1a0004dc <eventGenerator>
1a0005ee:	b138      	cbz	r0, 1a000600 <debounceTec1Task+0x28>
1a0005f0:	4b05      	ldr	r3, [pc, #20]	; (1a000608 <debounceTec1Task+0x30>)
1a0005f2:	f103 001c 	add.w	r0, r3, #28
1a0005f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0005fa:	691a      	ldr	r2, [r3, #16]
1a0005fc:	f000 f89e 	bl	1a00073c <fsm>
1a000600:	b003      	add	sp, #12
1a000602:	f85d fb04 	ldr.w	pc, [sp], #4
1a000606:	4770      	bx	lr
1a000608:	1000004c 	.word	0x1000004c
1a00060c:	1000005c 	.word	0x1000005c

1a000610 <schedulerUpdate>:

   int32_t index;
   //serialDebugPrintLnString( "schedulerUpdate." );

   // NOTE: calculations are in *TICKS* (not milliseconds)
   for( index = 0; index < SCHEDULER_MAX_TASKS; index++ ){
1a000610:	2300      	movs	r3, #0
1a000612:	e015      	b.n	1a000640 <schedulerUpdate+0x30>
      // Check if there is a task at this location
      if( schedulerTasks[index].pTask ){
1a000614:	011a      	lsls	r2, r3, #4
1a000616:	490c      	ldr	r1, [pc, #48]	; (1a000648 <schedulerUpdate+0x38>)
1a000618:	588a      	ldr	r2, [r1, r2]
1a00061a:	b182      	cbz	r2, 1a00063e <schedulerUpdate+0x2e>
         if( --schedulerTasks[index].delay <= 0 ){
1a00061c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
1a000620:	684a      	ldr	r2, [r1, #4]
1a000622:	3a01      	subs	r2, #1
1a000624:	604a      	str	r2, [r1, #4]
1a000626:	2a00      	cmp	r2, #0
1a000628:	dc09      	bgt.n	1a00063e <schedulerUpdate+0x2e>
            // The task is due to run
            schedulerTasks[index].runMe += 1; // Inc. the 'runMe' flag
1a00062a:	460a      	mov	r2, r1
1a00062c:	68c9      	ldr	r1, [r1, #12]
1a00062e:	3101      	adds	r1, #1
1a000630:	60d1      	str	r1, [r2, #12]
            if( schedulerTasks[index].period ){
1a000632:	6892      	ldr	r2, [r2, #8]
1a000634:	b11a      	cbz	r2, 1a00063e <schedulerUpdate+0x2e>
               // Schedule regular tasks to run again
               schedulerTasks[index].delay = schedulerTasks[index].period;
1a000636:	4904      	ldr	r1, [pc, #16]	; (1a000648 <schedulerUpdate+0x38>)
1a000638:	eb01 1103 	add.w	r1, r1, r3, lsl #4
1a00063c:	604a      	str	r2, [r1, #4]

   int32_t index;
   //serialDebugPrintLnString( "schedulerUpdate." );

   // NOTE: calculations are in *TICKS* (not milliseconds)
   for( index = 0; index < SCHEDULER_MAX_TASKS; index++ ){
1a00063e:	3301      	adds	r3, #1
1a000640:	2b03      	cmp	r3, #3
1a000642:	dde7      	ble.n	1a000614 <schedulerUpdate+0x4>
            }
         }
      }
   }
   return 0;
}
1a000644:	2000      	movs	r0, #0
1a000646:	4770      	bx	lr
1a000648:	100000f8 	.word	0x100000f8

1a00064c <schedulerInit>:
schedulerInit()
Scheduler initialization function. Prepares scheduler
data structures.
Must call this function before using the scheduler.
-*------------------------------------------------------------------*/
void schedulerInit( void ){
1a00064c:	b510      	push	{r4, lr}

   uint32_t i;
   for( i = 0; i < SCHEDULER_MAX_TASKS; i++ ){
1a00064e:	2400      	movs	r4, #0
1a000650:	e003      	b.n	1a00065a <schedulerInit+0xe>
      schedulerDeleteTask(i);
1a000652:	4620      	mov	r0, r4
1a000654:	f000 f836 	bl	1a0006c4 <schedulerDeleteTask>
Must call this function before using the scheduler.
-*------------------------------------------------------------------*/
void schedulerInit( void ){

   uint32_t i;
   for( i = 0; i < SCHEDULER_MAX_TASKS; i++ ){
1a000658:	3401      	adds	r4, #1
1a00065a:	2c03      	cmp	r4, #3
1a00065c:	d9f9      	bls.n	1a000652 <schedulerInit+0x6>
      schedulerDeleteTask(i);
   }
   /* Reset the global error variable
      - schedulerDelete_Task() will generate an error code,
        (because the task array is empty) */
   errorCode = 0;
1a00065e:	2200      	movs	r2, #0
1a000660:	4b01      	ldr	r3, [pc, #4]	; (1a000668 <schedulerInit+0x1c>)
1a000662:	701a      	strb	r2, [r3, #0]
1a000664:	bd10      	pop	{r4, pc}
1a000666:	bf00      	nop
1a000668:	1000006d 	.word	0x1000006d

1a00066c <schedulerStart>:
Starts the scheduler, by enabling timer interrupts.
NOTE: Usually called after all regular tasks are added,
to keep the tasks synchronized.
NOTE: ONLY THE SCHEDULER INTERRUPT SHOULD BE ENABLED!!!
-*------------------------------------------------------------------*/
void schedulerStart( tick_t tickRateMs ){
1a00066c:	b508      	push	{r3, lr}
      El tick hook es simplemente una función que se ejecutará períodicamente
      con cada interrupción de Tick, este nombre se refiere a una función
      "enganchada" a una interrupción */

   // Inicializar el conteo de Ticks con resolución de 1ms, con tickHook
   if( tickConfig( tickRateMs, schedulerUpdate ) ){
1a00066e:	4a02      	ldr	r2, [pc, #8]	; (1a000678 <schedulerStart+0xc>)
1a000670:	f000 fbf8 	bl	1a000e64 <tickConfig>
1a000674:	bd08      	pop	{r3, pc}
1a000676:	bf00      	nop
1a000678:	1a000611 	.word	0x1a000611

1a00067c <schedulerGoToSleep>:
to save power. The next clock tick will return the processor
to the normal operating state.
*** May wish to disable this if using a watchdog ***
*** ADAPT AS REQUIRED FOR YOUR HARDWARE ***
-*------------------------------------------------------------------*/
static void schedulerGoToSleep(){
1a00067c:	b508      	push	{r3, lr}
   // Se pone el sistema en bajo consumo hasta que ocurra la proxima
   // interrupcion, en este caso la de Tick.
   sleepUntilNextInterrupt();
1a00067e:	f000 fbef 	bl	1a000e60 <sleepUntilNextInterrupt>
1a000682:	bd08      	pop	{r3, pc}

1a000684 <schedulerAddTask>:
Task will be first executed at T = 300 ticks, then 1300, 2300, etc.
-*------------------------------------------------------------------*/
int32_t schedulerAddTask( sAPI_FuncPtr_t pFunction,
                          const int32_t DELAY,
                          const int32_t PERIOD
                        ){
1a000684:	b470      	push	{r4, r5, r6}

   int32_t index = 0;
1a000686:	2300      	movs	r3, #0

   // First find a gap in the array (if there is one)
   while( (schedulerTasks[index].pTask != 0) && (index < SCHEDULER_MAX_TASKS) ){
1a000688:	e000      	b.n	1a00068c <schedulerAddTask+0x8>
      index++;
1a00068a:	3301      	adds	r3, #1
                        ){

   int32_t index = 0;

   // First find a gap in the array (if there is one)
   while( (schedulerTasks[index].pTask != 0) && (index < SCHEDULER_MAX_TASKS) ){
1a00068c:	011c      	lsls	r4, r3, #4
1a00068e:	4d0b      	ldr	r5, [pc, #44]	; (1a0006bc <schedulerAddTask+0x38>)
1a000690:	592c      	ldr	r4, [r5, r4]
1a000692:	b10c      	cbz	r4, 1a000698 <schedulerAddTask+0x14>
1a000694:	2b03      	cmp	r3, #3
1a000696:	ddf8      	ble.n	1a00068a <schedulerAddTask+0x6>
      index++;
   }

   // Have we reached the end of the list?
   if( index == SCHEDULER_MAX_TASKS ){
1a000698:	2b04      	cmp	r3, #4
1a00069a:	d104      	bne.n	1a0006a6 <schedulerAddTask+0x22>
      // Task list is full
      // Set the global error variable
      errorCode = 2; // ERROR_schedulerTOO_MANYTasks;
1a00069c:	2202      	movs	r2, #2
1a00069e:	4b08      	ldr	r3, [pc, #32]	; (1a0006c0 <schedulerAddTask+0x3c>)
1a0006a0:	701a      	strb	r2, [r3, #0]
      // Also return an error code
      return SCHEDULER_MAX_TASKS;
1a0006a2:	2004      	movs	r0, #4
1a0006a4:	e008      	b.n	1a0006b8 <schedulerAddTask+0x34>
   }

   // If we're here, there is a space in the task array
   schedulerTasks[index].pTask  = pFunction;
1a0006a6:	4e05      	ldr	r6, [pc, #20]	; (1a0006bc <schedulerAddTask+0x38>)
1a0006a8:	011d      	lsls	r5, r3, #4
1a0006aa:	1974      	adds	r4, r6, r5
1a0006ac:	5170      	str	r0, [r6, r5]
   schedulerTasks[index].delay  = DELAY;
1a0006ae:	6061      	str	r1, [r4, #4]
   schedulerTasks[index].period = PERIOD;
1a0006b0:	60a2      	str	r2, [r4, #8]
   schedulerTasks[index].runMe  = 0;
1a0006b2:	2200      	movs	r2, #0
1a0006b4:	60e2      	str	r2, [r4, #12]

   return index; // return position of task (to allow later deletion)
1a0006b6:	4618      	mov	r0, r3
}
1a0006b8:	bc70      	pop	{r4, r5, r6}
1a0006ba:	4770      	bx	lr
1a0006bc:	100000f8 	.word	0x100000f8
1a0006c0:	1000006d 	.word	0x1000006d

1a0006c4 <schedulerDeleteTask>:

taskIndex - The task index. Provided by schedulerAddTask().

RETURN VALUE: RETURN_ERROR or RETURN_NORMAL
-*------------------------------------------------------------------*/
int8_t schedulerDeleteTask( int32_t taskIndex ){
1a0006c4:	b430      	push	{r4, r5}

   int8_t returnCode;

   if(schedulerTasks[taskIndex].pTask == 0){
1a0006c6:	0103      	lsls	r3, r0, #4
1a0006c8:	4a09      	ldr	r2, [pc, #36]	; (1a0006f0 <schedulerDeleteTask+0x2c>)
1a0006ca:	58d3      	ldr	r3, [r2, r3]
1a0006cc:	b923      	cbnz	r3, 1a0006d8 <schedulerDeleteTask+0x14>
      // No task at this location...
      // Set the global error variable
      errorCode = 2; // ERROR_SCH_CANNOT_DELETE_TASK;
1a0006ce:	2202      	movs	r2, #2
1a0006d0:	4b08      	ldr	r3, [pc, #32]	; (1a0006f4 <schedulerDeleteTask+0x30>)
1a0006d2:	701a      	strb	r2, [r3, #0]
      // ...also return an error code
      returnCode = -1; // RETURN_ERROR;
1a0006d4:	25ff      	movs	r5, #255	; 0xff
1a0006d6:	e000      	b.n	1a0006da <schedulerDeleteTask+0x16>
   }
   else{
      returnCode = 0; // RETURN_NORMAL;
1a0006d8:	2500      	movs	r5, #0
   }
   schedulerTasks[taskIndex].pTask = 0x0000;
1a0006da:	4c05      	ldr	r4, [pc, #20]	; (1a0006f0 <schedulerDeleteTask+0x2c>)
1a0006dc:	0103      	lsls	r3, r0, #4
1a0006de:	18e1      	adds	r1, r4, r3
1a0006e0:	2200      	movs	r2, #0
1a0006e2:	50e2      	str	r2, [r4, r3]
   schedulerTasks[taskIndex].delay = (int32_t)0;
1a0006e4:	604a      	str	r2, [r1, #4]
   schedulerTasks[taskIndex].period = (int32_t)0;
1a0006e6:	608a      	str	r2, [r1, #8]
   schedulerTasks[taskIndex].runMe = (int8_t)0;
1a0006e8:	60ca      	str	r2, [r1, #12]
   return returnCode; // return status
}
1a0006ea:	b268      	sxtb	r0, r5
1a0006ec:	bc30      	pop	{r4, r5}
1a0006ee:	4770      	bx	lr
1a0006f0:	100000f8 	.word	0x100000f8
1a0006f4:	1000006d 	.word	0x1000006d

1a0006f8 <schedulerDispatchTasks>:
schedulerDispatchTasks()
This is the 'dispatcher' function. When a task (function)
is due to run, schedulerDispatchTasks() will run it.
This function must be called (repeatedly) from the main loop.
-*------------------------------------------------------------------*/
void schedulerDispatchTasks( void ){
1a0006f8:	b538      	push	{r3, r4, r5, lr}

   int32_t index;
   // Dispatches (runs) the next task (if one is ready)
   for (index = 0; index < SCHEDULER_MAX_TASKS; index++){
1a0006fa:	2400      	movs	r4, #0
1a0006fc:	e014      	b.n	1a000728 <schedulerDispatchTasks+0x30>

      if (schedulerTasks[index].runMe > 0){
1a0006fe:	4b0d      	ldr	r3, [pc, #52]	; (1a000734 <schedulerDispatchTasks+0x3c>)
1a000700:	eb03 1304 	add.w	r3, r3, r4, lsl #4
1a000704:	68db      	ldr	r3, [r3, #12]
1a000706:	2b00      	cmp	r3, #0
1a000708:	dd0d      	ble.n	1a000726 <schedulerDispatchTasks+0x2e>

         (*schedulerTasks[index].pTask)(0); // Run the task
1a00070a:	4a0a      	ldr	r2, [pc, #40]	; (1a000734 <schedulerDispatchTasks+0x3c>)
1a00070c:	0123      	lsls	r3, r4, #4
1a00070e:	18d5      	adds	r5, r2, r3
1a000710:	58d3      	ldr	r3, [r2, r3]
1a000712:	2000      	movs	r0, #0
1a000714:	4798      	blx	r3
         schedulerTasks[index].runMe -= 1; // Reset/reduce runMe flag
1a000716:	68eb      	ldr	r3, [r5, #12]
1a000718:	3b01      	subs	r3, #1
1a00071a:	60eb      	str	r3, [r5, #12]

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if (schedulerTasks[index].period == 0){
1a00071c:	68ab      	ldr	r3, [r5, #8]
1a00071e:	b913      	cbnz	r3, 1a000726 <schedulerDispatchTasks+0x2e>
            schedulerDeleteTask(index);
1a000720:	4620      	mov	r0, r4
1a000722:	f7ff ffcf 	bl	1a0006c4 <schedulerDeleteTask>
-*------------------------------------------------------------------*/
void schedulerDispatchTasks( void ){

   int32_t index;
   // Dispatches (runs) the next task (if one is ready)
   for (index = 0; index < SCHEDULER_MAX_TASKS; index++){
1a000726:	3401      	adds	r4, #1
1a000728:	2c03      	cmp	r4, #3
1a00072a:	dde8      	ble.n	1a0006fe <schedulerDispatchTasks+0x6>
   }

   // Report system status
   schedulerReportStatus();
   // The scheduler enters idle mode at this point32_t
   schedulerGoToSleep();
1a00072c:	f7ff ffa6 	bl	1a00067c <schedulerGoToSleep>
1a000730:	bd38      	pop	{r3, r4, r5, pc}
1a000732:	bf00      	nop
1a000734:	100000f8 	.word	0x100000f8

1a000738 <schedulerReportStatus>:
After this the the error code is reset to 0.
This code may be easily adapted to display the last
error 'for ever': this may be appropriate in your
application.
-*------------------------------------------------------------------*/
void schedulerReportStatus( void ){
1a000738:	4770      	bx	lr
1a00073a:	bf00      	nop

1a00073c <fsm>:
/*==================[definiciones de funciones internas]=====================*/

/*==================[definiciones de funciones externas]=====================*/

void fsm(fsmState_t** state, const uint8_t currentEvent, const uint32_t arg) {
   if(state) {
1a00073c:	b178      	cbz	r0, 1a00075e <fsm+0x22>

/*==================[definiciones de funciones internas]=====================*/

/*==================[definiciones de funciones externas]=====================*/

void fsm(fsmState_t** state, const uint8_t currentEvent, const uint32_t arg) {
1a00073e:	b538      	push	{r3, r4, r5, lr}
1a000740:	4605      	mov	r5, r0
   if(state) {
	   fsmState_t* tmpState = *state;
1a000742:	6804      	ldr	r4, [r0, #0]

      while(tmpState->event && (currentEvent != tmpState->event))
1a000744:	e000      	b.n	1a000748 <fsm+0xc>
    	  tmpState++;
1a000746:	340c      	adds	r4, #12

void fsm(fsmState_t** state, const uint8_t currentEvent, const uint32_t arg) {
   if(state) {
	   fsmState_t* tmpState = *state;

      while(tmpState->event && (currentEvent != tmpState->event))
1a000748:	7823      	ldrb	r3, [r4, #0]
1a00074a:	b10b      	cbz	r3, 1a000750 <fsm+0x14>
1a00074c:	428b      	cmp	r3, r1
1a00074e:	d1fa      	bne.n	1a000746 <fsm+0xa>
    	  tmpState++;

      if(tmpState->event) {
1a000750:	b123      	cbz	r3, 1a00075c <fsm+0x20>
1a000752:	4610      	mov	r0, r2
    	  tmpState->actionCb(arg);
1a000754:	68a3      	ldr	r3, [r4, #8]
1a000756:	4798      	blx	r3
    	  *state = (fsmState_t*) tmpState->nextState;
1a000758:	6863      	ldr	r3, [r4, #4]
1a00075a:	602b      	str	r3, [r5, #0]
1a00075c:	bd38      	pop	{r3, r4, r5, pc}
1a00075e:	4770      	bx	lr

1a000760 <getBlinkyLed>:

/*==================[definiciones de datos externos]=========================*/

/*==================[definiciones de funciones internas]=====================*/

static ledBlinkControl_t* getBlinkyLed(const uint32_t ledId) {
1a000760:	b410      	push	{r4}
   uint8_t i;

   for(i = 0;i < LEDS_MAX;i++) {
1a000762:	2300      	movs	r3, #0
1a000764:	e00e      	b.n	1a000784 <getBlinkyLed+0x24>
      if(ledId == gLeds[i].id)
1a000766:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a00076a:	0092      	lsls	r2, r2, #2
1a00076c:	4908      	ldr	r1, [pc, #32]	; (1a000790 <getBlinkyLed+0x30>)
1a00076e:	588a      	ldr	r2, [r1, r2]
1a000770:	4282      	cmp	r2, r0
1a000772:	d105      	bne.n	1a000780 <getBlinkyLed+0x20>
         return &gLeds[i];
1a000774:	eb03 0483 	add.w	r4, r3, r3, lsl #2
1a000778:	00a4      	lsls	r4, r4, #2
1a00077a:	4608      	mov	r0, r1
1a00077c:	4420      	add	r0, r4
1a00077e:	e004      	b.n	1a00078a <getBlinkyLed+0x2a>
/*==================[definiciones de funciones internas]=====================*/

static ledBlinkControl_t* getBlinkyLed(const uint32_t ledId) {
   uint8_t i;

   for(i = 0;i < LEDS_MAX;i++) {
1a000780:	3301      	adds	r3, #1
1a000782:	b2db      	uxtb	r3, r3
1a000784:	2b05      	cmp	r3, #5
1a000786:	d9ee      	bls.n	1a000766 <getBlinkyLed+0x6>
      if(ledId == gLeds[i].id)
         return &gLeds[i];
   }

   return NULL;
1a000788:	2000      	movs	r0, #0
}
1a00078a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00078e:	4770      	bx	lr
1a000790:	10000070 	.word	0x10000070

1a000794 <eventGenerator>:

static bool_t eventGenerator(ledBlinkControl_t* ledBlinky, uint8_t* event) {
   if(ledBlinky && event) {
1a000794:	b140      	cbz	r0, 1a0007a8 <eventGenerator+0x14>
1a000796:	b149      	cbz	r1, 1a0007ac <eventGenerator+0x18>

      // Evaluar si transcurri� el periodo del led que parpadea
      if(ledBlinky->delay && (0 == --ledBlinky->delay)) {
1a000798:	68c3      	ldr	r3, [r0, #12]
1a00079a:	b14b      	cbz	r3, 1a0007b0 <eventGenerator+0x1c>
1a00079c:	3b01      	subs	r3, #1
1a00079e:	60c3      	str	r3, [r0, #12]
1a0007a0:	b943      	cbnz	r3, 1a0007b4 <eventGenerator+0x20>
         *event = LED_BLINK_PERIOD_TIMEOUT;
1a0007a2:	2001      	movs	r0, #1
1a0007a4:	7008      	strb	r0, [r1, #0]

         return TRUE;
1a0007a6:	4770      	bx	lr
      }
   }

   return FALSE;
1a0007a8:	2000      	movs	r0, #0
1a0007aa:	4770      	bx	lr
1a0007ac:	2000      	movs	r0, #0
1a0007ae:	4770      	bx	lr
1a0007b0:	2000      	movs	r0, #0
1a0007b2:	4770      	bx	lr
1a0007b4:	2000      	movs	r0, #0
}
1a0007b6:	4770      	bx	lr

1a0007b8 <setBlinkPeriodDelay>:

static void setBlinkPeriodDelay(ledBlinkControl_t* ledBlinky) {

   if(ledBlinky) {
1a0007b8:	b128      	cbz	r0, 1a0007c6 <setBlinkPeriodDelay+0xe>

      // Configurar delay
      ledBlinky->delay = ledBlinky->periodMs/BLINK_LED_TASK_TIME_PERIOD;
1a0007ba:	6843      	ldr	r3, [r0, #4]
1a0007bc:	4902      	ldr	r1, [pc, #8]	; (1a0007c8 <setBlinkPeriodDelay+0x10>)
1a0007be:	fba1 1303 	umull	r1, r3, r1, r3
1a0007c2:	08db      	lsrs	r3, r3, #3
1a0007c4:	60c3      	str	r3, [r0, #12]
1a0007c6:	4770      	bx	lr
1a0007c8:	cccccccd 	.word	0xcccccccd

1a0007cc <setLedOffAndBlinkPeriodDelay>:

      setBlinkPeriodDelay(ledBlinky);
   }
}

static void setLedOffAndBlinkPeriodDelay(const uint32_t ledId) {
1a0007cc:	b510      	push	{r4, lr}

   ledBlinkControl_t* ledBlinky = getBlinkyLed(ledId);
1a0007ce:	f7ff ffc7 	bl	1a000760 <getBlinkyLed>

   if(ledBlinky) {
1a0007d2:	b138      	cbz	r0, 1a0007e4 <setLedOffAndBlinkPeriodDelay+0x18>
1a0007d4:	4604      	mov	r4, r0

      // Apagar led
      gpioWrite(ledBlinky->id, LED_TURN_OFF);
1a0007d6:	7800      	ldrb	r0, [r0, #0]
1a0007d8:	2100      	movs	r1, #0
1a0007da:	f000 fadd 	bl	1a000d98 <gpioWrite>

      setBlinkPeriodDelay(ledBlinky);
1a0007de:	4620      	mov	r0, r4
1a0007e0:	f7ff ffea 	bl	1a0007b8 <setBlinkPeriodDelay>
1a0007e4:	bd10      	pop	{r4, pc}
1a0007e6:	bf00      	nop

1a0007e8 <setLedOnAndBlinkPeriodDelay>:
   }
}

/* Funciones de acci�n de la m�quina de estados finita */

static void setLedOnAndBlinkPeriodDelay(const uint32_t ledId) {
1a0007e8:	b510      	push	{r4, lr}

   ledBlinkControl_t* ledBlinky = getBlinkyLed(ledId);
1a0007ea:	f7ff ffb9 	bl	1a000760 <getBlinkyLed>

   if(ledBlinky) {
1a0007ee:	b138      	cbz	r0, 1a000800 <setLedOnAndBlinkPeriodDelay+0x18>
1a0007f0:	4604      	mov	r4, r0

      // Encender led
      gpioWrite(ledBlinky->id, LED_TURN_ON);
1a0007f2:	7800      	ldrb	r0, [r0, #0]
1a0007f4:	2101      	movs	r1, #1
1a0007f6:	f000 facf 	bl	1a000d98 <gpioWrite>

      setBlinkPeriodDelay(ledBlinky);
1a0007fa:	4620      	mov	r0, r4
1a0007fc:	f7ff ffdc 	bl	1a0007b8 <setBlinkPeriodDelay>
1a000800:	bd10      	pop	{r4, pc}
1a000802:	bf00      	nop

1a000804 <ledsInit>:
   }
}

/*==================[definiciones de funciones externas]=====================*/

void ledsInit(void) {
1a000804:	b410      	push	{r4}
   uint8_t i;

   // Inicializar y configurar el arreglo de control de los leds
   for(i = 0;i < LEDS_MAX;i++) {
1a000806:	2300      	movs	r3, #0
1a000808:	e00d      	b.n	1a000826 <ledsInit+0x22>

     // Asignar como id del led el gpio correpondiente
     gLeds[i].id = ledsGpioBoardMap[i];
1a00080a:	4a0b      	ldr	r2, [pc, #44]	; (1a000838 <ledsInit+0x34>)
1a00080c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
1a000810:	480a      	ldr	r0, [pc, #40]	; (1a00083c <ledsInit+0x38>)
1a000812:	009a      	lsls	r2, r3, #2
1a000814:	18d1      	adds	r1, r2, r3
1a000816:	0089      	lsls	r1, r1, #2
1a000818:	5044      	str	r4, [r0, r1]

     // Deshabilitar el parpadeo del led
     gLeds[i].isBlinking = FALSE;
1a00081a:	460a      	mov	r2, r1
1a00081c:	4402      	add	r2, r0
1a00081e:	2100      	movs	r1, #0
1a000820:	7211      	strb	r1, [r2, #8]

void ledsInit(void) {
   uint8_t i;

   // Inicializar y configurar el arreglo de control de los leds
   for(i = 0;i < LEDS_MAX;i++) {
1a000822:	3301      	adds	r3, #1
1a000824:	b2db      	uxtb	r3, r3
1a000826:	2b05      	cmp	r3, #5
1a000828:	d9ef      	bls.n	1a00080a <ledsInit+0x6>

     // Deshabilitar el parpadeo del led
     gLeds[i].isBlinking = FALSE;
   }

   gInitFlag = TRUE;
1a00082a:	2201      	movs	r2, #1
1a00082c:	4b03      	ldr	r3, [pc, #12]	; (1a00083c <ledsInit+0x38>)
1a00082e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
1a000832:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000836:	4770      	bx	lr
1a000838:	1a002eec 	.word	0x1a002eec
1a00083c:	10000070 	.word	0x10000070

1a000840 <ledsStartBlinking>:

void ledsStartBlinking(const uint32_t ledId) {
1a000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if(gInitFlag) {
1a000842:	4b18      	ldr	r3, [pc, #96]	; (1a0008a4 <ledsStartBlinking+0x64>)
1a000844:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
1a000848:	b35b      	cbz	r3, 1a0008a2 <ledsStartBlinking+0x62>
      ledBlinkControl_t* ledBlinky = getBlinkyLed(ledId);
1a00084a:	f7ff ff89 	bl	1a000760 <getBlinkyLed>

      if(ledBlinky) {
1a00084e:	4605      	mov	r5, r0
1a000850:	b9c8      	cbnz	r0, 1a000886 <ledsStartBlinking+0x46>
1a000852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         uint8_t i;

         // Detener el led que esta parpadeando actualmente
         for(i = 0;i < LEDS_MAX;i++) {
            if(gLeds[i].isBlinking) {
1a000854:	461c      	mov	r4, r3
1a000856:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a00085a:	0092      	lsls	r2, r2, #2
1a00085c:	4911      	ldr	r1, [pc, #68]	; (1a0008a4 <ledsStartBlinking+0x64>)
1a00085e:	440a      	add	r2, r1
1a000860:	7a12      	ldrb	r2, [r2, #8]
1a000862:	b16a      	cbz	r2, 1a000880 <ledsStartBlinking+0x40>
               // Apagar led
               gpioWrite(gLeds[i].id, LED_TURN_OFF);
1a000864:	460e      	mov	r6, r1
1a000866:	009f      	lsls	r7, r3, #2
1a000868:	18fb      	adds	r3, r7, r3
1a00086a:	009b      	lsls	r3, r3, #2
1a00086c:	5cc8      	ldrb	r0, [r1, r3]
1a00086e:	2100      	movs	r1, #0
1a000870:	f000 fa92 	bl	1a000d98 <gpioWrite>

               // Deshabilitar el parpadeo del led
               gLeds[i].isBlinking = FALSE;
1a000874:	443c      	add	r4, r7
1a000876:	00a4      	lsls	r4, r4, #2
1a000878:	4434      	add	r4, r6
1a00087a:	2300      	movs	r3, #0
1a00087c:	7223      	strb	r3, [r4, #8]

               break;
1a00087e:	e005      	b.n	1a00088c <ledsStartBlinking+0x4c>

      if(ledBlinky) {
         uint8_t i;

         // Detener el led que esta parpadeando actualmente
         for(i = 0;i < LEDS_MAX;i++) {
1a000880:	3301      	adds	r3, #1
1a000882:	b2db      	uxtb	r3, r3
1a000884:	e000      	b.n	1a000888 <ledsStartBlinking+0x48>
1a000886:	2300      	movs	r3, #0
1a000888:	2b05      	cmp	r3, #5
1a00088a:	d9e3      	bls.n	1a000854 <ledsStartBlinking+0x14>
               break;
            }
         }

         // Asignar un estado a la m�quina de estados finita
         ledBlinky->state = (fsmState_t* ) ledBlinkOnWaitPeriodTimeout;
1a00088c:	4b06      	ldr	r3, [pc, #24]	; (1a0008a8 <ledsStartBlinking+0x68>)
1a00088e:	612b      	str	r3, [r5, #16]

         // Encender led
         gpioWrite(ledBlinky->id, LED_TURN_ON);
1a000890:	7828      	ldrb	r0, [r5, #0]
1a000892:	2101      	movs	r1, #1
1a000894:	f000 fa80 	bl	1a000d98 <gpioWrite>

         // Habilitar el parpadeo del led
         ledBlinky->isBlinking = TRUE;
1a000898:	2301      	movs	r3, #1
1a00089a:	722b      	strb	r3, [r5, #8]

         // Configurar el periodo de parpadeo del led
         setBlinkPeriodDelay(ledBlinky);
1a00089c:	4628      	mov	r0, r5
1a00089e:	f7ff ff8b 	bl	1a0007b8 <setBlinkPeriodDelay>
1a0008a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0008a4:	10000070 	.word	0x10000070
1a0008a8:	1a002f04 	.word	0x1a002f04

1a0008ac <ledsSetBlinkPeriod>:
      }
   }
}

void ledsSetBlinkPeriod(const uint32_t ledId, const uint32_t periodMs) {
   if(gInitFlag) {
1a0008ac:	4b05      	ldr	r3, [pc, #20]	; (1a0008c4 <ledsSetBlinkPeriod+0x18>)
1a0008ae:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
1a0008b2:	b133      	cbz	r3, 1a0008c2 <ledsSetBlinkPeriod+0x16>
         setBlinkPeriodDelay(ledBlinky);
      }
   }
}

void ledsSetBlinkPeriod(const uint32_t ledId, const uint32_t periodMs) {
1a0008b4:	b510      	push	{r4, lr}
1a0008b6:	460c      	mov	r4, r1
   if(gInitFlag) {
      ledBlinkControl_t* ledBlinky = getBlinkyLed(ledId);
1a0008b8:	f7ff ff52 	bl	1a000760 <getBlinkyLed>

      if(ledBlinky) {
1a0008bc:	b100      	cbz	r0, 1a0008c0 <ledsSetBlinkPeriod+0x14>

         // Asignar el periodo de parpadeo del led
         ledBlinky->periodMs = periodMs;
1a0008be:	6044      	str	r4, [r0, #4]
1a0008c0:	bd10      	pop	{r4, pc}
1a0008c2:	4770      	bx	lr
1a0008c4:	10000070 	.word	0x10000070

1a0008c8 <ledsTurnOn>:
      }
   }
}

void ledsTurnOn(const uint32_t ledId) {
1a0008c8:	b508      	push	{r3, lr}
   if(gInitFlag) {
1a0008ca:	4b06      	ldr	r3, [pc, #24]	; (1a0008e4 <ledsTurnOn+0x1c>)
1a0008cc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
1a0008d0:	b133      	cbz	r3, 1a0008e0 <ledsTurnOn+0x18>
      ledBlinkControl_t* ledBlinky = getBlinkyLed(ledId);
1a0008d2:	f7ff ff45 	bl	1a000760 <getBlinkyLed>

      if(ledBlinky) {
1a0008d6:	b118      	cbz	r0, 1a0008e0 <ledsTurnOn+0x18>

         // Encender el led
         gpioWrite(ledBlinky->id, LED_TURN_ON);
1a0008d8:	7800      	ldrb	r0, [r0, #0]
1a0008da:	2101      	movs	r1, #1
1a0008dc:	f000 fa5c 	bl	1a000d98 <gpioWrite>
1a0008e0:	bd08      	pop	{r3, pc}
1a0008e2:	bf00      	nop
1a0008e4:	10000070 	.word	0x10000070

1a0008e8 <ledsTurnOff>:
      }
   }
}

void ledsTurnOff(const uint32_t ledId) {
1a0008e8:	b508      	push	{r3, lr}
   if(gInitFlag) {
1a0008ea:	4b06      	ldr	r3, [pc, #24]	; (1a000904 <ledsTurnOff+0x1c>)
1a0008ec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
1a0008f0:	b133      	cbz	r3, 1a000900 <ledsTurnOff+0x18>
      ledBlinkControl_t* ledBlinky = getBlinkyLed(ledId);
1a0008f2:	f7ff ff35 	bl	1a000760 <getBlinkyLed>

      if(ledBlinky) {
1a0008f6:	b118      	cbz	r0, 1a000900 <ledsTurnOff+0x18>

         // Apagar el led
         gpioWrite(ledBlinky->id, LED_TURN_OFF);
1a0008f8:	7800      	ldrb	r0, [r0, #0]
1a0008fa:	2100      	movs	r1, #0
1a0008fc:	f000 fa4c 	bl	1a000d98 <gpioWrite>
1a000900:	bd08      	pop	{r3, pc}
1a000902:	bf00      	nop
1a000904:	10000070 	.word	0x10000070

1a000908 <blinkLedTask>:
      }
   }
}

void blinkLedTask(void) {
   if(gInitFlag) {
1a000908:	4b16      	ldr	r3, [pc, #88]	; (1a000964 <blinkLedTask+0x5c>)
1a00090a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
1a00090e:	bb13      	cbnz	r3, 1a000956 <blinkLedTask+0x4e>
1a000910:	4770      	bx	lr
      uint8_t i, event;

      // Actualizar el estado de la m�quina de estados finita de cada led
      for(i = 0;i < LEDS_MAX;i++) {
         // Evaluar si el led actual est� parpadeando
         if(gLeds[i].isBlinking) {
1a000912:	461c      	mov	r4, r3
1a000914:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a000918:	0092      	lsls	r2, r2, #2
1a00091a:	4912      	ldr	r1, [pc, #72]	; (1a000964 <blinkLedTask+0x5c>)
1a00091c:	440a      	add	r2, r1
1a00091e:	7a12      	ldrb	r2, [r2, #8]
1a000920:	b1b2      	cbz	r2, 1a000950 <blinkLedTask+0x48>
            // Obtener el evento actual
            if(eventGenerator(&gLeds[i], &event))
1a000922:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000926:	009b      	lsls	r3, r3, #2
1a000928:	4608      	mov	r0, r1
1a00092a:	4418      	add	r0, r3
1a00092c:	f10d 0107 	add.w	r1, sp, #7
1a000930:	f7ff ff30 	bl	1a000794 <eventGenerator>
1a000934:	b1a0      	cbz	r0, 1a000960 <blinkLedTask+0x58>
               fsm(&gLeds[i].state, event, gLeds[i].id);
1a000936:	4a0b      	ldr	r2, [pc, #44]	; (1a000964 <blinkLedTask+0x5c>)
1a000938:	00a1      	lsls	r1, r4, #2
1a00093a:	190b      	adds	r3, r1, r4
1a00093c:	009b      	lsls	r3, r3, #2
1a00093e:	f103 0010 	add.w	r0, r3, #16
1a000942:	4410      	add	r0, r2
1a000944:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000948:	58d2      	ldr	r2, [r2, r3]
1a00094a:	f7ff fef7 	bl	1a00073c <fsm>
1a00094e:	e007      	b.n	1a000960 <blinkLedTask+0x58>
void blinkLedTask(void) {
   if(gInitFlag) {
      uint8_t i, event;

      // Actualizar el estado de la m�quina de estados finita de cada led
      for(i = 0;i < LEDS_MAX;i++) {
1a000950:	3301      	adds	r3, #1
1a000952:	b2db      	uxtb	r3, r3
1a000954:	e002      	b.n	1a00095c <blinkLedTask+0x54>
         gpioWrite(ledBlinky->id, LED_TURN_OFF);
      }
   }
}

void blinkLedTask(void) {
1a000956:	b510      	push	{r4, lr}
1a000958:	b082      	sub	sp, #8
1a00095a:	2300      	movs	r3, #0
   if(gInitFlag) {
      uint8_t i, event;

      // Actualizar el estado de la m�quina de estados finita de cada led
      for(i = 0;i < LEDS_MAX;i++) {
1a00095c:	2b05      	cmp	r3, #5
1a00095e:	d9d8      	bls.n	1a000912 <blinkLedTask+0xa>
            // Solamente un led parpadea por vez
            break;
         }
      }
   }
}
1a000960:	b002      	add	sp, #8
1a000962:	bd10      	pop	{r4, pc}
1a000964:	10000070 	.word	0x10000070

1a000968 <main>:
/*==================[declaraciones de funciones externas]====================*/

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void ){
1a000968:	b508      	push	{r3, lr}

   // Inicializar los m�dulos que conforman el programa
	if(appInit()) {
1a00096a:	f7ff fd2f 	bl	1a0003cc <appInit>
1a00096e:	b108      	cbz	r0, 1a000974 <main+0xc>
		// Correr el superloop del programa
		appRun();
1a000970:	f7ff fd80 	bl	1a000474 <appRun>

   // NO DEBE LLEGAR NUNCA AQUI, debido a que a este programa se ejecuta
   // directamenteno sobre un microcontroladore y no es llamado por ningun
   // Sistema Operativo, como en el caso de un programa para PC.
   return 0;
}
1a000974:	2000      	movs	r0, #0
1a000976:	bd08      	pop	{r3, pc}

1a000978 <boardConfig>:
1a000978:	b508      	push	{r3, lr}
1a00097a:	f000 fee1 	bl	1a001740 <SystemCoreClockUpdate>
1a00097e:	f000 fdc5 	bl	1a00150c <Board_Init>
1a000982:	2001      	movs	r0, #1
1a000984:	2100      	movs	r1, #0
1a000986:	2200      	movs	r2, #0
1a000988:	f000 fa6c 	bl	1a000e64 <tickConfig>
1a00098c:	2000      	movs	r0, #0
1a00098e:	2105      	movs	r1, #5
1a000990:	f000 f934 	bl	1a000bfc <gpioConfig>
1a000994:	2024      	movs	r0, #36	; 0x24
1a000996:	2100      	movs	r1, #0
1a000998:	f000 f930 	bl	1a000bfc <gpioConfig>
1a00099c:	2025      	movs	r0, #37	; 0x25
1a00099e:	2100      	movs	r1, #0
1a0009a0:	f000 f92c 	bl	1a000bfc <gpioConfig>
1a0009a4:	2026      	movs	r0, #38	; 0x26
1a0009a6:	2100      	movs	r1, #0
1a0009a8:	f000 f928 	bl	1a000bfc <gpioConfig>
1a0009ac:	2027      	movs	r0, #39	; 0x27
1a0009ae:	2100      	movs	r1, #0
1a0009b0:	f000 f924 	bl	1a000bfc <gpioConfig>
1a0009b4:	2028      	movs	r0, #40	; 0x28
1a0009b6:	2101      	movs	r1, #1
1a0009b8:	f000 f920 	bl	1a000bfc <gpioConfig>
1a0009bc:	2029      	movs	r0, #41	; 0x29
1a0009be:	2101      	movs	r1, #1
1a0009c0:	f000 f91c 	bl	1a000bfc <gpioConfig>
1a0009c4:	202a      	movs	r0, #42	; 0x2a
1a0009c6:	2101      	movs	r1, #1
1a0009c8:	f000 f918 	bl	1a000bfc <gpioConfig>
1a0009cc:	202b      	movs	r0, #43	; 0x2b
1a0009ce:	2101      	movs	r1, #1
1a0009d0:	f000 f914 	bl	1a000bfc <gpioConfig>
1a0009d4:	202c      	movs	r0, #44	; 0x2c
1a0009d6:	2101      	movs	r1, #1
1a0009d8:	f000 f910 	bl	1a000bfc <gpioConfig>
1a0009dc:	202d      	movs	r0, #45	; 0x2d
1a0009de:	2101      	movs	r1, #1
1a0009e0:	f000 f90c 	bl	1a000bfc <gpioConfig>
1a0009e4:	202e      	movs	r0, #46	; 0x2e
1a0009e6:	2100      	movs	r1, #0
1a0009e8:	f000 f908 	bl	1a000bfc <gpioConfig>
1a0009ec:	202f      	movs	r0, #47	; 0x2f
1a0009ee:	2100      	movs	r1, #0
1a0009f0:	f000 f904 	bl	1a000bfc <gpioConfig>
1a0009f4:	2030      	movs	r0, #48	; 0x30
1a0009f6:	2100      	movs	r1, #0
1a0009f8:	f000 f900 	bl	1a000bfc <gpioConfig>
1a0009fc:	2031      	movs	r0, #49	; 0x31
1a0009fe:	2100      	movs	r1, #0
1a000a00:	f000 f8fc 	bl	1a000bfc <gpioConfig>
1a000a04:	2032      	movs	r0, #50	; 0x32
1a000a06:	2100      	movs	r1, #0
1a000a08:	f000 f8f8 	bl	1a000bfc <gpioConfig>
1a000a0c:	2033      	movs	r0, #51	; 0x33
1a000a0e:	2100      	movs	r1, #0
1a000a10:	f000 f8f4 	bl	1a000bfc <gpioConfig>
1a000a14:	2034      	movs	r0, #52	; 0x34
1a000a16:	2100      	movs	r1, #0
1a000a18:	f000 f8f0 	bl	1a000bfc <gpioConfig>
1a000a1c:	2035      	movs	r0, #53	; 0x35
1a000a1e:	2100      	movs	r1, #0
1a000a20:	f000 f8ec 	bl	1a000bfc <gpioConfig>
1a000a24:	2036      	movs	r0, #54	; 0x36
1a000a26:	2101      	movs	r1, #1
1a000a28:	f000 f8e8 	bl	1a000bfc <gpioConfig>
1a000a2c:	2037      	movs	r0, #55	; 0x37
1a000a2e:	2101      	movs	r1, #1
1a000a30:	f000 f8e4 	bl	1a000bfc <gpioConfig>
1a000a34:	2038      	movs	r0, #56	; 0x38
1a000a36:	2101      	movs	r1, #1
1a000a38:	f000 f8e0 	bl	1a000bfc <gpioConfig>
1a000a3c:	2039      	movs	r0, #57	; 0x39
1a000a3e:	2101      	movs	r1, #1
1a000a40:	f000 f8dc 	bl	1a000bfc <gpioConfig>
1a000a44:	203a      	movs	r0, #58	; 0x3a
1a000a46:	2101      	movs	r1, #1
1a000a48:	f000 f8d8 	bl	1a000bfc <gpioConfig>
1a000a4c:	203b      	movs	r0, #59	; 0x3b
1a000a4e:	2101      	movs	r1, #1
1a000a50:	f000 f8d4 	bl	1a000bfc <gpioConfig>
1a000a54:	203c      	movs	r0, #60	; 0x3c
1a000a56:	2101      	movs	r1, #1
1a000a58:	f000 f8d0 	bl	1a000bfc <gpioConfig>
1a000a5c:	203d      	movs	r0, #61	; 0x3d
1a000a5e:	2101      	movs	r1, #1
1a000a60:	f000 f8cc 	bl	1a000bfc <gpioConfig>
1a000a64:	bd08      	pop	{r3, pc}
1a000a66:	bf00      	nop

1a000a68 <sAPI_NullFuncPtr>:
1a000a68:	2001      	movs	r0, #1
1a000a6a:	4770      	bx	lr

1a000a6c <delayInaccurate>:
1a000a6c:	b430      	push	{r4, r5}
1a000a6e:	b084      	sub	sp, #16
1a000a70:	0109      	lsls	r1, r1, #4
1a000a72:	0104      	lsls	r4, r0, #4
1a000a74:	ea41 7510 	orr.w	r5, r1, r0, lsr #28
1a000a78:	00ab      	lsls	r3, r5, #2
1a000a7a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
1a000a7e:	00a2      	lsls	r2, r4, #2
1a000a80:	1912      	adds	r2, r2, r4
1a000a82:	416b      	adcs	r3, r5
1a000a84:	0219      	lsls	r1, r3, #8
1a000a86:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
1a000a8a:	0210      	lsls	r0, r2, #8
1a000a8c:	1a82      	subs	r2, r0, r2
1a000a8e:	eb61 0303 	sbc.w	r3, r1, r3
1a000a92:	e9cd 2300 	strd	r2, r3, [sp]
1a000a96:	e9dd 2300 	ldrd	r2, r3, [sp]
1a000a9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000a9e:	e007      	b.n	1a000ab0 <delayInaccurate+0x44>
1a000aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000aa4:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
1a000aa8:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
1a000aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000ab4:	4313      	orrs	r3, r2
1a000ab6:	d1f3      	bne.n	1a000aa0 <delayInaccurate+0x34>
1a000ab8:	b004      	add	sp, #16
1a000aba:	bc30      	pop	{r4, r5}
1a000abc:	4770      	bx	lr
1a000abe:	bf00      	nop

1a000ac0 <delayInaccurateUs>:
1a000ac0:	b500      	push	{lr}
1a000ac2:	b085      	sub	sp, #20
1a000ac4:	1802      	adds	r2, r0, r0
1a000ac6:	eb41 0301 	adc.w	r3, r1, r1
1a000aca:	1880      	adds	r0, r0, r2
1a000acc:	4159      	adcs	r1, r3
1a000ace:	010b      	lsls	r3, r1, #4
1a000ad0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a000ad4:	0102      	lsls	r2, r0, #4
1a000ad6:	1880      	adds	r0, r0, r2
1a000ad8:	4159      	adcs	r1, r3
1a000ada:	008b      	lsls	r3, r1, #2
1a000adc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a000ae0:	0082      	lsls	r2, r0, #2
1a000ae2:	4610      	mov	r0, r2
1a000ae4:	4619      	mov	r1, r3
1a000ae6:	220a      	movs	r2, #10
1a000ae8:	2300      	movs	r3, #0
1a000aea:	f001 fec7 	bl	1a00287c <__aeabi_uldivmod>
1a000aee:	e9cd 0100 	strd	r0, r1, [sp]
1a000af2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a000af6:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000afa:	e007      	b.n	1a000b0c <delayInaccurateUs+0x4c>
1a000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000b00:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
1a000b04:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
1a000b08:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000b10:	4313      	orrs	r3, r2
1a000b12:	d1f3      	bne.n	1a000afc <delayInaccurateUs+0x3c>
1a000b14:	b005      	add	sp, #20
1a000b16:	f85d fb04 	ldr.w	pc, [sp], #4
1a000b1a:	bf00      	nop

1a000b1c <delay>:
1a000b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000b20:	4680      	mov	r8, r0
1a000b22:	4689      	mov	r9, r1
1a000b24:	f000 f9da 	bl	1a000edc <tickRead>
1a000b28:	4606      	mov	r6, r0
1a000b2a:	460f      	mov	r7, r1
1a000b2c:	f000 f9d6 	bl	1a000edc <tickRead>
1a000b30:	1b84      	subs	r4, r0, r6
1a000b32:	eb61 0507 	sbc.w	r5, r1, r7
1a000b36:	4640      	mov	r0, r8
1a000b38:	4649      	mov	r1, r9
1a000b3a:	4b05      	ldr	r3, [pc, #20]	; (1a000b50 <delay+0x34>)
1a000b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000b40:	f001 fe9c 	bl	1a00287c <__aeabi_uldivmod>
1a000b44:	428d      	cmp	r5, r1
1a000b46:	bf08      	it	eq
1a000b48:	4284      	cmpeq	r4, r0
1a000b4a:	d3ef      	bcc.n	1a000b2c <delay+0x10>
1a000b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000b50:	10000140 	.word	0x10000140

1a000b54 <delayConfig>:
1a000b54:	b510      	push	{r4, lr}
1a000b56:	4604      	mov	r4, r0
1a000b58:	4610      	mov	r0, r2
1a000b5a:	4619      	mov	r1, r3
1a000b5c:	4b04      	ldr	r3, [pc, #16]	; (1a000b70 <delayConfig+0x1c>)
1a000b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000b62:	f001 fe8b 	bl	1a00287c <__aeabi_uldivmod>
1a000b66:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a000b6a:	2300      	movs	r3, #0
1a000b6c:	7423      	strb	r3, [r4, #16]
1a000b6e:	bd10      	pop	{r4, pc}
1a000b70:	10000140 	.word	0x10000140

1a000b74 <delayRead>:
1a000b74:	b510      	push	{r4, lr}
1a000b76:	4604      	mov	r4, r0
1a000b78:	7c03      	ldrb	r3, [r0, #16]
1a000b7a:	b93b      	cbnz	r3, 1a000b8c <delayRead+0x18>
1a000b7c:	f000 f9ae 	bl	1a000edc <tickRead>
1a000b80:	e9c4 0100 	strd	r0, r1, [r4]
1a000b84:	2301      	movs	r3, #1
1a000b86:	7423      	strb	r3, [r4, #16]
1a000b88:	2000      	movs	r0, #0
1a000b8a:	bd10      	pop	{r4, pc}
1a000b8c:	f000 f9a6 	bl	1a000edc <tickRead>
1a000b90:	e9d4 2300 	ldrd	r2, r3, [r4]
1a000b94:	1a80      	subs	r0, r0, r2
1a000b96:	eb61 0103 	sbc.w	r1, r1, r3
1a000b9a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a000b9e:	4299      	cmp	r1, r3
1a000ba0:	bf08      	it	eq
1a000ba2:	4290      	cmpeq	r0, r2
1a000ba4:	d303      	bcc.n	1a000bae <delayRead+0x3a>
1a000ba6:	2300      	movs	r3, #0
1a000ba8:	7423      	strb	r3, [r4, #16]
1a000baa:	2001      	movs	r0, #1
1a000bac:	bd10      	pop	{r4, pc}
1a000bae:	2000      	movs	r0, #0
1a000bb0:	bd10      	pop	{r4, pc}
1a000bb2:	bf00      	nop

1a000bb4 <delayWrite>:
1a000bb4:	b510      	push	{r4, lr}
1a000bb6:	4604      	mov	r4, r0
1a000bb8:	4610      	mov	r0, r2
1a000bba:	4619      	mov	r1, r3
1a000bbc:	4b03      	ldr	r3, [pc, #12]	; (1a000bcc <delayWrite+0x18>)
1a000bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000bc2:	f001 fe5b 	bl	1a00287c <__aeabi_uldivmod>
1a000bc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a000bca:	bd10      	pop	{r4, pc}
1a000bcc:	10000140 	.word	0x10000140

1a000bd0 <gpioObtainPinConfig>:
1a000bd0:	b430      	push	{r4, r5}
1a000bd2:	4d09      	ldr	r5, [pc, #36]	; (1a000bf8 <gpioObtainPinConfig+0x28>)
1a000bd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000bd8:	182c      	adds	r4, r5, r0
1a000bda:	5c28      	ldrb	r0, [r5, r0]
1a000bdc:	7008      	strb	r0, [r1, #0]
1a000bde:	7861      	ldrb	r1, [r4, #1]
1a000be0:	7011      	strb	r1, [r2, #0]
1a000be2:	78a2      	ldrb	r2, [r4, #2]
1a000be4:	701a      	strb	r2, [r3, #0]
1a000be6:	78e2      	ldrb	r2, [r4, #3]
1a000be8:	9b02      	ldr	r3, [sp, #8]
1a000bea:	701a      	strb	r2, [r3, #0]
1a000bec:	7922      	ldrb	r2, [r4, #4]
1a000bee:	9b03      	ldr	r3, [sp, #12]
1a000bf0:	701a      	strb	r2, [r3, #0]
1a000bf2:	bc30      	pop	{r4, r5}
1a000bf4:	4770      	bx	lr
1a000bf6:	bf00      	nop
1a000bf8:	1a002f34 	.word	0x1a002f34

1a000bfc <gpioConfig>:
1a000bfc:	b570      	push	{r4, r5, r6, lr}
1a000bfe:	b084      	sub	sp, #16
1a000c00:	460c      	mov	r4, r1
1a000c02:	2300      	movs	r3, #0
1a000c04:	f88d 300f 	strb.w	r3, [sp, #15]
1a000c08:	f88d 300e 	strb.w	r3, [sp, #14]
1a000c0c:	f88d 300d 	strb.w	r3, [sp, #13]
1a000c10:	f88d 300c 	strb.w	r3, [sp, #12]
1a000c14:	f88d 300b 	strb.w	r3, [sp, #11]
1a000c18:	ab03      	add	r3, sp, #12
1a000c1a:	9300      	str	r3, [sp, #0]
1a000c1c:	f10d 030b 	add.w	r3, sp, #11
1a000c20:	9301      	str	r3, [sp, #4]
1a000c22:	f10d 010f 	add.w	r1, sp, #15
1a000c26:	f10d 020e 	add.w	r2, sp, #14
1a000c2a:	f10d 030d 	add.w	r3, sp, #13
1a000c2e:	f7ff ffcf 	bl	1a000bd0 <gpioObtainPinConfig>
1a000c32:	2c05      	cmp	r4, #5
1a000c34:	f200 80a8 	bhi.w	1a000d88 <gpioConfig+0x18c>
1a000c38:	e8df f004 	tbb	[pc, r4]
1a000c3c:	46278408 	.word	0x46278408
1a000c40:	0365      	.short	0x0365
1a000c42:	4853      	ldr	r0, [pc, #332]	; (1a000d90 <gpioConfig+0x194>)
1a000c44:	f001 fa26 	bl	1a002094 <Chip_GPIO_Init>
1a000c48:	2001      	movs	r0, #1
1a000c4a:	e09e      	b.n	1a000d8a <gpioConfig+0x18e>
1a000c4c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000c50:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000c54:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000c58:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000c5c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000c60:	494c      	ldr	r1, [pc, #304]	; (1a000d94 <gpioConfig+0x198>)
1a000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000c66:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000c6a:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000c6e:	2001      	movs	r0, #1
1a000c70:	fa00 f402 	lsl.w	r4, r0, r2
1a000c74:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000c7c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000c80:	ea22 0204 	bic.w	r2, r2, r4
1a000c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000c88:	e07f      	b.n	1a000d8a <gpioConfig+0x18e>
1a000c8a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000c8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000c92:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000c96:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a000c9a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000c9e:	493d      	ldr	r1, [pc, #244]	; (1a000d94 <gpioConfig+0x198>)
1a000ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000ca4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000ca8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000cac:	2001      	movs	r0, #1
1a000cae:	fa00 f402 	lsl.w	r4, r0, r2
1a000cb2:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000cba:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000cbe:	ea22 0204 	bic.w	r2, r2, r4
1a000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000cc6:	e060      	b.n	1a000d8a <gpioConfig+0x18e>
1a000cc8:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000ccc:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000cd0:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000cd4:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a000cd8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000cdc:	492d      	ldr	r1, [pc, #180]	; (1a000d94 <gpioConfig+0x198>)
1a000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000ce2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000ce6:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000cea:	2001      	movs	r0, #1
1a000cec:	fa00 f402 	lsl.w	r4, r0, r2
1a000cf0:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000cf8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000cfc:	ea22 0204 	bic.w	r2, r2, r4
1a000d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000d04:	e041      	b.n	1a000d8a <gpioConfig+0x18e>
1a000d06:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000d0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000d0e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000d12:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a000d16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000d1a:	491e      	ldr	r1, [pc, #120]	; (1a000d94 <gpioConfig+0x198>)
1a000d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000d20:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000d24:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000d28:	2001      	movs	r0, #1
1a000d2a:	fa00 f402 	lsl.w	r4, r0, r2
1a000d2e:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000d36:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000d3a:	ea22 0204 	bic.w	r2, r2, r4
1a000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000d42:	e022      	b.n	1a000d8a <gpioConfig+0x18e>
1a000d44:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000d48:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000d4c:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000d50:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000d54:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000d58:	490e      	ldr	r1, [pc, #56]	; (1a000d94 <gpioConfig+0x198>)
1a000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000d5e:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a000d62:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000d66:	b25a      	sxtb	r2, r3
1a000d68:	2001      	movs	r0, #1
1a000d6a:	fa00 f602 	lsl.w	r6, r0, r2
1a000d6e:	4a08      	ldr	r2, [pc, #32]	; (1a000d90 <gpioConfig+0x194>)
1a000d70:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000d74:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a000d78:	4331      	orrs	r1, r6
1a000d7a:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
1a000d7e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a000d82:	2100      	movs	r1, #0
1a000d84:	54d1      	strb	r1, [r2, r3]
1a000d86:	e000      	b.n	1a000d8a <gpioConfig+0x18e>
1a000d88:	2000      	movs	r0, #0
1a000d8a:	b004      	add	sp, #16
1a000d8c:	bd70      	pop	{r4, r5, r6, pc}
1a000d8e:	bf00      	nop
1a000d90:	400f4000 	.word	0x400f4000
1a000d94:	40086000 	.word	0x40086000

1a000d98 <gpioWrite>:
1a000d98:	b510      	push	{r4, lr}
1a000d9a:	b084      	sub	sp, #16
1a000d9c:	460c      	mov	r4, r1
1a000d9e:	2300      	movs	r3, #0
1a000da0:	f88d 300f 	strb.w	r3, [sp, #15]
1a000da4:	f88d 300e 	strb.w	r3, [sp, #14]
1a000da8:	f88d 300d 	strb.w	r3, [sp, #13]
1a000dac:	f88d 300c 	strb.w	r3, [sp, #12]
1a000db0:	f88d 300b 	strb.w	r3, [sp, #11]
1a000db4:	ab03      	add	r3, sp, #12
1a000db6:	9300      	str	r3, [sp, #0]
1a000db8:	f10d 030b 	add.w	r3, sp, #11
1a000dbc:	9301      	str	r3, [sp, #4]
1a000dbe:	f10d 010f 	add.w	r1, sp, #15
1a000dc2:	f10d 020e 	add.w	r2, sp, #14
1a000dc6:	f10d 030d 	add.w	r3, sp, #13
1a000dca:	f7ff ff01 	bl	1a000bd0 <gpioObtainPinConfig>
1a000dce:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a000dd2:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000dd6:	3400      	adds	r4, #0
1a000dd8:	bf18      	it	ne
1a000dda:	2401      	movne	r4, #1
1a000ddc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000de0:	4a02      	ldr	r2, [pc, #8]	; (1a000dec <gpioWrite+0x54>)
1a000de2:	54d4      	strb	r4, [r2, r3]
1a000de4:	2001      	movs	r0, #1
1a000de6:	b004      	add	sp, #16
1a000de8:	bd10      	pop	{r4, pc}
1a000dea:	bf00      	nop
1a000dec:	400f4000 	.word	0x400f4000

1a000df0 <gpioRead>:
1a000df0:	b500      	push	{lr}
1a000df2:	b085      	sub	sp, #20
1a000df4:	2300      	movs	r3, #0
1a000df6:	f88d 300f 	strb.w	r3, [sp, #15]
1a000dfa:	f88d 300e 	strb.w	r3, [sp, #14]
1a000dfe:	f88d 300d 	strb.w	r3, [sp, #13]
1a000e02:	f88d 300c 	strb.w	r3, [sp, #12]
1a000e06:	f88d 300b 	strb.w	r3, [sp, #11]
1a000e0a:	ab03      	add	r3, sp, #12
1a000e0c:	9300      	str	r3, [sp, #0]
1a000e0e:	f10d 030b 	add.w	r3, sp, #11
1a000e12:	9301      	str	r3, [sp, #4]
1a000e14:	f10d 010f 	add.w	r1, sp, #15
1a000e18:	f10d 020e 	add.w	r2, sp, #14
1a000e1c:	f10d 030d 	add.w	r3, sp, #13
1a000e20:	f7ff fed6 	bl	1a000bd0 <gpioObtainPinConfig>
1a000e24:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a000e28:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000e2c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000e30:	4a04      	ldr	r2, [pc, #16]	; (1a000e44 <gpioRead+0x54>)
1a000e32:	5cd3      	ldrb	r3, [r2, r3]
1a000e34:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000e38:	bf14      	ite	ne
1a000e3a:	2001      	movne	r0, #1
1a000e3c:	2000      	moveq	r0, #0
1a000e3e:	b005      	add	sp, #20
1a000e40:	f85d fb04 	ldr.w	pc, [sp], #4
1a000e44:	400f4000 	.word	0x400f4000

1a000e48 <gpioToggle>:
1a000e48:	b510      	push	{r4, lr}
1a000e4a:	4604      	mov	r4, r0
1a000e4c:	f7ff ffd0 	bl	1a000df0 <gpioRead>
1a000e50:	fab0 f180 	clz	r1, r0
1a000e54:	0949      	lsrs	r1, r1, #5
1a000e56:	4620      	mov	r0, r4
1a000e58:	f7ff ff9e 	bl	1a000d98 <gpioWrite>
1a000e5c:	bd10      	pop	{r4, pc}
1a000e5e:	bf00      	nop

1a000e60 <sleepUntilNextInterrupt>:
1a000e60:	bf30      	wfi
1a000e62:	4770      	bx	lr

1a000e64 <tickConfig>:
1a000e64:	b508      	push	{r3, lr}
1a000e66:	b112      	cbz	r2, 1a000e6e <tickConfig+0xa>
1a000e68:	4613      	mov	r3, r2
1a000e6a:	4a17      	ldr	r2, [pc, #92]	; (1a000ec8 <tickConfig+0x64>)
1a000e6c:	6013      	str	r3, [r2, #0]
1a000e6e:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a000e72:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a000e76:	2b00      	cmp	r3, #0
1a000e78:	bf08      	it	eq
1a000e7a:	2a32      	cmpeq	r2, #50	; 0x32
1a000e7c:	d220      	bcs.n	1a000ec0 <tickConfig+0x5c>
1a000e7e:	4602      	mov	r2, r0
1a000e80:	460b      	mov	r3, r1
1a000e82:	4912      	ldr	r1, [pc, #72]	; (1a000ecc <tickConfig+0x68>)
1a000e84:	e9c1 2300 	strd	r2, r3, [r1]
1a000e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000e8c:	2100      	movs	r1, #0
1a000e8e:	f001 fcf5 	bl	1a00287c <__aeabi_uldivmod>
1a000e92:	4602      	mov	r2, r0
1a000e94:	460b      	mov	r3, r1
1a000e96:	490e      	ldr	r1, [pc, #56]	; (1a000ed0 <tickConfig+0x6c>)
1a000e98:	6808      	ldr	r0, [r1, #0]
1a000e9a:	2100      	movs	r1, #0
1a000e9c:	f001 fcee 	bl	1a00287c <__aeabi_uldivmod>
1a000ea0:	3801      	subs	r0, #1
1a000ea2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000ea6:	d20d      	bcs.n	1a000ec4 <tickConfig+0x60>
1a000ea8:	4b0a      	ldr	r3, [pc, #40]	; (1a000ed4 <tickConfig+0x70>)
1a000eaa:	6058      	str	r0, [r3, #4]
1a000eac:	21e0      	movs	r1, #224	; 0xe0
1a000eae:	4a0a      	ldr	r2, [pc, #40]	; (1a000ed8 <tickConfig+0x74>)
1a000eb0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
1a000eb4:	2200      	movs	r2, #0
1a000eb6:	609a      	str	r2, [r3, #8]
1a000eb8:	2207      	movs	r2, #7
1a000eba:	601a      	str	r2, [r3, #0]
1a000ebc:	2001      	movs	r0, #1
1a000ebe:	bd08      	pop	{r3, pc}
1a000ec0:	2000      	movs	r0, #0
1a000ec2:	bd08      	pop	{r3, pc}
1a000ec4:	2001      	movs	r0, #1
1a000ec6:	bd08      	pop	{r3, pc}
1a000ec8:	10000000 	.word	0x10000000
1a000ecc:	10000140 	.word	0x10000140
1a000ed0:	10000148 	.word	0x10000148
1a000ed4:	e000e010 	.word	0xe000e010
1a000ed8:	e000ed00 	.word	0xe000ed00

1a000edc <tickRead>:
1a000edc:	4b01      	ldr	r3, [pc, #4]	; (1a000ee4 <tickRead+0x8>)
1a000ede:	e9d3 0100 	ldrd	r0, r1, [r3]
1a000ee2:	4770      	bx	lr
1a000ee4:	10000138 	.word	0x10000138

1a000ee8 <tickWrite>:
1a000ee8:	4b01      	ldr	r3, [pc, #4]	; (1a000ef0 <tickWrite+0x8>)
1a000eea:	e9c3 0100 	strd	r0, r1, [r3]
1a000eee:	4770      	bx	lr
1a000ef0:	10000138 	.word	0x10000138

1a000ef4 <SysTick_Handler>:
1a000ef4:	b508      	push	{r3, lr}
1a000ef6:	4906      	ldr	r1, [pc, #24]	; (1a000f10 <SysTick_Handler+0x1c>)
1a000ef8:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000efc:	3201      	adds	r2, #1
1a000efe:	f143 0300 	adc.w	r3, r3, #0
1a000f02:	e9c1 2300 	strd	r2, r3, [r1]
1a000f06:	4b03      	ldr	r3, [pc, #12]	; (1a000f14 <SysTick_Handler+0x20>)
1a000f08:	681b      	ldr	r3, [r3, #0]
1a000f0a:	2000      	movs	r0, #0
1a000f0c:	4798      	blx	r3
1a000f0e:	bd08      	pop	{r3, pc}
1a000f10:	10000138 	.word	0x10000138
1a000f14:	10000000 	.word	0x10000000

1a000f18 <errorOcurred>:
1a000f18:	e7fe      	b.n	1a000f18 <errorOcurred>
1a000f1a:	bf00      	nop

1a000f1c <doNothing>:
1a000f1c:	4770      	bx	lr
1a000f1e:	bf00      	nop

1a000f20 <Timer_Init>:
1a000f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000f24:	b909      	cbnz	r1, 1a000f2a <Timer_Init+0xa>
1a000f26:	f7ff fff7 	bl	1a000f18 <errorOcurred>
1a000f2a:	4605      	mov	r5, r0
1a000f2c:	4617      	mov	r7, r2
1a000f2e:	460e      	mov	r6, r1
1a000f30:	4604      	mov	r4, r0
1a000f32:	4a39      	ldr	r2, [pc, #228]	; (1a001018 <Timer_Init+0xf8>)
1a000f34:	0043      	lsls	r3, r0, #1
1a000f36:	4403      	add	r3, r0
1a000f38:	009b      	lsls	r3, r3, #2
1a000f3a:	eb02 0803 	add.w	r8, r2, r3
1a000f3e:	58d0      	ldr	r0, [r2, r3]
1a000f40:	f001 fa44 	bl	1a0023cc <Chip_TIMER_Init>
1a000f44:	f898 3004 	ldrb.w	r3, [r8, #4]
1a000f48:	095a      	lsrs	r2, r3, #5
1a000f4a:	f003 031f 	and.w	r3, r3, #31
1a000f4e:	2101      	movs	r1, #1
1a000f50:	4099      	lsls	r1, r3
1a000f52:	f102 0340 	add.w	r3, r2, #64	; 0x40
1a000f56:	4a31      	ldr	r2, [pc, #196]	; (1a00101c <Timer_Init+0xfc>)
1a000f58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
1a000f5c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a000f60:	009b      	lsls	r3, r3, #2
1a000f62:	4a2d      	ldr	r2, [pc, #180]	; (1a001018 <Timer_Init+0xf8>)
1a000f64:	4413      	add	r3, r2
1a000f66:	791b      	ldrb	r3, [r3, #4]
1a000f68:	095a      	lsrs	r2, r3, #5
1a000f6a:	3254      	adds	r2, #84	; 0x54
1a000f6c:	492b      	ldr	r1, [pc, #172]	; (1a00101c <Timer_Init+0xfc>)
1a000f6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
1a000f72:	f003 031f 	and.w	r3, r3, #31
1a000f76:	2201      	movs	r2, #1
1a000f78:	fa02 f303 	lsl.w	r3, r2, r3
1a000f7c:	4219      	tst	r1, r3
1a000f7e:	d0ed      	beq.n	1a000f5c <Timer_Init+0x3c>
1a000f80:	4a25      	ldr	r2, [pc, #148]	; (1a001018 <Timer_Init+0xf8>)
1a000f82:	006b      	lsls	r3, r5, #1
1a000f84:	442b      	add	r3, r5
1a000f86:	009b      	lsls	r3, r3, #2
1a000f88:	eb02 0803 	add.w	r8, r2, r3
1a000f8c:	58d4      	ldr	r4, [r2, r3]
1a000f8e:	4620      	mov	r0, r4
1a000f90:	f001 fa28 	bl	1a0023e4 <Chip_TIMER_Reset>
1a000f94:	012b      	lsls	r3, r5, #4
1a000f96:	4a22      	ldr	r2, [pc, #136]	; (1a001020 <Timer_Init+0x100>)
1a000f98:	50d7      	str	r7, [r2, r3]
1a000f9a:	6963      	ldr	r3, [r4, #20]
1a000f9c:	f043 0301 	orr.w	r3, r3, #1
1a000fa0:	6163      	str	r3, [r4, #20]
1a000fa2:	61a6      	str	r6, [r4, #24]
1a000fa4:	6963      	ldr	r3, [r4, #20]
1a000fa6:	f043 0302 	orr.w	r3, r3, #2
1a000faa:	6163      	str	r3, [r4, #20]
1a000fac:	6863      	ldr	r3, [r4, #4]
1a000fae:	f043 0301 	orr.w	r3, r3, #1
1a000fb2:	6063      	str	r3, [r4, #4]
1a000fb4:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a000fb8:	b2d3      	uxtb	r3, r2
1a000fba:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000fbe:	d006      	beq.n	1a000fce <Timer_Init+0xae>
1a000fc0:	f002 020f 	and.w	r2, r2, #15
1a000fc4:	4b17      	ldr	r3, [pc, #92]	; (1a001024 <Timer_Init+0x104>)
1a000fc6:	4413      	add	r3, r2
1a000fc8:	22c0      	movs	r2, #192	; 0xc0
1a000fca:	761a      	strb	r2, [r3, #24]
1a000fcc:	e005      	b.n	1a000fda <Timer_Init+0xba>
1a000fce:	4a16      	ldr	r2, [pc, #88]	; (1a001028 <Timer_Init+0x108>)
1a000fd0:	fa42 f383 	sxtab	r3, r2, r3
1a000fd4:	22c0      	movs	r2, #192	; 0xc0
1a000fd6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
1a000fda:	4c0f      	ldr	r4, [pc, #60]	; (1a001018 <Timer_Init+0xf8>)
1a000fdc:	006e      	lsls	r6, r5, #1
1a000fde:	1973      	adds	r3, r6, r5
1a000fe0:	009b      	lsls	r3, r3, #2
1a000fe2:	4423      	add	r3, r4
1a000fe4:	689b      	ldr	r3, [r3, #8]
1a000fe6:	b259      	sxtb	r1, r3
1a000fe8:	0949      	lsrs	r1, r1, #5
1a000fea:	f003 031f 	and.w	r3, r3, #31
1a000fee:	2201      	movs	r2, #1
1a000ff0:	fa02 f303 	lsl.w	r3, r2, r3
1a000ff4:	480c      	ldr	r0, [pc, #48]	; (1a001028 <Timer_Init+0x108>)
1a000ff6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
1a000ffa:	4435      	add	r5, r6
1a000ffc:	00ad      	lsls	r5, r5, #2
1a000ffe:	4425      	add	r5, r4
1a001000:	68a9      	ldr	r1, [r5, #8]
1a001002:	b24b      	sxtb	r3, r1
1a001004:	095b      	lsrs	r3, r3, #5
1a001006:	f001 011f 	and.w	r1, r1, #31
1a00100a:	408a      	lsls	r2, r1
1a00100c:	3360      	adds	r3, #96	; 0x60
1a00100e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
1a001012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001016:	bf00      	nop
1a001018:	1a00306c 	.word	0x1a00306c
1a00101c:	40053000 	.word	0x40053000
1a001020:	10000004 	.word	0x10000004
1a001024:	e000ecfc 	.word	0xe000ecfc
1a001028:	e000e100 	.word	0xe000e100

1a00102c <Timer_DeInit>:
1a00102c:	b538      	push	{r3, r4, r5, lr}
1a00102e:	4c0d      	ldr	r4, [pc, #52]	; (1a001064 <Timer_DeInit+0x38>)
1a001030:	0045      	lsls	r5, r0, #1
1a001032:	182b      	adds	r3, r5, r0
1a001034:	009b      	lsls	r3, r3, #2
1a001036:	4423      	add	r3, r4
1a001038:	689a      	ldr	r2, [r3, #8]
1a00103a:	b253      	sxtb	r3, r2
1a00103c:	095b      	lsrs	r3, r3, #5
1a00103e:	f002 021f 	and.w	r2, r2, #31
1a001042:	2101      	movs	r1, #1
1a001044:	fa01 f202 	lsl.w	r2, r1, r2
1a001048:	3320      	adds	r3, #32
1a00104a:	4907      	ldr	r1, [pc, #28]	; (1a001068 <Timer_DeInit+0x3c>)
1a00104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001050:	4428      	add	r0, r5
1a001052:	0080      	lsls	r0, r0, #2
1a001054:	5820      	ldr	r0, [r4, r0]
1a001056:	6843      	ldr	r3, [r0, #4]
1a001058:	f023 0301 	bic.w	r3, r3, #1
1a00105c:	6043      	str	r3, [r0, #4]
1a00105e:	f001 f9bb 	bl	1a0023d8 <Chip_TIMER_DeInit>
1a001062:	bd38      	pop	{r3, r4, r5, pc}
1a001064:	1a00306c 	.word	0x1a00306c
1a001068:	e000e100 	.word	0xe000e100

1a00106c <Timer_microsecondsToTicks>:
1a00106c:	23cc      	movs	r3, #204	; 0xcc
1a00106e:	fb03 f000 	mul.w	r0, r3, r0
1a001072:	4770      	bx	lr

1a001074 <Timer_EnableCompareMatch>:
1a001074:	b430      	push	{r4, r5}
1a001076:	eb01 0580 	add.w	r5, r1, r0, lsl #2
1a00107a:	4c0a      	ldr	r4, [pc, #40]	; (1a0010a4 <Timer_EnableCompareMatch+0x30>)
1a00107c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
1a001080:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001084:	0080      	lsls	r0, r0, #2
1a001086:	4b08      	ldr	r3, [pc, #32]	; (1a0010a8 <Timer_EnableCompareMatch+0x34>)
1a001088:	5818      	ldr	r0, [r3, r0]
1a00108a:	6944      	ldr	r4, [r0, #20]
1a00108c:	b249      	sxtb	r1, r1
1a00108e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
1a001092:	2301      	movs	r3, #1
1a001094:	40ab      	lsls	r3, r5
1a001096:	4323      	orrs	r3, r4
1a001098:	6143      	str	r3, [r0, #20]
1a00109a:	3106      	adds	r1, #6
1a00109c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a0010a0:	bc30      	pop	{r4, r5}
1a0010a2:	4770      	bx	lr
1a0010a4:	10000004 	.word	0x10000004
1a0010a8:	1a00306c 	.word	0x1a00306c

1a0010ac <Timer_DisableCompareMatch>:
1a0010ac:	b410      	push	{r4}
1a0010ae:	eb01 0280 	add.w	r2, r1, r0, lsl #2
1a0010b2:	4c0c      	ldr	r4, [pc, #48]	; (1a0010e4 <Timer_DisableCompareMatch+0x38>)
1a0010b4:	4b0c      	ldr	r3, [pc, #48]	; (1a0010e8 <Timer_DisableCompareMatch+0x3c>)
1a0010b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
1a0010ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0010be:	0080      	lsls	r0, r0, #2
1a0010c0:	4b0a      	ldr	r3, [pc, #40]	; (1a0010ec <Timer_DisableCompareMatch+0x40>)
1a0010c2:	581a      	ldr	r2, [r3, r0]
1a0010c4:	b249      	sxtb	r1, r1
1a0010c6:	2301      	movs	r3, #1
1a0010c8:	fa03 f001 	lsl.w	r0, r3, r1
1a0010cc:	6010      	str	r0, [r2, #0]
1a0010ce:	6950      	ldr	r0, [r2, #20]
1a0010d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a0010d4:	408b      	lsls	r3, r1
1a0010d6:	ea20 0303 	bic.w	r3, r0, r3
1a0010da:	6153      	str	r3, [r2, #20]
1a0010dc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0010e0:	4770      	bx	lr
1a0010e2:	bf00      	nop
1a0010e4:	1a000f19 	.word	0x1a000f19
1a0010e8:	10000004 	.word	0x10000004
1a0010ec:	1a00306c 	.word	0x1a00306c

1a0010f0 <Timer_SetCompareMatch>:
1a0010f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0010f4:	0080      	lsls	r0, r0, #2
1a0010f6:	4b03      	ldr	r3, [pc, #12]	; (1a001104 <Timer_SetCompareMatch+0x14>)
1a0010f8:	581b      	ldr	r3, [r3, r0]
1a0010fa:	b249      	sxtb	r1, r1
1a0010fc:	3106      	adds	r1, #6
1a0010fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
1a001102:	4770      	bx	lr
1a001104:	1a00306c 	.word	0x1a00306c

1a001108 <TIMER0_IRQHandler>:
1a001108:	b510      	push	{r4, lr}
1a00110a:	2400      	movs	r4, #0
1a00110c:	e012      	b.n	1a001134 <TIMER0_IRQHandler+0x2c>
1a00110e:	4b0b      	ldr	r3, [pc, #44]	; (1a00113c <TIMER0_IRQHandler+0x34>)
1a001110:	681a      	ldr	r2, [r3, #0]
1a001112:	f004 010f 	and.w	r1, r4, #15
1a001116:	2301      	movs	r3, #1
1a001118:	408b      	lsls	r3, r1
1a00111a:	421a      	tst	r2, r3
1a00111c:	d008      	beq.n	1a001130 <TIMER0_IRQHandler+0x28>
1a00111e:	4b08      	ldr	r3, [pc, #32]	; (1a001140 <TIMER0_IRQHandler+0x38>)
1a001120:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001124:	4798      	blx	r3
1a001126:	b262      	sxtb	r2, r4
1a001128:	2301      	movs	r3, #1
1a00112a:	4093      	lsls	r3, r2
1a00112c:	4a03      	ldr	r2, [pc, #12]	; (1a00113c <TIMER0_IRQHandler+0x34>)
1a00112e:	6013      	str	r3, [r2, #0]
1a001130:	3401      	adds	r4, #1
1a001132:	b2e4      	uxtb	r4, r4
1a001134:	2c03      	cmp	r4, #3
1a001136:	d9ea      	bls.n	1a00110e <TIMER0_IRQHandler+0x6>
1a001138:	bd10      	pop	{r4, pc}
1a00113a:	bf00      	nop
1a00113c:	40084000 	.word	0x40084000
1a001140:	10000004 	.word	0x10000004

1a001144 <TIMER1_IRQHandler>:
1a001144:	b510      	push	{r4, lr}
1a001146:	2400      	movs	r4, #0
1a001148:	e013      	b.n	1a001172 <TIMER1_IRQHandler+0x2e>
1a00114a:	4b0b      	ldr	r3, [pc, #44]	; (1a001178 <TIMER1_IRQHandler+0x34>)
1a00114c:	681a      	ldr	r2, [r3, #0]
1a00114e:	f004 010f 	and.w	r1, r4, #15
1a001152:	2301      	movs	r3, #1
1a001154:	408b      	lsls	r3, r1
1a001156:	421a      	tst	r2, r3
1a001158:	d009      	beq.n	1a00116e <TIMER1_IRQHandler+0x2a>
1a00115a:	1d23      	adds	r3, r4, #4
1a00115c:	4a07      	ldr	r2, [pc, #28]	; (1a00117c <TIMER1_IRQHandler+0x38>)
1a00115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001162:	4798      	blx	r3
1a001164:	b262      	sxtb	r2, r4
1a001166:	2301      	movs	r3, #1
1a001168:	4093      	lsls	r3, r2
1a00116a:	4a03      	ldr	r2, [pc, #12]	; (1a001178 <TIMER1_IRQHandler+0x34>)
1a00116c:	6013      	str	r3, [r2, #0]
1a00116e:	3401      	adds	r4, #1
1a001170:	b2e4      	uxtb	r4, r4
1a001172:	2c03      	cmp	r4, #3
1a001174:	d9e9      	bls.n	1a00114a <TIMER1_IRQHandler+0x6>
1a001176:	bd10      	pop	{r4, pc}
1a001178:	40085000 	.word	0x40085000
1a00117c:	10000004 	.word	0x10000004

1a001180 <TIMER2_IRQHandler>:
1a001180:	b510      	push	{r4, lr}
1a001182:	2400      	movs	r4, #0
1a001184:	e014      	b.n	1a0011b0 <TIMER2_IRQHandler+0x30>
1a001186:	4b0c      	ldr	r3, [pc, #48]	; (1a0011b8 <TIMER2_IRQHandler+0x38>)
1a001188:	681a      	ldr	r2, [r3, #0]
1a00118a:	f004 010f 	and.w	r1, r4, #15
1a00118e:	2301      	movs	r3, #1
1a001190:	408b      	lsls	r3, r1
1a001192:	421a      	tst	r2, r3
1a001194:	d00a      	beq.n	1a0011ac <TIMER2_IRQHandler+0x2c>
1a001196:	f104 0308 	add.w	r3, r4, #8
1a00119a:	4a08      	ldr	r2, [pc, #32]	; (1a0011bc <TIMER2_IRQHandler+0x3c>)
1a00119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0011a0:	4798      	blx	r3
1a0011a2:	b262      	sxtb	r2, r4
1a0011a4:	2301      	movs	r3, #1
1a0011a6:	4093      	lsls	r3, r2
1a0011a8:	4a03      	ldr	r2, [pc, #12]	; (1a0011b8 <TIMER2_IRQHandler+0x38>)
1a0011aa:	6013      	str	r3, [r2, #0]
1a0011ac:	3401      	adds	r4, #1
1a0011ae:	b2e4      	uxtb	r4, r4
1a0011b0:	2c03      	cmp	r4, #3
1a0011b2:	d9e8      	bls.n	1a001186 <TIMER2_IRQHandler+0x6>
1a0011b4:	bd10      	pop	{r4, pc}
1a0011b6:	bf00      	nop
1a0011b8:	400c3000 	.word	0x400c3000
1a0011bc:	10000004 	.word	0x10000004

1a0011c0 <TIMER3_IRQHandler>:
1a0011c0:	b510      	push	{r4, lr}
1a0011c2:	2400      	movs	r4, #0
1a0011c4:	e014      	b.n	1a0011f0 <TIMER3_IRQHandler+0x30>
1a0011c6:	4b0c      	ldr	r3, [pc, #48]	; (1a0011f8 <TIMER3_IRQHandler+0x38>)
1a0011c8:	681a      	ldr	r2, [r3, #0]
1a0011ca:	f004 010f 	and.w	r1, r4, #15
1a0011ce:	2301      	movs	r3, #1
1a0011d0:	408b      	lsls	r3, r1
1a0011d2:	421a      	tst	r2, r3
1a0011d4:	d00a      	beq.n	1a0011ec <TIMER3_IRQHandler+0x2c>
1a0011d6:	f104 030c 	add.w	r3, r4, #12
1a0011da:	4a08      	ldr	r2, [pc, #32]	; (1a0011fc <TIMER3_IRQHandler+0x3c>)
1a0011dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0011e0:	4798      	blx	r3
1a0011e2:	b262      	sxtb	r2, r4
1a0011e4:	2301      	movs	r3, #1
1a0011e6:	4093      	lsls	r3, r2
1a0011e8:	4a03      	ldr	r2, [pc, #12]	; (1a0011f8 <TIMER3_IRQHandler+0x38>)
1a0011ea:	6013      	str	r3, [r2, #0]
1a0011ec:	3401      	adds	r4, #1
1a0011ee:	b2e4      	uxtb	r4, r4
1a0011f0:	2c03      	cmp	r4, #3
1a0011f2:	d9e8      	bls.n	1a0011c6 <TIMER3_IRQHandler+0x6>
1a0011f4:	bd10      	pop	{r4, pc}
1a0011f6:	bf00      	nop
1a0011f8:	400c4000 	.word	0x400c4000
1a0011fc:	10000004 	.word	0x10000004

1a001200 <uartConfig>:
1a001200:	b538      	push	{r3, r4, r5, lr}
1a001202:	460c      	mov	r4, r1
1a001204:	b110      	cbz	r0, 1a00120c <uartConfig+0xc>
1a001206:	2801      	cmp	r0, #1
1a001208:	d013      	beq.n	1a001232 <uartConfig+0x32>
1a00120a:	bd38      	pop	{r3, r4, r5, pc}
1a00120c:	4d12      	ldr	r5, [pc, #72]	; (1a001258 <uartConfig+0x58>)
1a00120e:	4628      	mov	r0, r5
1a001210:	f001 f942 	bl	1a002498 <Chip_UART_Init>
1a001214:	4628      	mov	r0, r5
1a001216:	4621      	mov	r1, r4
1a001218:	f001 f9c4 	bl	1a0025a4 <Chip_UART_SetBaud>
1a00121c:	2301      	movs	r3, #1
1a00121e:	60ab      	str	r3, [r5, #8]
1a001220:	65eb      	str	r3, [r5, #92]	; 0x5c
1a001222:	4b0e      	ldr	r3, [pc, #56]	; (1a00125c <uartConfig+0x5c>)
1a001224:	221e      	movs	r2, #30
1a001226:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
1a00122a:	22d6      	movs	r2, #214	; 0xd6
1a00122c:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
1a001230:	bd38      	pop	{r3, r4, r5, pc}
1a001232:	4d0b      	ldr	r5, [pc, #44]	; (1a001260 <uartConfig+0x60>)
1a001234:	4628      	mov	r0, r5
1a001236:	f001 f92f 	bl	1a002498 <Chip_UART_Init>
1a00123a:	4628      	mov	r0, r5
1a00123c:	4621      	mov	r1, r4
1a00123e:	f001 f9b1 	bl	1a0025a4 <Chip_UART_SetBaud>
1a001242:	2301      	movs	r3, #1
1a001244:	60ab      	str	r3, [r5, #8]
1a001246:	65eb      	str	r3, [r5, #92]	; 0x5c
1a001248:	4b04      	ldr	r3, [pc, #16]	; (1a00125c <uartConfig+0x5c>)
1a00124a:	221a      	movs	r2, #26
1a00124c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a001250:	22d2      	movs	r2, #210	; 0xd2
1a001252:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a001256:	bd38      	pop	{r3, r4, r5, pc}
1a001258:	400c1000 	.word	0x400c1000
1a00125c:	40086000 	.word	0x40086000
1a001260:	400c2000 	.word	0x400c2000

1a001264 <uartReadByte>:
1a001264:	b110      	cbz	r0, 1a00126c <uartReadByte+0x8>
1a001266:	2801      	cmp	r0, #1
1a001268:	d00a      	beq.n	1a001280 <uartReadByte+0x1c>
1a00126a:	e013      	b.n	1a001294 <uartReadByte+0x30>
1a00126c:	4b0c      	ldr	r3, [pc, #48]	; (1a0012a0 <uartReadByte+0x3c>)
1a00126e:	695b      	ldr	r3, [r3, #20]
1a001270:	f013 0f01 	tst.w	r3, #1
1a001274:	d010      	beq.n	1a001298 <uartReadByte+0x34>
1a001276:	4b0a      	ldr	r3, [pc, #40]	; (1a0012a0 <uartReadByte+0x3c>)
1a001278:	681b      	ldr	r3, [r3, #0]
1a00127a:	700b      	strb	r3, [r1, #0]
1a00127c:	2001      	movs	r0, #1
1a00127e:	4770      	bx	lr
1a001280:	4b08      	ldr	r3, [pc, #32]	; (1a0012a4 <uartReadByte+0x40>)
1a001282:	695b      	ldr	r3, [r3, #20]
1a001284:	f013 0f01 	tst.w	r3, #1
1a001288:	d008      	beq.n	1a00129c <uartReadByte+0x38>
1a00128a:	4b06      	ldr	r3, [pc, #24]	; (1a0012a4 <uartReadByte+0x40>)
1a00128c:	681b      	ldr	r3, [r3, #0]
1a00128e:	700b      	strb	r3, [r1, #0]
1a001290:	2001      	movs	r0, #1
1a001292:	4770      	bx	lr
1a001294:	2001      	movs	r0, #1
1a001296:	4770      	bx	lr
1a001298:	2000      	movs	r0, #0
1a00129a:	4770      	bx	lr
1a00129c:	2000      	movs	r0, #0
1a00129e:	4770      	bx	lr
1a0012a0:	400c1000 	.word	0x400c1000
1a0012a4:	400c2000 	.word	0x400c2000

1a0012a8 <uartWriteByte>:
1a0012a8:	b110      	cbz	r0, 1a0012b0 <uartWriteByte+0x8>
1a0012aa:	2801      	cmp	r0, #1
1a0012ac:	d008      	beq.n	1a0012c0 <uartWriteByte+0x18>
1a0012ae:	4770      	bx	lr
1a0012b0:	4b07      	ldr	r3, [pc, #28]	; (1a0012d0 <uartWriteByte+0x28>)
1a0012b2:	695b      	ldr	r3, [r3, #20]
1a0012b4:	f013 0f20 	tst.w	r3, #32
1a0012b8:	d0fa      	beq.n	1a0012b0 <uartWriteByte+0x8>
1a0012ba:	4b05      	ldr	r3, [pc, #20]	; (1a0012d0 <uartWriteByte+0x28>)
1a0012bc:	6019      	str	r1, [r3, #0]
1a0012be:	4770      	bx	lr
1a0012c0:	4b04      	ldr	r3, [pc, #16]	; (1a0012d4 <uartWriteByte+0x2c>)
1a0012c2:	695b      	ldr	r3, [r3, #20]
1a0012c4:	f013 0f20 	tst.w	r3, #32
1a0012c8:	d0fa      	beq.n	1a0012c0 <uartWriteByte+0x18>
1a0012ca:	4b02      	ldr	r3, [pc, #8]	; (1a0012d4 <uartWriteByte+0x2c>)
1a0012cc:	6019      	str	r1, [r3, #0]
1a0012ce:	4770      	bx	lr
1a0012d0:	400c1000 	.word	0x400c1000
1a0012d4:	400c2000 	.word	0x400c2000

1a0012d8 <waitForReceiveStringOrTimeout>:
1a0012d8:	b510      	push	{r4, lr}
1a0012da:	b082      	sub	sp, #8
1a0012dc:	460c      	mov	r4, r1
1a0012de:	780b      	ldrb	r3, [r1, #0]
1a0012e0:	2b03      	cmp	r3, #3
1a0012e2:	d836      	bhi.n	1a001352 <waitForReceiveStringOrTimeout+0x7a>
1a0012e4:	e8df f003 	tbb	[pc, r3]
1a0012e8:	322f0d02 	.word	0x322f0d02
1a0012ec:	f101 0018 	add.w	r0, r1, #24
1a0012f0:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0012f4:	f7ff fc2e 	bl	1a000b54 <delayConfig>
1a0012f8:	2300      	movs	r3, #0
1a0012fa:	8163      	strh	r3, [r4, #10]
1a0012fc:	2301      	movs	r3, #1
1a0012fe:	7023      	strb	r3, [r4, #0]
1a001300:	e029      	b.n	1a001356 <waitForReceiveStringOrTimeout+0x7e>
1a001302:	f10d 0107 	add.w	r1, sp, #7
1a001306:	f7ff ffad 	bl	1a001264 <uartReadByte>
1a00130a:	b1a0      	cbz	r0, 1a001336 <waitForReceiveStringOrTimeout+0x5e>
1a00130c:	2000      	movs	r0, #0
1a00130e:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a001312:	f7ff ffc9 	bl	1a0012a8 <uartWriteByte>
1a001316:	6862      	ldr	r2, [r4, #4]
1a001318:	8963      	ldrh	r3, [r4, #10]
1a00131a:	5cd1      	ldrb	r1, [r2, r3]
1a00131c:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a001320:	4291      	cmp	r1, r2
1a001322:	d108      	bne.n	1a001336 <waitForReceiveStringOrTimeout+0x5e>
1a001324:	3301      	adds	r3, #1
1a001326:	b29b      	uxth	r3, r3
1a001328:	8163      	strh	r3, [r4, #10]
1a00132a:	8922      	ldrh	r2, [r4, #8]
1a00132c:	3a01      	subs	r2, #1
1a00132e:	4293      	cmp	r3, r2
1a001330:	d101      	bne.n	1a001336 <waitForReceiveStringOrTimeout+0x5e>
1a001332:	2302      	movs	r3, #2
1a001334:	7023      	strb	r3, [r4, #0]
1a001336:	f104 0018 	add.w	r0, r4, #24
1a00133a:	f7ff fc1b 	bl	1a000b74 <delayRead>
1a00133e:	b150      	cbz	r0, 1a001356 <waitForReceiveStringOrTimeout+0x7e>
1a001340:	2303      	movs	r3, #3
1a001342:	7023      	strb	r3, [r4, #0]
1a001344:	e007      	b.n	1a001356 <waitForReceiveStringOrTimeout+0x7e>
1a001346:	2300      	movs	r3, #0
1a001348:	700b      	strb	r3, [r1, #0]
1a00134a:	e004      	b.n	1a001356 <waitForReceiveStringOrTimeout+0x7e>
1a00134c:	2300      	movs	r3, #0
1a00134e:	700b      	strb	r3, [r1, #0]
1a001350:	e001      	b.n	1a001356 <waitForReceiveStringOrTimeout+0x7e>
1a001352:	2300      	movs	r3, #0
1a001354:	700b      	strb	r3, [r1, #0]
1a001356:	7820      	ldrb	r0, [r4, #0]
1a001358:	b002      	add	sp, #8
1a00135a:	bd10      	pop	{r4, pc}

1a00135c <waitForReceiveStringOrTimeoutBlocking>:
1a00135c:	b510      	push	{r4, lr}
1a00135e:	b08c      	sub	sp, #48	; 0x30
1a001360:	4604      	mov	r4, r0
1a001362:	2000      	movs	r0, #0
1a001364:	f88d 0000 	strb.w	r0, [sp]
1a001368:	9101      	str	r1, [sp, #4]
1a00136a:	f8ad 2008 	strh.w	r2, [sp, #8]
1a00136e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a001372:	e9cd 2304 	strd	r2, r3, [sp, #16]
1a001376:	e003      	b.n	1a001380 <waitForReceiveStringOrTimeoutBlocking+0x24>
1a001378:	4620      	mov	r0, r4
1a00137a:	4669      	mov	r1, sp
1a00137c:	f7ff ffac 	bl	1a0012d8 <waitForReceiveStringOrTimeout>
1a001380:	1e83      	subs	r3, r0, #2
1a001382:	b2db      	uxtb	r3, r3
1a001384:	2b01      	cmp	r3, #1
1a001386:	d8f7      	bhi.n	1a001378 <waitForReceiveStringOrTimeoutBlocking+0x1c>
1a001388:	2803      	cmp	r0, #3
1a00138a:	d001      	beq.n	1a001390 <waitForReceiveStringOrTimeoutBlocking+0x34>
1a00138c:	2001      	movs	r0, #1
1a00138e:	e000      	b.n	1a001392 <waitForReceiveStringOrTimeoutBlocking+0x36>
1a001390:	2000      	movs	r0, #0
1a001392:	b00c      	add	sp, #48	; 0x30
1a001394:	bd10      	pop	{r4, pc}
1a001396:	bf00      	nop

1a001398 <uartWriteString>:
1a001398:	b538      	push	{r3, r4, r5, lr}
1a00139a:	4605      	mov	r5, r0
1a00139c:	460c      	mov	r4, r1
1a00139e:	e003      	b.n	1a0013a8 <uartWriteString+0x10>
1a0013a0:	4628      	mov	r0, r5
1a0013a2:	f7ff ff81 	bl	1a0012a8 <uartWriteByte>
1a0013a6:	3401      	adds	r4, #1
1a0013a8:	7821      	ldrb	r1, [r4, #0]
1a0013aa:	2900      	cmp	r1, #0
1a0013ac:	d1f8      	bne.n	1a0013a0 <uartWriteString+0x8>
1a0013ae:	bd38      	pop	{r3, r4, r5, pc}

1a0013b0 <UART2_IRQHandler>:
1a0013b0:	4770      	bx	lr
1a0013b2:	bf00      	nop

1a0013b4 <UART3_IRQHandler>:
1a0013b4:	4770      	bx	lr
1a0013b6:	bf00      	nop

1a0013b8 <Board_LED_Init>:
1a0013b8:	b470      	push	{r4, r5, r6}
1a0013ba:	2200      	movs	r2, #0
1a0013bc:	e014      	b.n	1a0013e8 <Board_LED_Init+0x30>
1a0013be:	4b0c      	ldr	r3, [pc, #48]	; (1a0013f0 <Board_LED_Init+0x38>)
1a0013c0:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a0013c4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0013c8:	7859      	ldrb	r1, [r3, #1]
1a0013ca:	480a      	ldr	r0, [pc, #40]	; (1a0013f4 <Board_LED_Init+0x3c>)
1a0013cc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0013d0:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a0013d4:	2301      	movs	r3, #1
1a0013d6:	408b      	lsls	r3, r1
1a0013d8:	4333      	orrs	r3, r6
1a0013da:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
1a0013de:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a0013e2:	2300      	movs	r3, #0
1a0013e4:	5443      	strb	r3, [r0, r1]
1a0013e6:	3201      	adds	r2, #1
1a0013e8:	2a05      	cmp	r2, #5
1a0013ea:	d9e8      	bls.n	1a0013be <Board_LED_Init+0x6>
1a0013ec:	bc70      	pop	{r4, r5, r6}
1a0013ee:	4770      	bx	lr
1a0013f0:	1a00309c 	.word	0x1a00309c
1a0013f4:	400f4000 	.word	0x400f4000

1a0013f8 <Board_UART_Init>:
1a0013f8:	4b03      	ldr	r3, [pc, #12]	; (1a001408 <Board_UART_Init+0x10>)
1a0013fa:	2212      	movs	r2, #18
1a0013fc:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a001400:	22d1      	movs	r2, #209	; 0xd1
1a001402:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a001406:	4770      	bx	lr
1a001408:	40086000 	.word	0x40086000

1a00140c <Board_Debug_Init>:
1a00140c:	b510      	push	{r4, lr}
1a00140e:	4c08      	ldr	r4, [pc, #32]	; (1a001430 <Board_Debug_Init+0x24>)
1a001410:	4620      	mov	r0, r4
1a001412:	f7ff fff1 	bl	1a0013f8 <Board_UART_Init>
1a001416:	4620      	mov	r0, r4
1a001418:	f001 f83e 	bl	1a002498 <Chip_UART_Init>
1a00141c:	4620      	mov	r0, r4
1a00141e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001422:	f001 f957 	bl	1a0026d4 <Chip_UART_SetBaudFDR>
1a001426:	2303      	movs	r3, #3
1a001428:	60e3      	str	r3, [r4, #12]
1a00142a:	2301      	movs	r3, #1
1a00142c:	65e3      	str	r3, [r4, #92]	; 0x5c
1a00142e:	bd10      	pop	{r4, pc}
1a001430:	400c1000 	.word	0x400c1000

1a001434 <Board_UARTPutChar>:
1a001434:	4b03      	ldr	r3, [pc, #12]	; (1a001444 <Board_UARTPutChar+0x10>)
1a001436:	695b      	ldr	r3, [r3, #20]
1a001438:	f013 0f20 	tst.w	r3, #32
1a00143c:	d0fa      	beq.n	1a001434 <Board_UARTPutChar>
1a00143e:	4b01      	ldr	r3, [pc, #4]	; (1a001444 <Board_UARTPutChar+0x10>)
1a001440:	6018      	str	r0, [r3, #0]
1a001442:	4770      	bx	lr
1a001444:	400c1000 	.word	0x400c1000

1a001448 <Board_UARTGetChar>:
1a001448:	4b05      	ldr	r3, [pc, #20]	; (1a001460 <Board_UARTGetChar+0x18>)
1a00144a:	695b      	ldr	r3, [r3, #20]
1a00144c:	f013 0f01 	tst.w	r3, #1
1a001450:	d003      	beq.n	1a00145a <Board_UARTGetChar+0x12>
1a001452:	4b03      	ldr	r3, [pc, #12]	; (1a001460 <Board_UARTGetChar+0x18>)
1a001454:	6818      	ldr	r0, [r3, #0]
1a001456:	b2c0      	uxtb	r0, r0
1a001458:	4770      	bx	lr
1a00145a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00145e:	4770      	bx	lr
1a001460:	400c1000 	.word	0x400c1000

1a001464 <Board_UARTPutSTR>:
1a001464:	b510      	push	{r4, lr}
1a001466:	4604      	mov	r4, r0
1a001468:	e002      	b.n	1a001470 <Board_UARTPutSTR+0xc>
1a00146a:	3401      	adds	r4, #1
1a00146c:	f7ff ffe2 	bl	1a001434 <Board_UARTPutChar>
1a001470:	7820      	ldrb	r0, [r4, #0]
1a001472:	2800      	cmp	r0, #0
1a001474:	d1f9      	bne.n	1a00146a <Board_UARTPutSTR+0x6>
1a001476:	bd10      	pop	{r4, pc}

1a001478 <Board_LED_Set>:
1a001478:	2805      	cmp	r0, #5
1a00147a:	d80b      	bhi.n	1a001494 <Board_LED_Set+0x1c>
1a00147c:	4b06      	ldr	r3, [pc, #24]	; (1a001498 <Board_LED_Set+0x20>)
1a00147e:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
1a001482:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a001486:	7843      	ldrb	r3, [r0, #1]
1a001488:	f081 0101 	eor.w	r1, r1, #1
1a00148c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a001490:	4a02      	ldr	r2, [pc, #8]	; (1a00149c <Board_LED_Set+0x24>)
1a001492:	54d1      	strb	r1, [r2, r3]
1a001494:	4770      	bx	lr
1a001496:	bf00      	nop
1a001498:	1a00309c 	.word	0x1a00309c
1a00149c:	400f4000 	.word	0x400f4000

1a0014a0 <Board_LED_Test>:
1a0014a0:	2805      	cmp	r0, #5
1a0014a2:	d80f      	bhi.n	1a0014c4 <Board_LED_Test+0x24>
1a0014a4:	4b08      	ldr	r3, [pc, #32]	; (1a0014c8 <Board_LED_Test+0x28>)
1a0014a6:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
1a0014aa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a0014ae:	7843      	ldrb	r3, [r0, #1]
1a0014b0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a0014b4:	4a05      	ldr	r2, [pc, #20]	; (1a0014cc <Board_LED_Test+0x2c>)
1a0014b6:	5cd3      	ldrb	r3, [r2, r3]
1a0014b8:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0014bc:	bf0c      	ite	eq
1a0014be:	2001      	moveq	r0, #1
1a0014c0:	2000      	movne	r0, #0
1a0014c2:	4770      	bx	lr
1a0014c4:	2000      	movs	r0, #0
1a0014c6:	4770      	bx	lr
1a0014c8:	1a00309c 	.word	0x1a00309c
1a0014cc:	400f4000 	.word	0x400f4000

1a0014d0 <Board_LED_Toggle>:
1a0014d0:	b510      	push	{r4, lr}
1a0014d2:	4604      	mov	r4, r0
1a0014d4:	f7ff ffe4 	bl	1a0014a0 <Board_LED_Test>
1a0014d8:	f080 0101 	eor.w	r1, r0, #1
1a0014dc:	4620      	mov	r0, r4
1a0014de:	b2c9      	uxtb	r1, r1
1a0014e0:	f7ff ffca 	bl	1a001478 <Board_LED_Set>
1a0014e4:	bd10      	pop	{r4, pc}
1a0014e6:	bf00      	nop

1a0014e8 <Board_ENET_GetMacADDR>:
1a0014e8:	b082      	sub	sp, #8
1a0014ea:	4602      	mov	r2, r0
1a0014ec:	4b06      	ldr	r3, [pc, #24]	; (1a001508 <Board_ENET_GetMacADDR+0x20>)
1a0014ee:	f853 0f0c 	ldr.w	r0, [r3, #12]!
1a0014f2:	9000      	str	r0, [sp, #0]
1a0014f4:	889b      	ldrh	r3, [r3, #4]
1a0014f6:	f8ad 3004 	strh.w	r3, [sp, #4]
1a0014fa:	9800      	ldr	r0, [sp, #0]
1a0014fc:	6010      	str	r0, [r2, #0]
1a0014fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
1a001502:	8093      	strh	r3, [r2, #4]
1a001504:	b002      	add	sp, #8
1a001506:	4770      	bx	lr
1a001508:	1a00309c 	.word	0x1a00309c

1a00150c <Board_Init>:
1a00150c:	b508      	push	{r3, lr}
1a00150e:	f7ff ff7d 	bl	1a00140c <Board_Debug_Init>
1a001512:	4806      	ldr	r0, [pc, #24]	; (1a00152c <Board_Init+0x20>)
1a001514:	f000 fdbe 	bl	1a002094 <Chip_GPIO_Init>
1a001518:	f7ff ff4e 	bl	1a0013b8 <Board_LED_Init>
1a00151c:	4a04      	ldr	r2, [pc, #16]	; (1a001530 <Board_Init+0x24>)
1a00151e:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a001522:	f043 0304 	orr.w	r3, r3, #4
1a001526:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a00152a:	bd08      	pop	{r3, pc}
1a00152c:	400f4000 	.word	0x400f4000
1a001530:	40043000 	.word	0x40043000

1a001534 <Board_I2C_Init>:
1a001534:	2801      	cmp	r0, #1
1a001536:	d106      	bne.n	1a001546 <Board_I2C_Init+0x12>
1a001538:	4b06      	ldr	r3, [pc, #24]	; (1a001554 <Board_I2C_Init+0x20>)
1a00153a:	22c1      	movs	r2, #193	; 0xc1
1a00153c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a001540:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a001544:	4770      	bx	lr
1a001546:	f640 0208 	movw	r2, #2056	; 0x808
1a00154a:	4b02      	ldr	r3, [pc, #8]	; (1a001554 <Board_I2C_Init+0x20>)
1a00154c:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
1a001550:	4770      	bx	lr
1a001552:	bf00      	nop
1a001554:	40086000 	.word	0x40086000

1a001558 <Board_SDMMC_Init>:
1a001558:	4b09      	ldr	r3, [pc, #36]	; (1a001580 <Board_SDMMC_Init+0x28>)
1a00155a:	22e7      	movs	r2, #231	; 0xe7
1a00155c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
1a001560:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
1a001564:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
1a001568:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
1a00156c:	2154      	movs	r1, #84	; 0x54
1a00156e:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
1a001572:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
1a001576:	2247      	movs	r2, #71	; 0x47
1a001578:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
1a00157c:	4770      	bx	lr
1a00157e:	bf00      	nop
1a001580:	40086000 	.word	0x40086000

1a001584 <Board_SSP_Init>:
1a001584:	4b08      	ldr	r3, [pc, #32]	; (1a0015a8 <Board_SSP_Init+0x24>)
1a001586:	4298      	cmp	r0, r3
1a001588:	d10c      	bne.n	1a0015a4 <Board_SSP_Init+0x20>
1a00158a:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
1a00158e:	22f5      	movs	r2, #245	; 0xf5
1a001590:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
1a001594:	22f0      	movs	r2, #240	; 0xf0
1a001596:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a00159a:	22d5      	movs	r2, #213	; 0xd5
1a00159c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
1a0015a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
1a0015a4:	4770      	bx	lr
1a0015a6:	bf00      	nop
1a0015a8:	400c5000 	.word	0x400c5000

1a0015ac <Board_DAC_Init>:
1a0015ac:	4a03      	ldr	r2, [pc, #12]	; (1a0015bc <Board_DAC_Init+0x10>)
1a0015ae:	f8d2 3c90 	ldr.w	r3, [r2, #3216]	; 0xc90
1a0015b2:	f043 0301 	orr.w	r3, r3, #1
1a0015b6:	f8c2 3c90 	str.w	r3, [r2, #3216]	; 0xc90
1a0015ba:	4770      	bx	lr
1a0015bc:	40086000 	.word	0x40086000

1a0015c0 <Board_SetupMuxing>:
1a0015c0:	b410      	push	{r4}
1a0015c2:	2300      	movs	r3, #0
1a0015c4:	e00c      	b.n	1a0015e0 <Board_SetupMuxing+0x20>
1a0015c6:	4a09      	ldr	r2, [pc, #36]	; (1a0015ec <Board_SetupMuxing+0x2c>)
1a0015c8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0015cc:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0015d0:	784a      	ldrb	r2, [r1, #1]
1a0015d2:	8848      	ldrh	r0, [r1, #2]
1a0015d4:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0015d8:	4905      	ldr	r1, [pc, #20]	; (1a0015f0 <Board_SetupMuxing+0x30>)
1a0015da:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
1a0015de:	3301      	adds	r3, #1
1a0015e0:	2b17      	cmp	r3, #23
1a0015e2:	d9f0      	bls.n	1a0015c6 <Board_SetupMuxing+0x6>
1a0015e4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0015e8:	4770      	bx	lr
1a0015ea:	bf00      	nop
1a0015ec:	1a0030b8 	.word	0x1a0030b8
1a0015f0:	40086000 	.word	0x40086000

1a0015f4 <Board_SetupClocking>:
1a0015f4:	b510      	push	{r4, lr}
1a0015f6:	4a19      	ldr	r2, [pc, #100]	; (1a00165c <Board_SetupClocking+0x68>)
1a0015f8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0015fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001600:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001604:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
1a001608:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00160c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001610:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001614:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
1a001618:	2006      	movs	r0, #6
1a00161a:	4911      	ldr	r1, [pc, #68]	; (1a001660 <Board_SetupClocking+0x6c>)
1a00161c:	2201      	movs	r2, #1
1a00161e:	f000 fdff 	bl	1a002220 <Chip_SetupCoreClock>
1a001622:	2400      	movs	r4, #0
1a001624:	e00d      	b.n	1a001642 <Board_SetupClocking+0x4e>
1a001626:	4b0f      	ldr	r3, [pc, #60]	; (1a001664 <Board_SetupClocking+0x70>)
1a001628:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1a00162c:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
1a001630:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
1a001634:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
1a001638:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
1a00163c:	f000 fb98 	bl	1a001d70 <Chip_Clock_SetBaseClock>
1a001640:	3401      	adds	r4, #1
1a001642:	2c02      	cmp	r4, #2
1a001644:	d9ef      	bls.n	1a001626 <Board_SetupClocking+0x32>
1a001646:	4b05      	ldr	r3, [pc, #20]	; (1a00165c <Board_SetupClocking+0x68>)
1a001648:	685a      	ldr	r2, [r3, #4]
1a00164a:	f022 020c 	bic.w	r2, r2, #12
1a00164e:	605a      	str	r2, [r3, #4]
1a001650:	685a      	ldr	r2, [r3, #4]
1a001652:	f042 0203 	orr.w	r2, r2, #3
1a001656:	605a      	str	r2, [r3, #4]
1a001658:	bd10      	pop	{r4, pc}
1a00165a:	bf00      	nop
1a00165c:	40043000 	.word	0x40043000
1a001660:	0c28cb00 	.word	0x0c28cb00
1a001664:	1a0030b8 	.word	0x1a0030b8

1a001668 <Board_SystemInit>:
1a001668:	b508      	push	{r3, lr}
1a00166a:	f7ff ffa9 	bl	1a0015c0 <Board_SetupMuxing>
1a00166e:	f7ff ffc1 	bl	1a0015f4 <Board_SetupClocking>
1a001672:	bd08      	pop	{r3, pc}

1a001674 <SystemInit>:
1a001674:	b508      	push	{r3, lr}
1a001676:	4b04      	ldr	r3, [pc, #16]	; (1a001688 <SystemInit+0x14>)
1a001678:	4a04      	ldr	r2, [pc, #16]	; (1a00168c <SystemInit+0x18>)
1a00167a:	601a      	str	r2, [r3, #0]
1a00167c:	f000 fcde 	bl	1a00203c <fpuInit>
1a001680:	f7ff fff2 	bl	1a001668 <Board_SystemInit>
1a001684:	bd08      	pop	{r3, pc}
1a001686:	bf00      	nop
1a001688:	e000ed08 	.word	0xe000ed08
1a00168c:	1a000000 	.word	0x1a000000

1a001690 <Chip_USB_PllSetup>:
1a001690:	b508      	push	{r3, lr}
1a001692:	2007      	movs	r0, #7
1a001694:	f000 f9de 	bl	1a001a54 <Chip_Clock_GetClockInputHz>
1a001698:	4b08      	ldr	r3, [pc, #32]	; (1a0016bc <Chip_USB_PllSetup+0x2c>)
1a00169a:	4298      	cmp	r0, r3
1a00169c:	d00d      	beq.n	1a0016ba <Chip_USB_PllSetup+0x2a>
1a00169e:	2006      	movs	r0, #6
1a0016a0:	2100      	movs	r1, #0
1a0016a2:	4a07      	ldr	r2, [pc, #28]	; (1a0016c0 <Chip_USB_PllSetup+0x30>)
1a0016a4:	f000 fc90 	bl	1a001fc8 <Chip_Clock_SetupPLL>
1a0016a8:	2000      	movs	r0, #0
1a0016aa:	f000 fcad 	bl	1a002008 <Chip_Clock_EnablePLL>
1a0016ae:	2000      	movs	r0, #0
1a0016b0:	f000 fcbe 	bl	1a002030 <Chip_Clock_GetPLLStatus>
1a0016b4:	f010 0f01 	tst.w	r0, #1
1a0016b8:	d0f9      	beq.n	1a0016ae <Chip_USB_PllSetup+0x1e>
1a0016ba:	bd08      	pop	{r3, pc}
1a0016bc:	1c9c3800 	.word	0x1c9c3800
1a0016c0:	1a003124 	.word	0x1a003124

1a0016c4 <Chip_USB0_Init>:
1a0016c4:	b508      	push	{r3, lr}
1a0016c6:	f7ff ffe3 	bl	1a001690 <Chip_USB_PllSetup>
1a0016ca:	2001      	movs	r0, #1
1a0016cc:	2107      	movs	r1, #7
1a0016ce:	4602      	mov	r2, r0
1a0016d0:	4603      	mov	r3, r0
1a0016d2:	f000 fb4d 	bl	1a001d70 <Chip_Clock_SetBaseClock>
1a0016d6:	2001      	movs	r0, #1
1a0016d8:	f000 fb86 	bl	1a001de8 <Chip_Clock_EnableBaseClock>
1a0016dc:	2065      	movs	r0, #101	; 0x65
1a0016de:	2101      	movs	r1, #1
1a0016e0:	460a      	mov	r2, r1
1a0016e2:	460b      	mov	r3, r1
1a0016e4:	f000 fbc0 	bl	1a001e68 <Chip_Clock_EnableOpts>
1a0016e8:	4a02      	ldr	r2, [pc, #8]	; (1a0016f4 <Chip_USB0_Init+0x30>)
1a0016ea:	6853      	ldr	r3, [r2, #4]
1a0016ec:	f023 0320 	bic.w	r3, r3, #32
1a0016f0:	6053      	str	r3, [r2, #4]
1a0016f2:	bd08      	pop	{r3, pc}
1a0016f4:	40043000 	.word	0x40043000

1a0016f8 <Chip_USB1_Init>:
1a0016f8:	b508      	push	{r3, lr}
1a0016fa:	f7ff ffc9 	bl	1a001690 <Chip_USB_PllSetup>
1a0016fe:	2000      	movs	r0, #0
1a001700:	2107      	movs	r1, #7
1a001702:	2204      	movs	r2, #4
1a001704:	f000 f960 	bl	1a0019c8 <Chip_Clock_SetDivider>
1a001708:	2003      	movs	r0, #3
1a00170a:	210c      	movs	r1, #12
1a00170c:	2202      	movs	r2, #2
1a00170e:	f000 f95b 	bl	1a0019c8 <Chip_Clock_SetDivider>
1a001712:	2003      	movs	r0, #3
1a001714:	210f      	movs	r1, #15
1a001716:	2201      	movs	r2, #1
1a001718:	4613      	mov	r3, r2
1a00171a:	f000 fb29 	bl	1a001d70 <Chip_Clock_SetBaseClock>
1a00171e:	2003      	movs	r0, #3
1a001720:	f000 fb62 	bl	1a001de8 <Chip_Clock_EnableBaseClock>
1a001724:	206e      	movs	r0, #110	; 0x6e
1a001726:	2101      	movs	r1, #1
1a001728:	460a      	mov	r2, r1
1a00172a:	460b      	mov	r3, r1
1a00172c:	f000 fb9c 	bl	1a001e68 <Chip_Clock_EnableOpts>
1a001730:	2212      	movs	r2, #18
1a001732:	4b02      	ldr	r3, [pc, #8]	; (1a00173c <Chip_USB1_Init+0x44>)
1a001734:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
1a001738:	bd08      	pop	{r3, pc}
1a00173a:	bf00      	nop
1a00173c:	40086000 	.word	0x40086000

1a001740 <SystemCoreClockUpdate>:
1a001740:	b508      	push	{r3, lr}
1a001742:	2069      	movs	r0, #105	; 0x69
1a001744:	f000 fc02 	bl	1a001f4c <Chip_Clock_GetRate>
1a001748:	4b01      	ldr	r3, [pc, #4]	; (1a001750 <SystemCoreClockUpdate+0x10>)
1a00174a:	6018      	str	r0, [r3, #0]
1a00174c:	bd08      	pop	{r3, pc}
1a00174e:	bf00      	nop
1a001750:	10000148 	.word	0x10000148

1a001754 <pll_calc_divs>:
1a001754:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001756:	680b      	ldr	r3, [r1, #0]
1a001758:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00175c:	d002      	beq.n	1a001764 <pll_calc_divs+0x10>
1a00175e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001762:	600b      	str	r3, [r1, #0]
1a001764:	4686      	mov	lr, r0
1a001766:	2601      	movs	r6, #1
1a001768:	e041      	b.n	1a0017ee <pll_calc_divs+0x9a>
1a00176a:	680d      	ldr	r5, [r1, #0]
1a00176c:	f015 0f40 	tst.w	r5, #64	; 0x40
1a001770:	d008      	beq.n	1a001784 <pll_calc_divs+0x30>
1a001772:	1c7b      	adds	r3, r7, #1
1a001774:	fa04 f203 	lsl.w	r2, r4, r3
1a001778:	694b      	ldr	r3, [r1, #20]
1a00177a:	fb03 f302 	mul.w	r3, r3, r2
1a00177e:	fbb3 f3f6 	udiv	r3, r3, r6
1a001782:	e004      	b.n	1a00178e <pll_calc_divs+0x3a>
1a001784:	694b      	ldr	r3, [r1, #20]
1a001786:	fb04 f303 	mul.w	r3, r4, r3
1a00178a:	fbb3 f3f6 	udiv	r3, r3, r6
1a00178e:	4a19      	ldr	r2, [pc, #100]	; (1a0017f4 <pll_calc_divs+0xa0>)
1a001790:	4293      	cmp	r3, r2
1a001792:	d920      	bls.n	1a0017d6 <pll_calc_divs+0x82>
1a001794:	4a18      	ldr	r2, [pc, #96]	; (1a0017f8 <pll_calc_divs+0xa4>)
1a001796:	4293      	cmp	r3, r2
1a001798:	d823      	bhi.n	1a0017e2 <pll_calc_divs+0x8e>
1a00179a:	f015 0f80 	tst.w	r5, #128	; 0x80
1a00179e:	d103      	bne.n	1a0017a8 <pll_calc_divs+0x54>
1a0017a0:	1c7a      	adds	r2, r7, #1
1a0017a2:	fa23 f202 	lsr.w	r2, r3, r2
1a0017a6:	e000      	b.n	1a0017aa <pll_calc_divs+0x56>
1a0017a8:	461a      	mov	r2, r3
1a0017aa:	1a85      	subs	r5, r0, r2
1a0017ac:	d502      	bpl.n	1a0017b4 <pll_calc_divs+0x60>
1a0017ae:	f1c5 0c00 	rsb	ip, r5, #0
1a0017b2:	e000      	b.n	1a0017b6 <pll_calc_divs+0x62>
1a0017b4:	46ac      	mov	ip, r5
1a0017b6:	45e6      	cmp	lr, ip
1a0017b8:	d90d      	bls.n	1a0017d6 <pll_calc_divs+0x82>
1a0017ba:	608e      	str	r6, [r1, #8]
1a0017bc:	f107 0e01 	add.w	lr, r7, #1
1a0017c0:	f8c1 e00c 	str.w	lr, [r1, #12]
1a0017c4:	610c      	str	r4, [r1, #16]
1a0017c6:	618a      	str	r2, [r1, #24]
1a0017c8:	61cb      	str	r3, [r1, #28]
1a0017ca:	2d00      	cmp	r5, #0
1a0017cc:	da02      	bge.n	1a0017d4 <pll_calc_divs+0x80>
1a0017ce:	f1c5 0e00 	rsb	lr, r5, #0
1a0017d2:	e000      	b.n	1a0017d6 <pll_calc_divs+0x82>
1a0017d4:	46ae      	mov	lr, r5
1a0017d6:	3401      	adds	r4, #1
1a0017d8:	e000      	b.n	1a0017dc <pll_calc_divs+0x88>
1a0017da:	2401      	movs	r4, #1
1a0017dc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a0017e0:	ddc3      	ble.n	1a00176a <pll_calc_divs+0x16>
1a0017e2:	3701      	adds	r7, #1
1a0017e4:	e000      	b.n	1a0017e8 <pll_calc_divs+0x94>
1a0017e6:	2700      	movs	r7, #0
1a0017e8:	2f03      	cmp	r7, #3
1a0017ea:	ddf6      	ble.n	1a0017da <pll_calc_divs+0x86>
1a0017ec:	3601      	adds	r6, #1
1a0017ee:	2e04      	cmp	r6, #4
1a0017f0:	ddf9      	ble.n	1a0017e6 <pll_calc_divs+0x92>
1a0017f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0017f4:	094c5eff 	.word	0x094c5eff
1a0017f8:	1312d000 	.word	0x1312d000

1a0017fc <pll_get_frac>:
1a0017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0017fe:	b099      	sub	sp, #100	; 0x64
1a001800:	4605      	mov	r5, r0
1a001802:	460c      	mov	r4, r1
1a001804:	4668      	mov	r0, sp
1a001806:	2100      	movs	r1, #0
1a001808:	2260      	movs	r2, #96	; 0x60
1a00180a:	f001 fb10 	bl	1a002e2e <memset>
1a00180e:	2380      	movs	r3, #128	; 0x80
1a001810:	9300      	str	r3, [sp, #0]
1a001812:	6963      	ldr	r3, [r4, #20]
1a001814:	9305      	str	r3, [sp, #20]
1a001816:	7923      	ldrb	r3, [r4, #4]
1a001818:	f88d 3004 	strb.w	r3, [sp, #4]
1a00181c:	4628      	mov	r0, r5
1a00181e:	4669      	mov	r1, sp
1a001820:	f7ff ff98 	bl	1a001754 <pll_calc_divs>
1a001824:	9b06      	ldr	r3, [sp, #24]
1a001826:	42ab      	cmp	r3, r5
1a001828:	d107      	bne.n	1a00183a <pll_get_frac+0x3e>
1a00182a:	466d      	mov	r5, sp
1a00182c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001830:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001838:	e05e      	b.n	1a0018f8 <pll_get_frac+0xfc>
1a00183a:	1aeb      	subs	r3, r5, r3
1a00183c:	d500      	bpl.n	1a001840 <pll_get_frac+0x44>
1a00183e:	425b      	negs	r3, r3
1a001840:	461e      	mov	r6, r3
1a001842:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001848:	9310      	str	r3, [sp, #64]	; 0x40
1a00184a:	6963      	ldr	r3, [r4, #20]
1a00184c:	9315      	str	r3, [sp, #84]	; 0x54
1a00184e:	7923      	ldrb	r3, [r4, #4]
1a001850:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
1a001854:	4628      	mov	r0, r5
1a001856:	a910      	add	r1, sp, #64	; 0x40
1a001858:	f7ff ff7c 	bl	1a001754 <pll_calc_divs>
1a00185c:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00185e:	42ab      	cmp	r3, r5
1a001860:	d107      	bne.n	1a001872 <pll_get_frac+0x76>
1a001862:	ad10      	add	r5, sp, #64	; 0x40
1a001864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001868:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00186c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001870:	e042      	b.n	1a0018f8 <pll_get_frac+0xfc>
1a001872:	1aeb      	subs	r3, r5, r3
1a001874:	d500      	bpl.n	1a001878 <pll_get_frac+0x7c>
1a001876:	425b      	negs	r3, r3
1a001878:	461f      	mov	r7, r3
1a00187a:	4b20      	ldr	r3, [pc, #128]	; (1a0018fc <pll_get_frac+0x100>)
1a00187c:	429d      	cmp	r5, r3
1a00187e:	d812      	bhi.n	1a0018a6 <pll_get_frac+0xaa>
1a001880:	2340      	movs	r3, #64	; 0x40
1a001882:	9308      	str	r3, [sp, #32]
1a001884:	6963      	ldr	r3, [r4, #20]
1a001886:	930d      	str	r3, [sp, #52]	; 0x34
1a001888:	4628      	mov	r0, r5
1a00188a:	a908      	add	r1, sp, #32
1a00188c:	f7ff ff62 	bl	1a001754 <pll_calc_divs>
1a001890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001892:	42ab      	cmp	r3, r5
1a001894:	d107      	bne.n	1a0018a6 <pll_get_frac+0xaa>
1a001896:	ad08      	add	r5, sp, #32
1a001898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00189a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00189c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0018a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0018a4:	e028      	b.n	1a0018f8 <pll_get_frac+0xfc>
1a0018a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0018a8:	1aed      	subs	r5, r5, r3
1a0018aa:	d500      	bpl.n	1a0018ae <pll_get_frac+0xb2>
1a0018ac:	426d      	negs	r5, r5
1a0018ae:	42ae      	cmp	r6, r5
1a0018b0:	dc11      	bgt.n	1a0018d6 <pll_get_frac+0xda>
1a0018b2:	42be      	cmp	r6, r7
1a0018b4:	dc07      	bgt.n	1a0018c6 <pll_get_frac+0xca>
1a0018b6:	466d      	mov	r5, sp
1a0018b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0018ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0018bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0018c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0018c4:	e018      	b.n	1a0018f8 <pll_get_frac+0xfc>
1a0018c6:	ad10      	add	r5, sp, #64	; 0x40
1a0018c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0018ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0018cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0018d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0018d4:	e010      	b.n	1a0018f8 <pll_get_frac+0xfc>
1a0018d6:	42af      	cmp	r7, r5
1a0018d8:	db07      	blt.n	1a0018ea <pll_get_frac+0xee>
1a0018da:	ad08      	add	r5, sp, #32
1a0018dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0018de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0018e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0018e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0018e8:	e006      	b.n	1a0018f8 <pll_get_frac+0xfc>
1a0018ea:	ad10      	add	r5, sp, #64	; 0x40
1a0018ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0018ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0018f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0018f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0018f8:	b019      	add	sp, #100	; 0x64
1a0018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0018fc:	068e7780 	.word	0x068e7780

1a001900 <Chip_Clock_TestMainPLLMultiplier>:
1a001900:	fb00 f001 	mul.w	r0, r0, r1
1a001904:	4290      	cmp	r0, r2
1a001906:	d305      	bcc.n	1a001914 <Chip_Clock_TestMainPLLMultiplier+0x14>
1a001908:	4a05      	ldr	r2, [pc, #20]	; (1a001920 <Chip_Clock_TestMainPLLMultiplier+0x20>)
1a00190a:	4290      	cmp	r0, r2
1a00190c:	d804      	bhi.n	1a001918 <Chip_Clock_TestMainPLLMultiplier+0x18>
1a00190e:	4298      	cmp	r0, r3
1a001910:	d804      	bhi.n	1a00191c <Chip_Clock_TestMainPLLMultiplier+0x1c>
1a001912:	4770      	bx	lr
1a001914:	2000      	movs	r0, #0
1a001916:	4770      	bx	lr
1a001918:	2000      	movs	r0, #0
1a00191a:	4770      	bx	lr
1a00191c:	2000      	movs	r0, #0
1a00191e:	4770      	bx	lr
1a001920:	0c28cb00 	.word	0x0c28cb00

1a001924 <Chip_Clock_FindBaseClock>:
1a001924:	b430      	push	{r4, r5}
1a001926:	2300      	movs	r3, #0
1a001928:	211c      	movs	r1, #28
1a00192a:	e010      	b.n	1a00194e <Chip_Clock_FindBaseClock+0x2a>
1a00192c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001930:	0052      	lsls	r2, r2, #1
1a001932:	4d0d      	ldr	r5, [pc, #52]	; (1a001968 <Chip_Clock_FindBaseClock+0x44>)
1a001934:	5aaa      	ldrh	r2, [r5, r2]
1a001936:	4282      	cmp	r2, r0
1a001938:	d806      	bhi.n	1a001948 <Chip_Clock_FindBaseClock+0x24>
1a00193a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00193e:	0052      	lsls	r2, r2, #1
1a001940:	442a      	add	r2, r5
1a001942:	8852      	ldrh	r2, [r2, #2]
1a001944:	4282      	cmp	r2, r0
1a001946:	d201      	bcs.n	1a00194c <Chip_Clock_FindBaseClock+0x28>
1a001948:	3301      	adds	r3, #1
1a00194a:	e000      	b.n	1a00194e <Chip_Clock_FindBaseClock+0x2a>
1a00194c:	4621      	mov	r1, r4
1a00194e:	291c      	cmp	r1, #28
1a001950:	d107      	bne.n	1a001962 <Chip_Clock_FindBaseClock+0x3e>
1a001952:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001956:	0052      	lsls	r2, r2, #1
1a001958:	4c03      	ldr	r4, [pc, #12]	; (1a001968 <Chip_Clock_FindBaseClock+0x44>)
1a00195a:	4422      	add	r2, r4
1a00195c:	7914      	ldrb	r4, [r2, #4]
1a00195e:	428c      	cmp	r4, r1
1a001960:	d1e4      	bne.n	1a00192c <Chip_Clock_FindBaseClock+0x8>
1a001962:	4608      	mov	r0, r1
1a001964:	bc30      	pop	{r4, r5}
1a001966:	4770      	bx	lr
1a001968:	1a003138 	.word	0x1a003138

1a00196c <Chip_Clock_EnableCrystal>:
1a00196c:	b082      	sub	sp, #8
1a00196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001972:	9301      	str	r3, [sp, #4]
1a001974:	4a0d      	ldr	r2, [pc, #52]	; (1a0019ac <Chip_Clock_EnableCrystal+0x40>)
1a001976:	6993      	ldr	r3, [r2, #24]
1a001978:	f023 0102 	bic.w	r1, r3, #2
1a00197c:	6992      	ldr	r2, [r2, #24]
1a00197e:	428a      	cmp	r2, r1
1a001980:	d001      	beq.n	1a001986 <Chip_Clock_EnableCrystal+0x1a>
1a001982:	4a0a      	ldr	r2, [pc, #40]	; (1a0019ac <Chip_Clock_EnableCrystal+0x40>)
1a001984:	6191      	str	r1, [r2, #24]
1a001986:	f023 0303 	bic.w	r3, r3, #3
1a00198a:	4a09      	ldr	r2, [pc, #36]	; (1a0019b0 <Chip_Clock_EnableCrystal+0x44>)
1a00198c:	6811      	ldr	r1, [r2, #0]
1a00198e:	4a09      	ldr	r2, [pc, #36]	; (1a0019b4 <Chip_Clock_EnableCrystal+0x48>)
1a001990:	4291      	cmp	r1, r2
1a001992:	d901      	bls.n	1a001998 <Chip_Clock_EnableCrystal+0x2c>
1a001994:	f043 0304 	orr.w	r3, r3, #4
1a001998:	4a04      	ldr	r2, [pc, #16]	; (1a0019ac <Chip_Clock_EnableCrystal+0x40>)
1a00199a:	6193      	str	r3, [r2, #24]
1a00199c:	9b01      	ldr	r3, [sp, #4]
1a00199e:	1e5a      	subs	r2, r3, #1
1a0019a0:	9201      	str	r2, [sp, #4]
1a0019a2:	2b00      	cmp	r3, #0
1a0019a4:	d1fa      	bne.n	1a00199c <Chip_Clock_EnableCrystal+0x30>
1a0019a6:	b002      	add	sp, #8
1a0019a8:	4770      	bx	lr
1a0019aa:	bf00      	nop
1a0019ac:	40050000 	.word	0x40050000
1a0019b0:	1a0030b0 	.word	0x1a0030b0
1a0019b4:	01312cff 	.word	0x01312cff

1a0019b8 <Chip_Clock_DisableCrystal>:
1a0019b8:	4a02      	ldr	r2, [pc, #8]	; (1a0019c4 <Chip_Clock_DisableCrystal+0xc>)
1a0019ba:	6993      	ldr	r3, [r2, #24]
1a0019bc:	f043 0301 	orr.w	r3, r3, #1
1a0019c0:	6193      	str	r3, [r2, #24]
1a0019c2:	4770      	bx	lr
1a0019c4:	40050000 	.word	0x40050000

1a0019c8 <Chip_Clock_SetDivider>:
1a0019c8:	b410      	push	{r4}
1a0019ca:	f100 0412 	add.w	r4, r0, #18
1a0019ce:	4b11      	ldr	r3, [pc, #68]	; (1a001a14 <Chip_Clock_SetDivider+0x4c>)
1a0019d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0019d4:	3a01      	subs	r2, #1
1a0019d6:	2911      	cmp	r1, #17
1a0019d8:	d013      	beq.n	1a001a02 <Chip_Clock_SetDivider+0x3a>
1a0019da:	4c0f      	ldr	r4, [pc, #60]	; (1a001a18 <Chip_Clock_SetDivider+0x50>)
1a0019dc:	5c24      	ldrb	r4, [r4, r0]
1a0019de:	00a4      	lsls	r4, r4, #2
1a0019e0:	f044 54f8 	orr.w	r4, r4, #520093696	; 0x1f000000
1a0019e4:	f044 0401 	orr.w	r4, r4, #1
1a0019e8:	ea23 0304 	bic.w	r3, r3, r4
1a0019ec:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a0019f0:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
1a0019f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
1a0019f8:	3012      	adds	r0, #18
1a0019fa:	4b06      	ldr	r3, [pc, #24]	; (1a001a14 <Chip_Clock_SetDivider+0x4c>)
1a0019fc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
1a001a00:	e005      	b.n	1a001a0e <Chip_Clock_SetDivider+0x46>
1a001a02:	f043 0301 	orr.w	r3, r3, #1
1a001a06:	3012      	adds	r0, #18
1a001a08:	4a02      	ldr	r2, [pc, #8]	; (1a001a14 <Chip_Clock_SetDivider+0x4c>)
1a001a0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
1a001a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001a12:	4770      	bx	lr
1a001a14:	40050000 	.word	0x40050000
1a001a18:	1a0031a8 	.word	0x1a0031a8

1a001a1c <Chip_Clock_GetDividerSource>:
1a001a1c:	3012      	adds	r0, #18
1a001a1e:	4b05      	ldr	r3, [pc, #20]	; (1a001a34 <Chip_Clock_GetDividerSource+0x18>)
1a001a20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
1a001a24:	f010 0f01 	tst.w	r0, #1
1a001a28:	d102      	bne.n	1a001a30 <Chip_Clock_GetDividerSource+0x14>
1a001a2a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001a2e:	4770      	bx	lr
1a001a30:	2011      	movs	r0, #17
1a001a32:	4770      	bx	lr
1a001a34:	40050000 	.word	0x40050000

1a001a38 <Chip_Clock_GetDividerDivisor>:
1a001a38:	f100 0212 	add.w	r2, r0, #18
1a001a3c:	4b03      	ldr	r3, [pc, #12]	; (1a001a4c <Chip_Clock_GetDividerDivisor+0x14>)
1a001a3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001a42:	4b03      	ldr	r3, [pc, #12]	; (1a001a50 <Chip_Clock_GetDividerDivisor+0x18>)
1a001a44:	5c18      	ldrb	r0, [r3, r0]
1a001a46:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001a4a:	4770      	bx	lr
1a001a4c:	40050000 	.word	0x40050000
1a001a50:	1a0031a8 	.word	0x1a0031a8

1a001a54 <Chip_Clock_GetClockInputHz>:
1a001a54:	b508      	push	{r3, lr}
1a001a56:	2810      	cmp	r0, #16
1a001a58:	d80a      	bhi.n	1a001a70 <Chip_Clock_GetClockInputHz+0x1c>
1a001a5a:	e8df f000 	tbb	[pc, r0]
1a001a5e:	0b42      	.short	0x0b42
1a001a60:	091f160d 	.word	0x091f160d
1a001a64:	2b282522 	.word	0x2b282522
1a001a68:	322e0909 	.word	0x322e0909
1a001a6c:	3a36      	.short	0x3a36
1a001a6e:	3e          	.byte	0x3e
1a001a6f:	00          	.byte	0x00
1a001a70:	2000      	movs	r0, #0
1a001a72:	bd08      	pop	{r3, pc}
1a001a74:	481e      	ldr	r0, [pc, #120]	; (1a001af0 <Chip_Clock_GetClockInputHz+0x9c>)
1a001a76:	bd08      	pop	{r3, pc}
1a001a78:	4b1e      	ldr	r3, [pc, #120]	; (1a001af4 <Chip_Clock_GetClockInputHz+0xa0>)
1a001a7a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001a7e:	f003 0307 	and.w	r3, r3, #7
1a001a82:	2b04      	cmp	r3, #4
1a001a84:	d130      	bne.n	1a001ae8 <Chip_Clock_GetClockInputHz+0x94>
1a001a86:	2000      	movs	r0, #0
1a001a88:	bd08      	pop	{r3, pc}
1a001a8a:	4b1a      	ldr	r3, [pc, #104]	; (1a001af4 <Chip_Clock_GetClockInputHz+0xa0>)
1a001a8c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001a90:	f003 0307 	and.w	r3, r3, #7
1a001a94:	2b04      	cmp	r3, #4
1a001a96:	d029      	beq.n	1a001aec <Chip_Clock_GetClockInputHz+0x98>
1a001a98:	4817      	ldr	r0, [pc, #92]	; (1a001af8 <Chip_Clock_GetClockInputHz+0xa4>)
1a001a9a:	bd08      	pop	{r3, pc}
1a001a9c:	4b17      	ldr	r3, [pc, #92]	; (1a001afc <Chip_Clock_GetClockInputHz+0xa8>)
1a001a9e:	6818      	ldr	r0, [r3, #0]
1a001aa0:	bd08      	pop	{r3, pc}
1a001aa2:	4b17      	ldr	r3, [pc, #92]	; (1a001b00 <Chip_Clock_GetClockInputHz+0xac>)
1a001aa4:	6818      	ldr	r0, [r3, #0]
1a001aa6:	bd08      	pop	{r3, pc}
1a001aa8:	4b16      	ldr	r3, [pc, #88]	; (1a001b04 <Chip_Clock_GetClockInputHz+0xb0>)
1a001aaa:	6818      	ldr	r0, [r3, #0]
1a001aac:	bd08      	pop	{r3, pc}
1a001aae:	4b15      	ldr	r3, [pc, #84]	; (1a001b04 <Chip_Clock_GetClockInputHz+0xb0>)
1a001ab0:	6858      	ldr	r0, [r3, #4]
1a001ab2:	bd08      	pop	{r3, pc}
1a001ab4:	f000 f916 	bl	1a001ce4 <Chip_Clock_GetMainPLLHz>
1a001ab8:	bd08      	pop	{r3, pc}
1a001aba:	2100      	movs	r1, #0
1a001abc:	f000 f946 	bl	1a001d4c <Chip_Clock_GetDivRate>
1a001ac0:	bd08      	pop	{r3, pc}
1a001ac2:	2101      	movs	r1, #1
1a001ac4:	f000 f942 	bl	1a001d4c <Chip_Clock_GetDivRate>
1a001ac8:	bd08      	pop	{r3, pc}
1a001aca:	2102      	movs	r1, #2
1a001acc:	f000 f93e 	bl	1a001d4c <Chip_Clock_GetDivRate>
1a001ad0:	bd08      	pop	{r3, pc}
1a001ad2:	2103      	movs	r1, #3
1a001ad4:	f000 f93a 	bl	1a001d4c <Chip_Clock_GetDivRate>
1a001ad8:	bd08      	pop	{r3, pc}
1a001ada:	2104      	movs	r1, #4
1a001adc:	f000 f936 	bl	1a001d4c <Chip_Clock_GetDivRate>
1a001ae0:	bd08      	pop	{r3, pc}
1a001ae2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a001ae6:	bd08      	pop	{r3, pc}
1a001ae8:	4803      	ldr	r0, [pc, #12]	; (1a001af8 <Chip_Clock_GetClockInputHz+0xa4>)
1a001aea:	bd08      	pop	{r3, pc}
1a001aec:	4806      	ldr	r0, [pc, #24]	; (1a001b08 <Chip_Clock_GetClockInputHz+0xb4>)
1a001aee:	bd08      	pop	{r3, pc}
1a001af0:	00b71b00 	.word	0x00b71b00
1a001af4:	40043000 	.word	0x40043000
1a001af8:	017d7840 	.word	0x017d7840
1a001afc:	1a0030b4 	.word	0x1a0030b4
1a001b00:	1a0030b0 	.word	0x1a0030b0
1a001b04:	100000ec 	.word	0x100000ec
1a001b08:	02faf080 	.word	0x02faf080

1a001b0c <Chip_Clock_CalcMainPLLValue>:
1a001b0c:	b538      	push	{r3, r4, r5, lr}
1a001b0e:	4605      	mov	r5, r0
1a001b10:	460c      	mov	r4, r1
1a001b12:	7908      	ldrb	r0, [r1, #4]
1a001b14:	f7ff ff9e 	bl	1a001a54 <Chip_Clock_GetClockInputHz>
1a001b18:	6160      	str	r0, [r4, #20]
1a001b1a:	4b19      	ldr	r3, [pc, #100]	; (1a001b80 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001b1c:	442b      	add	r3, r5
1a001b1e:	4a19      	ldr	r2, [pc, #100]	; (1a001b84 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001b20:	4293      	cmp	r3, r2
1a001b22:	d821      	bhi.n	1a001b68 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001b24:	b318      	cbz	r0, 1a001b6e <Chip_Clock_CalcMainPLLValue+0x62>
1a001b26:	2380      	movs	r3, #128	; 0x80
1a001b28:	6023      	str	r3, [r4, #0]
1a001b2a:	2300      	movs	r3, #0
1a001b2c:	60a3      	str	r3, [r4, #8]
1a001b2e:	60e3      	str	r3, [r4, #12]
1a001b30:	fbb5 f3f0 	udiv	r3, r5, r0
1a001b34:	6123      	str	r3, [r4, #16]
1a001b36:	4a14      	ldr	r2, [pc, #80]	; (1a001b88 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001b38:	4295      	cmp	r5, r2
1a001b3a:	d903      	bls.n	1a001b44 <Chip_Clock_CalcMainPLLValue+0x38>
1a001b3c:	fb03 f000 	mul.w	r0, r3, r0
1a001b40:	42a8      	cmp	r0, r5
1a001b42:	d007      	beq.n	1a001b54 <Chip_Clock_CalcMainPLLValue+0x48>
1a001b44:	4628      	mov	r0, r5
1a001b46:	4621      	mov	r1, r4
1a001b48:	f7ff fe58 	bl	1a0017fc <pll_get_frac>
1a001b4c:	68a3      	ldr	r3, [r4, #8]
1a001b4e:	b18b      	cbz	r3, 1a001b74 <Chip_Clock_CalcMainPLLValue+0x68>
1a001b50:	3b01      	subs	r3, #1
1a001b52:	60a3      	str	r3, [r4, #8]
1a001b54:	6923      	ldr	r3, [r4, #16]
1a001b56:	b183      	cbz	r3, 1a001b7a <Chip_Clock_CalcMainPLLValue+0x6e>
1a001b58:	68e2      	ldr	r2, [r4, #12]
1a001b5a:	b10a      	cbz	r2, 1a001b60 <Chip_Clock_CalcMainPLLValue+0x54>
1a001b5c:	3a01      	subs	r2, #1
1a001b5e:	60e2      	str	r2, [r4, #12]
1a001b60:	3b01      	subs	r3, #1
1a001b62:	6123      	str	r3, [r4, #16]
1a001b64:	2000      	movs	r0, #0
1a001b66:	bd38      	pop	{r3, r4, r5, pc}
1a001b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b6c:	bd38      	pop	{r3, r4, r5, pc}
1a001b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b72:	bd38      	pop	{r3, r4, r5, pc}
1a001b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b78:	bd38      	pop	{r3, r4, r5, pc}
1a001b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b7e:	bd38      	pop	{r3, r4, r5, pc}
1a001b80:	ff6b3a10 	.word	0xff6b3a10
1a001b84:	0b940510 	.word	0x0b940510
1a001b88:	094c5eff 	.word	0x094c5eff

1a001b8c <Chip_Clock_SetupMainPLLMult>:
1a001b8c:	b570      	push	{r4, r5, r6, lr}
1a001b8e:	b082      	sub	sp, #8
1a001b90:	4605      	mov	r5, r0
1a001b92:	460c      	mov	r4, r1
1a001b94:	23fa      	movs	r3, #250	; 0xfa
1a001b96:	9301      	str	r3, [sp, #4]
1a001b98:	f7ff ff5c 	bl	1a001a54 <Chip_Clock_GetClockInputHz>
1a001b9c:	4b1e      	ldr	r3, [pc, #120]	; (1a001c18 <Chip_Clock_SetupMainPLLMult+0x8c>)
1a001b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1a001ba0:	fb04 f000 	mul.w	r0, r4, r0
1a001ba4:	1e61      	subs	r1, r4, #1
1a001ba6:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
1a001baa:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
1a001bae:	4b1b      	ldr	r3, [pc, #108]	; (1a001c1c <Chip_Clock_SetupMainPLLMult+0x90>)
1a001bb0:	4013      	ands	r3, r2
1a001bb2:	f443 6600 	orr.w	r6, r3, #2048	; 0x800
1a001bb6:	4b1a      	ldr	r3, [pc, #104]	; (1a001c20 <Chip_Clock_SetupMainPLLMult+0x94>)
1a001bb8:	4298      	cmp	r0, r3
1a001bba:	d903      	bls.n	1a001bc4 <Chip_Clock_SetupMainPLLMult+0x38>
1a001bbc:	e012      	b.n	1a001be4 <Chip_Clock_SetupMainPLLMult+0x58>
1a001bbe:	3401      	adds	r4, #1
1a001bc0:	0052      	lsls	r2, r2, #1
1a001bc2:	e001      	b.n	1a001bc8 <Chip_Clock_SetupMainPLLMult+0x3c>
1a001bc4:	2201      	movs	r2, #1
1a001bc6:	2400      	movs	r4, #0
1a001bc8:	fb00 f302 	mul.w	r3, r0, r2
1a001bcc:	4d14      	ldr	r5, [pc, #80]	; (1a001c20 <Chip_Clock_SetupMainPLLMult+0x94>)
1a001bce:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
1a001bd2:	d2f4      	bcs.n	1a001bbe <Chip_Clock_SetupMainPLLMult+0x32>
1a001bd4:	0224      	lsls	r4, r4, #8
1a001bd6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a001bda:	ea44 0306 	orr.w	r3, r4, r6
1a001bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001be2:	e00e      	b.n	1a001c02 <Chip_Clock_SetupMainPLLMult+0x76>
1a001be4:	4b0f      	ldr	r3, [pc, #60]	; (1a001c24 <Chip_Clock_SetupMainPLLMult+0x98>)
1a001be6:	4298      	cmp	r0, r3
1a001be8:	d804      	bhi.n	1a001bf4 <Chip_Clock_SetupMainPLLMult+0x68>
1a001bea:	ea46 4301 	orr.w	r3, r6, r1, lsl #16
1a001bee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
1a001bf2:	e006      	b.n	1a001c02 <Chip_Clock_SetupMainPLLMult+0x76>
1a001bf4:	4a08      	ldr	r2, [pc, #32]	; (1a001c18 <Chip_Clock_SetupMainPLLMult+0x8c>)
1a001bf6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001bf8:	f043 0301 	orr.w	r3, r3, #1
1a001bfc:	6453      	str	r3, [r2, #68]	; 0x44
1a001bfe:	2000      	movs	r0, #0
1a001c00:	e008      	b.n	1a001c14 <Chip_Clock_SetupMainPLLMult+0x88>
1a001c02:	f023 0301 	bic.w	r3, r3, #1
1a001c06:	4a04      	ldr	r2, [pc, #16]	; (1a001c18 <Chip_Clock_SetupMainPLLMult+0x8c>)
1a001c08:	6453      	str	r3, [r2, #68]	; 0x44
1a001c0a:	9b01      	ldr	r3, [sp, #4]
1a001c0c:	1e5a      	subs	r2, r3, #1
1a001c0e:	9201      	str	r2, [sp, #4]
1a001c10:	2b00      	cmp	r3, #0
1a001c12:	d1fa      	bne.n	1a001c0a <Chip_Clock_SetupMainPLLMult+0x7e>
1a001c14:	b002      	add	sp, #8
1a001c16:	bd70      	pop	{r4, r5, r6, pc}
1a001c18:	40050000 	.word	0x40050000
1a001c1c:	ff00cc3d 	.word	0xff00cc3d
1a001c20:	094c5eff 	.word	0x094c5eff
1a001c24:	1312cfff 	.word	0x1312cfff

1a001c28 <Chip_Clock_SetupMainPLLHz>:
1a001c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001c2c:	4682      	mov	sl, r0
1a001c2e:	460f      	mov	r7, r1
1a001c30:	4690      	mov	r8, r2
1a001c32:	461e      	mov	r6, r3
1a001c34:	f7ff ff0e 	bl	1a001a54 <Chip_Clock_GetClockInputHz>
1a001c38:	4605      	mov	r5, r0
1a001c3a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
1a001c3e:	d033      	beq.n	1a001ca8 <Chip_Clock_SetupMainPLLHz+0x80>
1a001c40:	fbb8 f9f0 	udiv	r9, r8, r0
1a001c44:	4649      	mov	r1, r9
1a001c46:	463a      	mov	r2, r7
1a001c48:	4633      	mov	r3, r6
1a001c4a:	f7ff fe59 	bl	1a001900 <Chip_Clock_TestMainPLLMultiplier>
1a001c4e:	4604      	mov	r4, r0
1a001c50:	f109 0b01 	add.w	fp, r9, #1
1a001c54:	4628      	mov	r0, r5
1a001c56:	4659      	mov	r1, fp
1a001c58:	463a      	mov	r2, r7
1a001c5a:	4633      	mov	r3, r6
1a001c5c:	f7ff fe50 	bl	1a001900 <Chip_Clock_TestMainPLLMultiplier>
1a001c60:	b134      	cbz	r4, 1a001c70 <Chip_Clock_SetupMainPLLHz+0x48>
1a001c62:	b928      	cbnz	r0, 1a001c70 <Chip_Clock_SetupMainPLLHz+0x48>
1a001c64:	4650      	mov	r0, sl
1a001c66:	4649      	mov	r1, r9
1a001c68:	f7ff ff90 	bl	1a001b8c <Chip_Clock_SetupMainPLLMult>
1a001c6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001c70:	b934      	cbnz	r4, 1a001c80 <Chip_Clock_SetupMainPLLHz+0x58>
1a001c72:	b128      	cbz	r0, 1a001c80 <Chip_Clock_SetupMainPLLHz+0x58>
1a001c74:	4650      	mov	r0, sl
1a001c76:	4659      	mov	r1, fp
1a001c78:	f7ff ff88 	bl	1a001b8c <Chip_Clock_SetupMainPLLMult>
1a001c7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001c80:	b194      	cbz	r4, 1a001ca8 <Chip_Clock_SetupMainPLLHz+0x80>
1a001c82:	b188      	cbz	r0, 1a001ca8 <Chip_Clock_SetupMainPLLHz+0x80>
1a001c84:	ebc4 0408 	rsb	r4, r4, r8
1a001c88:	ebc8 0000 	rsb	r0, r8, r0
1a001c8c:	4284      	cmp	r4, r0
1a001c8e:	d905      	bls.n	1a001c9c <Chip_Clock_SetupMainPLLHz+0x74>
1a001c90:	4650      	mov	r0, sl
1a001c92:	4649      	mov	r1, r9
1a001c94:	f7ff ff7a 	bl	1a001b8c <Chip_Clock_SetupMainPLLMult>
1a001c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001c9c:	4650      	mov	r0, sl
1a001c9e:	4659      	mov	r1, fp
1a001ca0:	f7ff ff74 	bl	1a001b8c <Chip_Clock_SetupMainPLLMult>
1a001ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001ca8:	fbb7 f4f5 	udiv	r4, r7, r5
1a001cac:	fbb6 f8f5 	udiv	r8, r6, r5
1a001cb0:	f04f 0900 	mov.w	r9, #0
1a001cb4:	4628      	mov	r0, r5
1a001cb6:	4621      	mov	r1, r4
1a001cb8:	463a      	mov	r2, r7
1a001cba:	4633      	mov	r3, r6
1a001cbc:	f7ff fe20 	bl	1a001900 <Chip_Clock_TestMainPLLMultiplier>
1a001cc0:	b100      	cbz	r0, 1a001cc4 <Chip_Clock_SetupMainPLLHz+0x9c>
1a001cc2:	46a1      	mov	r9, r4
1a001cc4:	4544      	cmp	r4, r8
1a001cc6:	d201      	bcs.n	1a001ccc <Chip_Clock_SetupMainPLLHz+0xa4>
1a001cc8:	3401      	adds	r4, #1
1a001cca:	e7f3      	b.n	1a001cb4 <Chip_Clock_SetupMainPLLHz+0x8c>
1a001ccc:	f1b9 0f00 	cmp.w	r9, #0
1a001cd0:	d005      	beq.n	1a001cde <Chip_Clock_SetupMainPLLHz+0xb6>
1a001cd2:	4650      	mov	r0, sl
1a001cd4:	4649      	mov	r1, r9
1a001cd6:	f7ff ff59 	bl	1a001b8c <Chip_Clock_SetupMainPLLMult>
1a001cda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001cde:	2000      	movs	r0, #0
1a001ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a001ce4 <Chip_Clock_GetMainPLLHz>:
1a001ce4:	b570      	push	{r4, r5, r6, lr}
1a001ce6:	b082      	sub	sp, #8
1a001ce8:	4d16      	ldr	r5, [pc, #88]	; (1a001d44 <Chip_Clock_GetMainPLLHz+0x60>)
1a001cea:	6c6c      	ldr	r4, [r5, #68]	; 0x44
1a001cec:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001cf0:	f7ff feb0 	bl	1a001a54 <Chip_Clock_GetClockInputHz>
1a001cf4:	4606      	mov	r6, r0
1a001cf6:	4b14      	ldr	r3, [pc, #80]	; (1a001d48 <Chip_Clock_GetMainPLLHz+0x64>)
1a001cf8:	6818      	ldr	r0, [r3, #0]
1a001cfa:	9001      	str	r0, [sp, #4]
1a001cfc:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a001cfe:	f010 0001 	ands.w	r0, r0, #1
1a001d02:	d01d      	beq.n	1a001d40 <Chip_Clock_GetMainPLLHz+0x5c>
1a001d04:	f3c4 4007 	ubfx	r0, r4, #16, #8
1a001d08:	f3c4 3201 	ubfx	r2, r4, #12, #2
1a001d0c:	f3c4 2101 	ubfx	r1, r4, #8, #2
1a001d10:	f3c4 1580 	ubfx	r5, r4, #6, #1
1a001d14:	1c43      	adds	r3, r0, #1
1a001d16:	3201      	adds	r2, #1
1a001d18:	a802      	add	r0, sp, #8
1a001d1a:	4401      	add	r1, r0
1a001d1c:	f811 0c04 	ldrb.w	r0, [r1, #-4]
1a001d20:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001d24:	d100      	bne.n	1a001d28 <Chip_Clock_GetMainPLLHz+0x44>
1a001d26:	b125      	cbz	r5, 1a001d32 <Chip_Clock_GetMainPLLHz+0x4e>
1a001d28:	fbb6 f0f2 	udiv	r0, r6, r2
1a001d2c:	fb03 f000 	mul.w	r0, r3, r0
1a001d30:	e006      	b.n	1a001d40 <Chip_Clock_GetMainPLLHz+0x5c>
1a001d32:	0040      	lsls	r0, r0, #1
1a001d34:	fbb3 f3f0 	udiv	r3, r3, r0
1a001d38:	fbb6 f0f2 	udiv	r0, r6, r2
1a001d3c:	fb00 f003 	mul.w	r0, r0, r3
1a001d40:	b002      	add	sp, #8
1a001d42:	bd70      	pop	{r4, r5, r6, pc}
1a001d44:	40050000 	.word	0x40050000
1a001d48:	1a0031a4 	.word	0x1a0031a4

1a001d4c <Chip_Clock_GetDivRate>:
1a001d4c:	b538      	push	{r3, r4, r5, lr}
1a001d4e:	460c      	mov	r4, r1
1a001d50:	4608      	mov	r0, r1
1a001d52:	f7ff fe63 	bl	1a001a1c <Chip_Clock_GetDividerSource>
1a001d56:	4605      	mov	r5, r0
1a001d58:	4620      	mov	r0, r4
1a001d5a:	f7ff fe6d 	bl	1a001a38 <Chip_Clock_GetDividerDivisor>
1a001d5e:	4604      	mov	r4, r0
1a001d60:	4628      	mov	r0, r5
1a001d62:	f7ff fe77 	bl	1a001a54 <Chip_Clock_GetClockInputHz>
1a001d66:	3401      	adds	r4, #1
1a001d68:	fbb0 f0f4 	udiv	r0, r0, r4
1a001d6c:	bd38      	pop	{r3, r4, r5, pc}
1a001d6e:	bf00      	nop

1a001d70 <Chip_Clock_SetBaseClock>:
1a001d70:	b430      	push	{r4, r5}
1a001d72:	0085      	lsls	r5, r0, #2
1a001d74:	4c0d      	ldr	r4, [pc, #52]	; (1a001dac <Chip_Clock_SetBaseClock+0x3c>)
1a001d76:	5965      	ldr	r5, [r4, r5]
1a001d78:	281b      	cmp	r0, #27
1a001d7a:	d80f      	bhi.n	1a001d9c <Chip_Clock_SetBaseClock+0x2c>
1a001d7c:	2911      	cmp	r1, #17
1a001d7e:	d012      	beq.n	1a001da6 <Chip_Clock_SetBaseClock+0x36>
1a001d80:	4c0b      	ldr	r4, [pc, #44]	; (1a001db0 <Chip_Clock_SetBaseClock+0x40>)
1a001d82:	402c      	ands	r4, r5
1a001d84:	b10a      	cbz	r2, 1a001d8a <Chip_Clock_SetBaseClock+0x1a>
1a001d86:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
1a001d8a:	b10b      	cbz	r3, 1a001d90 <Chip_Clock_SetBaseClock+0x20>
1a001d8c:	f044 0401 	orr.w	r4, r4, #1
1a001d90:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
1a001d94:	0080      	lsls	r0, r0, #2
1a001d96:	4b05      	ldr	r3, [pc, #20]	; (1a001dac <Chip_Clock_SetBaseClock+0x3c>)
1a001d98:	501c      	str	r4, [r3, r0]
1a001d9a:	e004      	b.n	1a001da6 <Chip_Clock_SetBaseClock+0x36>
1a001d9c:	f045 0501 	orr.w	r5, r5, #1
1a001da0:	0080      	lsls	r0, r0, #2
1a001da2:	4b02      	ldr	r3, [pc, #8]	; (1a001dac <Chip_Clock_SetBaseClock+0x3c>)
1a001da4:	501d      	str	r5, [r3, r0]
1a001da6:	bc30      	pop	{r4, r5}
1a001da8:	4770      	bx	lr
1a001daa:	bf00      	nop
1a001dac:	4005005c 	.word	0x4005005c
1a001db0:	e0fff7fe 	.word	0xe0fff7fe

1a001db4 <Chip_Clock_GetBaseClockOpts>:
1a001db4:	b430      	push	{r4, r5}
1a001db6:	0085      	lsls	r5, r0, #2
1a001db8:	4c0a      	ldr	r4, [pc, #40]	; (1a001de4 <Chip_Clock_GetBaseClockOpts+0x30>)
1a001dba:	5964      	ldr	r4, [r4, r5]
1a001dbc:	f3c4 6504 	ubfx	r5, r4, #24, #5
1a001dc0:	281b      	cmp	r0, #27
1a001dc2:	d807      	bhi.n	1a001dd4 <Chip_Clock_GetBaseClockOpts+0x20>
1a001dc4:	700d      	strb	r5, [r1, #0]
1a001dc6:	f3c4 21c0 	ubfx	r1, r4, #11, #1
1a001dca:	7011      	strb	r1, [r2, #0]
1a001dcc:	f004 0401 	and.w	r4, r4, #1
1a001dd0:	701c      	strb	r4, [r3, #0]
1a001dd2:	e004      	b.n	1a001dde <Chip_Clock_GetBaseClockOpts+0x2a>
1a001dd4:	2011      	movs	r0, #17
1a001dd6:	7008      	strb	r0, [r1, #0]
1a001dd8:	2101      	movs	r1, #1
1a001dda:	7019      	strb	r1, [r3, #0]
1a001ddc:	7011      	strb	r1, [r2, #0]
1a001dde:	bc30      	pop	{r4, r5}
1a001de0:	4770      	bx	lr
1a001de2:	bf00      	nop
1a001de4:	4005005c 	.word	0x4005005c

1a001de8 <Chip_Clock_EnableBaseClock>:
1a001de8:	281b      	cmp	r0, #27
1a001dea:	d805      	bhi.n	1a001df8 <Chip_Clock_EnableBaseClock+0x10>
1a001dec:	0080      	lsls	r0, r0, #2
1a001dee:	4b03      	ldr	r3, [pc, #12]	; (1a001dfc <Chip_Clock_EnableBaseClock+0x14>)
1a001df0:	581a      	ldr	r2, [r3, r0]
1a001df2:	f022 0201 	bic.w	r2, r2, #1
1a001df6:	501a      	str	r2, [r3, r0]
1a001df8:	4770      	bx	lr
1a001dfa:	bf00      	nop
1a001dfc:	4005005c 	.word	0x4005005c

1a001e00 <Chip_Clock_DisableBaseClock>:
1a001e00:	281b      	cmp	r0, #27
1a001e02:	d805      	bhi.n	1a001e10 <Chip_Clock_DisableBaseClock+0x10>
1a001e04:	0080      	lsls	r0, r0, #2
1a001e06:	4b03      	ldr	r3, [pc, #12]	; (1a001e14 <Chip_Clock_DisableBaseClock+0x14>)
1a001e08:	581a      	ldr	r2, [r3, r0]
1a001e0a:	f042 0201 	orr.w	r2, r2, #1
1a001e0e:	501a      	str	r2, [r3, r0]
1a001e10:	4770      	bx	lr
1a001e12:	bf00      	nop
1a001e14:	4005005c 	.word	0x4005005c

1a001e18 <Chip_Clock_IsBaseClockEnabled>:
1a001e18:	281b      	cmp	r0, #27
1a001e1a:	d808      	bhi.n	1a001e2e <Chip_Clock_IsBaseClockEnabled+0x16>
1a001e1c:	0080      	lsls	r0, r0, #2
1a001e1e:	4b05      	ldr	r3, [pc, #20]	; (1a001e34 <Chip_Clock_IsBaseClockEnabled+0x1c>)
1a001e20:	581b      	ldr	r3, [r3, r0]
1a001e22:	f013 0f01 	tst.w	r3, #1
1a001e26:	bf0c      	ite	eq
1a001e28:	2001      	moveq	r0, #1
1a001e2a:	2000      	movne	r0, #0
1a001e2c:	4770      	bx	lr
1a001e2e:	2000      	movs	r0, #0
1a001e30:	4770      	bx	lr
1a001e32:	bf00      	nop
1a001e34:	4005005c 	.word	0x4005005c

1a001e38 <Chip_Clock_GetBaseClock>:
1a001e38:	281b      	cmp	r0, #27
1a001e3a:	d808      	bhi.n	1a001e4e <Chip_Clock_GetBaseClock+0x16>
1a001e3c:	0080      	lsls	r0, r0, #2
1a001e3e:	4b06      	ldr	r3, [pc, #24]	; (1a001e58 <Chip_Clock_GetBaseClock+0x20>)
1a001e40:	5818      	ldr	r0, [r3, r0]
1a001e42:	f010 0f01 	tst.w	r0, #1
1a001e46:	d104      	bne.n	1a001e52 <Chip_Clock_GetBaseClock+0x1a>
1a001e48:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001e4c:	4770      	bx	lr
1a001e4e:	2011      	movs	r0, #17
1a001e50:	4770      	bx	lr
1a001e52:	2011      	movs	r0, #17
1a001e54:	4770      	bx	lr
1a001e56:	bf00      	nop
1a001e58:	4005005c 	.word	0x4005005c

1a001e5c <Chip_Clock_GetBaseClocktHz>:
1a001e5c:	b508      	push	{r3, lr}
1a001e5e:	f7ff ffeb 	bl	1a001e38 <Chip_Clock_GetBaseClock>
1a001e62:	f7ff fdf7 	bl	1a001a54 <Chip_Clock_GetClockInputHz>
1a001e66:	bd08      	pop	{r3, pc}

1a001e68 <Chip_Clock_EnableOpts>:
1a001e68:	b909      	cbnz	r1, 1a001e6e <Chip_Clock_EnableOpts+0x6>
1a001e6a:	2101      	movs	r1, #1
1a001e6c:	e000      	b.n	1a001e70 <Chip_Clock_EnableOpts+0x8>
1a001e6e:	2103      	movs	r1, #3
1a001e70:	b10a      	cbz	r2, 1a001e76 <Chip_Clock_EnableOpts+0xe>
1a001e72:	f041 0104 	orr.w	r1, r1, #4
1a001e76:	2b02      	cmp	r3, #2
1a001e78:	d101      	bne.n	1a001e7e <Chip_Clock_EnableOpts+0x16>
1a001e7a:	f041 0120 	orr.w	r1, r1, #32
1a001e7e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001e82:	d305      	bcc.n	1a001e90 <Chip_Clock_EnableOpts+0x28>
1a001e84:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001e88:	4b04      	ldr	r3, [pc, #16]	; (1a001e9c <Chip_Clock_EnableOpts+0x34>)
1a001e8a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001e8e:	4770      	bx	lr
1a001e90:	3020      	adds	r0, #32
1a001e92:	4b03      	ldr	r3, [pc, #12]	; (1a001ea0 <Chip_Clock_EnableOpts+0x38>)
1a001e94:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001e98:	4770      	bx	lr
1a001e9a:	bf00      	nop
1a001e9c:	40052000 	.word	0x40052000
1a001ea0:	40051000 	.word	0x40051000

1a001ea4 <Chip_Clock_Enable>:
1a001ea4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001ea8:	d309      	bcc.n	1a001ebe <Chip_Clock_Enable+0x1a>
1a001eaa:	4a09      	ldr	r2, [pc, #36]	; (1a001ed0 <Chip_Clock_Enable+0x2c>)
1a001eac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001eb0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001eb4:	f043 0301 	orr.w	r3, r3, #1
1a001eb8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001ebc:	4770      	bx	lr
1a001ebe:	4a05      	ldr	r2, [pc, #20]	; (1a001ed4 <Chip_Clock_Enable+0x30>)
1a001ec0:	3020      	adds	r0, #32
1a001ec2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001ec6:	f043 0301 	orr.w	r3, r3, #1
1a001eca:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001ece:	4770      	bx	lr
1a001ed0:	40052000 	.word	0x40052000
1a001ed4:	40051000 	.word	0x40051000

1a001ed8 <Chip_Clock_RTCEnable>:
1a001ed8:	4b04      	ldr	r3, [pc, #16]	; (1a001eec <Chip_Clock_RTCEnable+0x14>)
1a001eda:	685a      	ldr	r2, [r3, #4]
1a001edc:	f022 020c 	bic.w	r2, r2, #12
1a001ee0:	605a      	str	r2, [r3, #4]
1a001ee2:	685a      	ldr	r2, [r3, #4]
1a001ee4:	f042 0203 	orr.w	r2, r2, #3
1a001ee8:	605a      	str	r2, [r3, #4]
1a001eea:	4770      	bx	lr
1a001eec:	40043000 	.word	0x40043000

1a001ef0 <Chip_Clock_Disable>:
1a001ef0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001ef4:	d309      	bcc.n	1a001f0a <Chip_Clock_Disable+0x1a>
1a001ef6:	4a09      	ldr	r2, [pc, #36]	; (1a001f1c <Chip_Clock_Disable+0x2c>)
1a001ef8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001efc:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001f00:	f023 0301 	bic.w	r3, r3, #1
1a001f04:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001f08:	4770      	bx	lr
1a001f0a:	4a05      	ldr	r2, [pc, #20]	; (1a001f20 <Chip_Clock_Disable+0x30>)
1a001f0c:	3020      	adds	r0, #32
1a001f0e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001f12:	f023 0301 	bic.w	r3, r3, #1
1a001f16:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001f1a:	4770      	bx	lr
1a001f1c:	40052000 	.word	0x40052000
1a001f20:	40051000 	.word	0x40051000

1a001f24 <Chip_Clock_StartPowerDown>:
1a001f24:	2301      	movs	r3, #1
1a001f26:	4a03      	ldr	r2, [pc, #12]	; (1a001f34 <Chip_Clock_StartPowerDown+0x10>)
1a001f28:	6013      	str	r3, [r2, #0]
1a001f2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a001f2e:	6013      	str	r3, [r2, #0]
1a001f30:	4770      	bx	lr
1a001f32:	bf00      	nop
1a001f34:	40051000 	.word	0x40051000

1a001f38 <Chip_Clock_ClearPowerDown>:
1a001f38:	2300      	movs	r3, #0
1a001f3a:	4a03      	ldr	r2, [pc, #12]	; (1a001f48 <Chip_Clock_ClearPowerDown+0x10>)
1a001f3c:	6013      	str	r3, [r2, #0]
1a001f3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a001f42:	6013      	str	r3, [r2, #0]
1a001f44:	4770      	bx	lr
1a001f46:	bf00      	nop
1a001f48:	40051000 	.word	0x40051000

1a001f4c <Chip_Clock_GetRate>:
1a001f4c:	b510      	push	{r4, lr}
1a001f4e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001f52:	d305      	bcc.n	1a001f60 <Chip_Clock_GetRate+0x14>
1a001f54:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001f58:	4a0d      	ldr	r2, [pc, #52]	; (1a001f90 <Chip_Clock_GetRate+0x44>)
1a001f5a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001f5e:	e004      	b.n	1a001f6a <Chip_Clock_GetRate+0x1e>
1a001f60:	f100 0320 	add.w	r3, r0, #32
1a001f64:	4a0b      	ldr	r2, [pc, #44]	; (1a001f94 <Chip_Clock_GetRate+0x48>)
1a001f66:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001f6a:	f014 0f01 	tst.w	r4, #1
1a001f6e:	d00c      	beq.n	1a001f8a <Chip_Clock_GetRate+0x3e>
1a001f70:	f7ff fcd8 	bl	1a001924 <Chip_Clock_FindBaseClock>
1a001f74:	f7ff ff72 	bl	1a001e5c <Chip_Clock_GetBaseClocktHz>
1a001f78:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001f7c:	d101      	bne.n	1a001f82 <Chip_Clock_GetRate+0x36>
1a001f7e:	2301      	movs	r3, #1
1a001f80:	e000      	b.n	1a001f84 <Chip_Clock_GetRate+0x38>
1a001f82:	2302      	movs	r3, #2
1a001f84:	fbb0 f0f3 	udiv	r0, r0, r3
1a001f88:	bd10      	pop	{r4, pc}
1a001f8a:	2000      	movs	r0, #0
1a001f8c:	bd10      	pop	{r4, pc}
1a001f8e:	bf00      	nop
1a001f90:	40052000 	.word	0x40052000
1a001f94:	40051000 	.word	0x40051000

1a001f98 <Chip_Clock_GetEMCRate>:
1a001f98:	b508      	push	{r3, lr}
1a001f9a:	2066      	movs	r0, #102	; 0x66
1a001f9c:	f7ff ffd6 	bl	1a001f4c <Chip_Clock_GetRate>
1a001fa0:	4b07      	ldr	r3, [pc, #28]	; (1a001fc0 <Chip_Clock_GetEMCRate+0x28>)
1a001fa2:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
1a001fa6:	f3c3 63c2 	ubfx	r3, r3, #27, #3
1a001faa:	2b01      	cmp	r3, #1
1a001fac:	d106      	bne.n	1a001fbc <Chip_Clock_GetEMCRate+0x24>
1a001fae:	4b05      	ldr	r3, [pc, #20]	; (1a001fc4 <Chip_Clock_GetEMCRate+0x2c>)
1a001fb0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001fb4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
1a001fb8:	d000      	beq.n	1a001fbc <Chip_Clock_GetEMCRate+0x24>
1a001fba:	0840      	lsrs	r0, r0, #1
1a001fbc:	bd08      	pop	{r3, pc}
1a001fbe:	bf00      	nop
1a001fc0:	40051000 	.word	0x40051000
1a001fc4:	40043000 	.word	0x40043000

1a001fc8 <Chip_Clock_SetupPLL>:
1a001fc8:	b410      	push	{r4}
1a001fca:	6813      	ldr	r3, [r2, #0]
1a001fcc:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
1a001fd0:	4b0b      	ldr	r3, [pc, #44]	; (1a002000 <Chip_Clock_SetupPLL+0x38>)
1a001fd2:	eb03 1401 	add.w	r4, r3, r1, lsl #4
1a001fd6:	6220      	str	r0, [r4, #32]
1a001fd8:	6850      	ldr	r0, [r2, #4]
1a001fda:	1c8c      	adds	r4, r1, #2
1a001fdc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
1a001fe0:	6058      	str	r0, [r3, #4]
1a001fe2:	6890      	ldr	r0, [r2, #8]
1a001fe4:	6098      	str	r0, [r3, #8]
1a001fe6:	2901      	cmp	r1, #1
1a001fe8:	d102      	bne.n	1a001ff0 <Chip_Clock_SetupPLL+0x28>
1a001fea:	68d0      	ldr	r0, [r2, #12]
1a001fec:	4b04      	ldr	r3, [pc, #16]	; (1a002000 <Chip_Clock_SetupPLL+0x38>)
1a001fee:	63d8      	str	r0, [r3, #60]	; 0x3c
1a001ff0:	6912      	ldr	r2, [r2, #16]
1a001ff2:	4b04      	ldr	r3, [pc, #16]	; (1a002004 <Chip_Clock_SetupPLL+0x3c>)
1a001ff4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
1a001ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001ffc:	4770      	bx	lr
1a001ffe:	bf00      	nop
1a002000:	40050000 	.word	0x40050000
1a002004:	100000ec 	.word	0x100000ec

1a002008 <Chip_Clock_EnablePLL>:
1a002008:	0100      	lsls	r0, r0, #4
1a00200a:	4b03      	ldr	r3, [pc, #12]	; (1a002018 <Chip_Clock_EnablePLL+0x10>)
1a00200c:	581a      	ldr	r2, [r3, r0]
1a00200e:	f022 0201 	bic.w	r2, r2, #1
1a002012:	501a      	str	r2, [r3, r0]
1a002014:	4770      	bx	lr
1a002016:	bf00      	nop
1a002018:	40050020 	.word	0x40050020

1a00201c <Chip_Clock_DisablePLL>:
1a00201c:	0100      	lsls	r0, r0, #4
1a00201e:	4b03      	ldr	r3, [pc, #12]	; (1a00202c <Chip_Clock_DisablePLL+0x10>)
1a002020:	581a      	ldr	r2, [r3, r0]
1a002022:	f042 0201 	orr.w	r2, r2, #1
1a002026:	501a      	str	r2, [r3, r0]
1a002028:	4770      	bx	lr
1a00202a:	bf00      	nop
1a00202c:	40050020 	.word	0x40050020

1a002030 <Chip_Clock_GetPLLStatus>:
1a002030:	0100      	lsls	r0, r0, #4
1a002032:	4b01      	ldr	r3, [pc, #4]	; (1a002038 <Chip_Clock_GetPLLStatus+0x8>)
1a002034:	5818      	ldr	r0, [r3, r0]
1a002036:	4770      	bx	lr
1a002038:	4005001c 	.word	0x4005001c

1a00203c <fpuInit>:
1a00203c:	b084      	sub	sp, #16
1a00203e:	4b10      	ldr	r3, [pc, #64]	; (1a002080 <fpuInit+0x44>)
1a002040:	681b      	ldr	r3, [r3, #0]
1a002042:	9302      	str	r3, [sp, #8]
1a002044:	4b0f      	ldr	r3, [pc, #60]	; (1a002084 <fpuInit+0x48>)
1a002046:	681b      	ldr	r3, [r3, #0]
1a002048:	9301      	str	r3, [sp, #4]
1a00204a:	9a02      	ldr	r2, [sp, #8]
1a00204c:	4b0e      	ldr	r3, [pc, #56]	; (1a002088 <fpuInit+0x4c>)
1a00204e:	429a      	cmp	r2, r3
1a002050:	d105      	bne.n	1a00205e <fpuInit+0x22>
1a002052:	9a01      	ldr	r2, [sp, #4]
1a002054:	4b0d      	ldr	r3, [pc, #52]	; (1a00208c <fpuInit+0x50>)
1a002056:	429a      	cmp	r2, r3
1a002058:	d003      	beq.n	1a002062 <fpuInit+0x26>
1a00205a:	2300      	movs	r3, #0
1a00205c:	e002      	b.n	1a002064 <fpuInit+0x28>
1a00205e:	2300      	movs	r3, #0
1a002060:	e000      	b.n	1a002064 <fpuInit+0x28>
1a002062:	2301      	movs	r3, #1
1a002064:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002068:	d008      	beq.n	1a00207c <fpuInit+0x40>
1a00206a:	4a09      	ldr	r2, [pc, #36]	; (1a002090 <fpuInit+0x54>)
1a00206c:	6813      	ldr	r3, [r2, #0]
1a00206e:	9303      	str	r3, [sp, #12]
1a002070:	9b03      	ldr	r3, [sp, #12]
1a002072:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002076:	9303      	str	r3, [sp, #12]
1a002078:	9b03      	ldr	r3, [sp, #12]
1a00207a:	6013      	str	r3, [r2, #0]
1a00207c:	b004      	add	sp, #16
1a00207e:	4770      	bx	lr
1a002080:	e000ef40 	.word	0xe000ef40
1a002084:	e000ef44 	.word	0xe000ef44
1a002088:	10110021 	.word	0x10110021
1a00208c:	11000011 	.word	0x11000011
1a002090:	e000ed88 	.word	0xe000ed88

1a002094 <Chip_GPIO_Init>:
1a002094:	4770      	bx	lr
1a002096:	bf00      	nop

1a002098 <Chip_GPIO_DeInit>:
1a002098:	4770      	bx	lr
1a00209a:	bf00      	nop

1a00209c <RingBuffer_Init>:
1a00209c:	6001      	str	r1, [r0, #0]
1a00209e:	6043      	str	r3, [r0, #4]
1a0020a0:	6082      	str	r2, [r0, #8]
1a0020a2:	2300      	movs	r3, #0
1a0020a4:	6103      	str	r3, [r0, #16]
1a0020a6:	60c3      	str	r3, [r0, #12]
1a0020a8:	2001      	movs	r0, #1
1a0020aa:	4770      	bx	lr

1a0020ac <RingBuffer_Insert>:
1a0020ac:	b538      	push	{r3, r4, r5, lr}
1a0020ae:	6805      	ldr	r5, [r0, #0]
1a0020b0:	68c3      	ldr	r3, [r0, #12]
1a0020b2:	6902      	ldr	r2, [r0, #16]
1a0020b4:	1a9b      	subs	r3, r3, r2
1a0020b6:	6842      	ldr	r2, [r0, #4]
1a0020b8:	4293      	cmp	r3, r2
1a0020ba:	da0d      	bge.n	1a0020d8 <RingBuffer_Insert+0x2c>
1a0020bc:	4604      	mov	r4, r0
1a0020be:	68c0      	ldr	r0, [r0, #12]
1a0020c0:	3a01      	subs	r2, #1
1a0020c2:	4010      	ands	r0, r2
1a0020c4:	68a2      	ldr	r2, [r4, #8]
1a0020c6:	fb02 5000 	mla	r0, r2, r0, r5
1a0020ca:	f000 fea5 	bl	1a002e18 <memcpy>
1a0020ce:	68e3      	ldr	r3, [r4, #12]
1a0020d0:	3301      	adds	r3, #1
1a0020d2:	60e3      	str	r3, [r4, #12]
1a0020d4:	2001      	movs	r0, #1
1a0020d6:	bd38      	pop	{r3, r4, r5, pc}
1a0020d8:	2000      	movs	r0, #0
1a0020da:	bd38      	pop	{r3, r4, r5, pc}

1a0020dc <RingBuffer_InsertMult>:
1a0020dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0020e0:	f8d0 e000 	ldr.w	lr, [r0]
1a0020e4:	68c3      	ldr	r3, [r0, #12]
1a0020e6:	6904      	ldr	r4, [r0, #16]
1a0020e8:	1b1c      	subs	r4, r3, r4
1a0020ea:	6843      	ldr	r3, [r0, #4]
1a0020ec:	429c      	cmp	r4, r3
1a0020ee:	da3a      	bge.n	1a002166 <RingBuffer_InsertMult+0x8a>
1a0020f0:	68c6      	ldr	r6, [r0, #12]
1a0020f2:	6905      	ldr	r5, [r0, #16]
1a0020f4:	1b76      	subs	r6, r6, r5
1a0020f6:	1b9e      	subs	r6, r3, r6
1a0020f8:	68c4      	ldr	r4, [r0, #12]
1a0020fa:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
1a0020fe:	ea04 0c0c 	and.w	ip, r4, ip
1a002102:	eb0c 0406 	add.w	r4, ip, r6
1a002106:	429c      	cmp	r4, r3
1a002108:	d302      	bcc.n	1a002110 <RingBuffer_InsertMult+0x34>
1a00210a:	ebcc 0303 	rsb	r3, ip, r3
1a00210e:	e000      	b.n	1a002112 <RingBuffer_InsertMult+0x36>
1a002110:	4633      	mov	r3, r6
1a002112:	460f      	mov	r7, r1
1a002114:	4604      	mov	r4, r0
1a002116:	1af6      	subs	r6, r6, r3
1a002118:	4293      	cmp	r3, r2
1a00211a:	bfa8      	it	ge
1a00211c:	4613      	movge	r3, r2
1a00211e:	4698      	mov	r8, r3
1a002120:	1ad5      	subs	r5, r2, r3
1a002122:	42b5      	cmp	r5, r6
1a002124:	bfa8      	it	ge
1a002126:	4635      	movge	r5, r6
1a002128:	6882      	ldr	r2, [r0, #8]
1a00212a:	fb02 e00c 	mla	r0, r2, ip, lr
1a00212e:	fb02 f203 	mul.w	r2, r2, r3
1a002132:	f000 fe71 	bl	1a002e18 <memcpy>
1a002136:	68e3      	ldr	r3, [r4, #12]
1a002138:	eb08 0203 	add.w	r2, r8, r3
1a00213c:	60e2      	str	r2, [r4, #12]
1a00213e:	6820      	ldr	r0, [r4, #0]
1a002140:	6863      	ldr	r3, [r4, #4]
1a002142:	3b01      	subs	r3, #1
1a002144:	4013      	ands	r3, r2
1a002146:	68a2      	ldr	r2, [r4, #8]
1a002148:	fb02 0003 	mla	r0, r2, r3, r0
1a00214c:	fb02 7108 	mla	r1, r2, r8, r7
1a002150:	fb02 f205 	mul.w	r2, r2, r5
1a002154:	f000 fe60 	bl	1a002e18 <memcpy>
1a002158:	68e3      	ldr	r3, [r4, #12]
1a00215a:	442b      	add	r3, r5
1a00215c:	60e3      	str	r3, [r4, #12]
1a00215e:	eb08 0005 	add.w	r0, r8, r5
1a002162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002166:	2000      	movs	r0, #0
1a002168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a00216c <RingBuffer_Pop>:
1a00216c:	b538      	push	{r3, r4, r5, lr}
1a00216e:	6805      	ldr	r5, [r0, #0]
1a002170:	68c2      	ldr	r2, [r0, #12]
1a002172:	6903      	ldr	r3, [r0, #16]
1a002174:	429a      	cmp	r2, r3
1a002176:	d00f      	beq.n	1a002198 <RingBuffer_Pop+0x2c>
1a002178:	4604      	mov	r4, r0
1a00217a:	6902      	ldr	r2, [r0, #16]
1a00217c:	6843      	ldr	r3, [r0, #4]
1a00217e:	3b01      	subs	r3, #1
1a002180:	4013      	ands	r3, r2
1a002182:	6882      	ldr	r2, [r0, #8]
1a002184:	4608      	mov	r0, r1
1a002186:	fb02 5103 	mla	r1, r2, r3, r5
1a00218a:	f000 fe45 	bl	1a002e18 <memcpy>
1a00218e:	6923      	ldr	r3, [r4, #16]
1a002190:	3301      	adds	r3, #1
1a002192:	6123      	str	r3, [r4, #16]
1a002194:	2001      	movs	r0, #1
1a002196:	bd38      	pop	{r3, r4, r5, pc}
1a002198:	2000      	movs	r0, #0
1a00219a:	bd38      	pop	{r3, r4, r5, pc}

1a00219c <RingBuffer_PopMult>:
1a00219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00219e:	f8d0 e000 	ldr.w	lr, [r0]
1a0021a2:	68c4      	ldr	r4, [r0, #12]
1a0021a4:	6903      	ldr	r3, [r0, #16]
1a0021a6:	429c      	cmp	r4, r3
1a0021a8:	d037      	beq.n	1a00221a <RingBuffer_PopMult+0x7e>
1a0021aa:	68c3      	ldr	r3, [r0, #12]
1a0021ac:	6904      	ldr	r4, [r0, #16]
1a0021ae:	1b1b      	subs	r3, r3, r4
1a0021b0:	6904      	ldr	r4, [r0, #16]
1a0021b2:	6846      	ldr	r6, [r0, #4]
1a0021b4:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
1a0021b8:	ea04 0c0c 	and.w	ip, r4, ip
1a0021bc:	eb0c 0403 	add.w	r4, ip, r3
1a0021c0:	42b4      	cmp	r4, r6
1a0021c2:	d302      	bcc.n	1a0021ca <RingBuffer_PopMult+0x2e>
1a0021c4:	ebcc 0606 	rsb	r6, ip, r6
1a0021c8:	e000      	b.n	1a0021cc <RingBuffer_PopMult+0x30>
1a0021ca:	461e      	mov	r6, r3
1a0021cc:	460f      	mov	r7, r1
1a0021ce:	4605      	mov	r5, r0
1a0021d0:	1b9b      	subs	r3, r3, r6
1a0021d2:	4296      	cmp	r6, r2
1a0021d4:	bfa8      	it	ge
1a0021d6:	4616      	movge	r6, r2
1a0021d8:	1b94      	subs	r4, r2, r6
1a0021da:	429c      	cmp	r4, r3
1a0021dc:	bfa8      	it	ge
1a0021de:	461c      	movge	r4, r3
1a0021e0:	6882      	ldr	r2, [r0, #8]
1a0021e2:	4608      	mov	r0, r1
1a0021e4:	fb02 e10c 	mla	r1, r2, ip, lr
1a0021e8:	fb02 f206 	mul.w	r2, r2, r6
1a0021ec:	f000 fe14 	bl	1a002e18 <memcpy>
1a0021f0:	692b      	ldr	r3, [r5, #16]
1a0021f2:	18f2      	adds	r2, r6, r3
1a0021f4:	612a      	str	r2, [r5, #16]
1a0021f6:	6829      	ldr	r1, [r5, #0]
1a0021f8:	686b      	ldr	r3, [r5, #4]
1a0021fa:	3b01      	subs	r3, #1
1a0021fc:	4013      	ands	r3, r2
1a0021fe:	68aa      	ldr	r2, [r5, #8]
1a002200:	fb02 7006 	mla	r0, r2, r6, r7
1a002204:	fb02 1103 	mla	r1, r2, r3, r1
1a002208:	fb02 f204 	mul.w	r2, r2, r4
1a00220c:	f000 fe04 	bl	1a002e18 <memcpy>
1a002210:	692b      	ldr	r3, [r5, #16]
1a002212:	4423      	add	r3, r4
1a002214:	612b      	str	r3, [r5, #16]
1a002216:	1930      	adds	r0, r6, r4
1a002218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00221a:	2000      	movs	r0, #0
1a00221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00221e:	bf00      	nop

1a002220 <Chip_SetupCoreClock>:
1a002220:	b570      	push	{r4, r5, r6, lr}
1a002222:	b08a      	sub	sp, #40	; 0x28
1a002224:	4605      	mov	r5, r0
1a002226:	460e      	mov	r6, r1
1a002228:	4614      	mov	r4, r2
1a00222a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a00222e:	9309      	str	r3, [sp, #36]	; 0x24
1a002230:	2806      	cmp	r0, #6
1a002232:	d101      	bne.n	1a002238 <Chip_SetupCoreClock+0x18>
1a002234:	f7ff fb9a 	bl	1a00196c <Chip_Clock_EnableCrystal>
1a002238:	2004      	movs	r0, #4
1a00223a:	4629      	mov	r1, r5
1a00223c:	2201      	movs	r2, #1
1a00223e:	2300      	movs	r3, #0
1a002240:	f7ff fd96 	bl	1a001d70 <Chip_Clock_SetBaseClock>
1a002244:	4a47      	ldr	r2, [pc, #284]	; (1a002364 <Chip_SetupCoreClock+0x144>)
1a002246:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002248:	f043 0301 	orr.w	r3, r3, #1
1a00224c:	6453      	str	r3, [r2, #68]	; 0x44
1a00224e:	f88d 5008 	strb.w	r5, [sp, #8]
1a002252:	4630      	mov	r0, r6
1a002254:	a901      	add	r1, sp, #4
1a002256:	f7ff fc59 	bl	1a001b0c <Chip_Clock_CalcMainPLLValue>
1a00225a:	4b43      	ldr	r3, [pc, #268]	; (1a002368 <Chip_SetupCoreClock+0x148>)
1a00225c:	429e      	cmp	r6, r3
1a00225e:	d913      	bls.n	1a002288 <Chip_SetupCoreClock+0x68>
1a002260:	9b01      	ldr	r3, [sp, #4]
1a002262:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002266:	d000      	beq.n	1a00226a <Chip_SetupCoreClock+0x4a>
1a002268:	e7fe      	b.n	1a002268 <Chip_SetupCoreClock+0x48>
1a00226a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00226e:	d005      	beq.n	1a00227c <Chip_SetupCoreClock+0x5c>
1a002270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002274:	9301      	str	r3, [sp, #4]
1a002276:	2500      	movs	r5, #0
1a002278:	2601      	movs	r6, #1
1a00227a:	e007      	b.n	1a00228c <Chip_SetupCoreClock+0x6c>
1a00227c:	9b04      	ldr	r3, [sp, #16]
1a00227e:	3301      	adds	r3, #1
1a002280:	9304      	str	r3, [sp, #16]
1a002282:	2501      	movs	r5, #1
1a002284:	2600      	movs	r6, #0
1a002286:	e001      	b.n	1a00228c <Chip_SetupCoreClock+0x6c>
1a002288:	2500      	movs	r5, #0
1a00228a:	462e      	mov	r6, r5
1a00228c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002290:	9b01      	ldr	r3, [sp, #4]
1a002292:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002296:	9a05      	ldr	r2, [sp, #20]
1a002298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00229c:	9a03      	ldr	r2, [sp, #12]
1a00229e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0022a2:	9a04      	ldr	r2, [sp, #16]
1a0022a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0022a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0022ac:	4a2d      	ldr	r2, [pc, #180]	; (1a002364 <Chip_SetupCoreClock+0x144>)
1a0022ae:	6453      	str	r3, [r2, #68]	; 0x44
1a0022b0:	4b2c      	ldr	r3, [pc, #176]	; (1a002364 <Chip_SetupCoreClock+0x144>)
1a0022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a0022b4:	f013 0f01 	tst.w	r3, #1
1a0022b8:	d0fa      	beq.n	1a0022b0 <Chip_SetupCoreClock+0x90>
1a0022ba:	2004      	movs	r0, #4
1a0022bc:	2109      	movs	r1, #9
1a0022be:	2201      	movs	r2, #1
1a0022c0:	2300      	movs	r3, #0
1a0022c2:	f7ff fd55 	bl	1a001d70 <Chip_Clock_SetBaseClock>
1a0022c6:	b1ee      	cbz	r6, 1a002304 <Chip_SetupCoreClock+0xe4>
1a0022c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0022cc:	9309      	str	r3, [sp, #36]	; 0x24
1a0022ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0022d0:	1e5a      	subs	r2, r3, #1
1a0022d2:	9209      	str	r2, [sp, #36]	; 0x24
1a0022d4:	2b00      	cmp	r3, #0
1a0022d6:	d1fa      	bne.n	1a0022ce <Chip_SetupCoreClock+0xae>
1a0022d8:	9b01      	ldr	r3, [sp, #4]
1a0022da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0022de:	9301      	str	r3, [sp, #4]
1a0022e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0022e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0022e8:	9a05      	ldr	r2, [sp, #20]
1a0022ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0022ee:	9a03      	ldr	r2, [sp, #12]
1a0022f0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0022f4:	9a04      	ldr	r2, [sp, #16]
1a0022f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0022fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0022fe:	4a19      	ldr	r2, [pc, #100]	; (1a002364 <Chip_SetupCoreClock+0x144>)
1a002300:	6453      	str	r3, [r2, #68]	; 0x44
1a002302:	e01c      	b.n	1a00233e <Chip_SetupCoreClock+0x11e>
1a002304:	b1dd      	cbz	r5, 1a00233e <Chip_SetupCoreClock+0x11e>
1a002306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00230a:	9309      	str	r3, [sp, #36]	; 0x24
1a00230c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00230e:	1e5a      	subs	r2, r3, #1
1a002310:	9209      	str	r2, [sp, #36]	; 0x24
1a002312:	2b00      	cmp	r3, #0
1a002314:	d1fa      	bne.n	1a00230c <Chip_SetupCoreClock+0xec>
1a002316:	9b04      	ldr	r3, [sp, #16]
1a002318:	1e59      	subs	r1, r3, #1
1a00231a:	9104      	str	r1, [sp, #16]
1a00231c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002320:	9b01      	ldr	r3, [sp, #4]
1a002322:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a002326:	9b05      	ldr	r3, [sp, #20]
1a002328:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00232c:	9b03      	ldr	r3, [sp, #12]
1a00232e:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a002332:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a002336:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00233a:	4a0a      	ldr	r2, [pc, #40]	; (1a002364 <Chip_SetupCoreClock+0x144>)
1a00233c:	6453      	str	r3, [r2, #68]	; 0x44
1a00233e:	b964      	cbnz	r4, 1a00235a <Chip_SetupCoreClock+0x13a>
1a002340:	e00e      	b.n	1a002360 <Chip_SetupCoreClock+0x140>
1a002342:	4a0a      	ldr	r2, [pc, #40]	; (1a00236c <Chip_SetupCoreClock+0x14c>)
1a002344:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a002348:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a00234c:	7859      	ldrb	r1, [r3, #1]
1a00234e:	789a      	ldrb	r2, [r3, #2]
1a002350:	78db      	ldrb	r3, [r3, #3]
1a002352:	f7ff fd0d 	bl	1a001d70 <Chip_Clock_SetBaseClock>
1a002356:	3401      	adds	r4, #1
1a002358:	e000      	b.n	1a00235c <Chip_SetupCoreClock+0x13c>
1a00235a:	2400      	movs	r4, #0
1a00235c:	2c11      	cmp	r4, #17
1a00235e:	d9f0      	bls.n	1a002342 <Chip_SetupCoreClock+0x122>
1a002360:	b00a      	add	sp, #40	; 0x28
1a002362:	bd70      	pop	{r4, r5, r6, pc}
1a002364:	40050000 	.word	0x40050000
1a002368:	068e7780 	.word	0x068e7780
1a00236c:	1a0031b0 	.word	0x1a0031b0

1a002370 <Chip_SetupXtalClocking>:
1a002370:	b508      	push	{r3, lr}
1a002372:	2006      	movs	r0, #6
1a002374:	4902      	ldr	r1, [pc, #8]	; (1a002380 <Chip_SetupXtalClocking+0x10>)
1a002376:	2201      	movs	r2, #1
1a002378:	f7ff ff52 	bl	1a002220 <Chip_SetupCoreClock>
1a00237c:	bd08      	pop	{r3, pc}
1a00237e:	bf00      	nop
1a002380:	0c28cb00 	.word	0x0c28cb00

1a002384 <Chip_SetupIrcClocking>:
1a002384:	b508      	push	{r3, lr}
1a002386:	2001      	movs	r0, #1
1a002388:	4902      	ldr	r1, [pc, #8]	; (1a002394 <Chip_SetupIrcClocking+0x10>)
1a00238a:	4602      	mov	r2, r0
1a00238c:	f7ff ff48 	bl	1a002220 <Chip_SetupCoreClock>
1a002390:	bd08      	pop	{r3, pc}
1a002392:	bf00      	nop
1a002394:	0c28cb00 	.word	0x0c28cb00

1a002398 <Chip_SystemInit>:
1a002398:	b508      	push	{r3, lr}
1a00239a:	f7ff fff3 	bl	1a002384 <Chip_SetupIrcClocking>
1a00239e:	bd08      	pop	{r3, pc}

1a0023a0 <Chip_TIMER_GetClockIndex>:
1a0023a0:	4b09      	ldr	r3, [pc, #36]	; (1a0023c8 <Chip_TIMER_GetClockIndex+0x28>)
1a0023a2:	4298      	cmp	r0, r3
1a0023a4:	d009      	beq.n	1a0023ba <Chip_TIMER_GetClockIndex+0x1a>
1a0023a6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
1a0023aa:	4298      	cmp	r0, r3
1a0023ac:	d007      	beq.n	1a0023be <Chip_TIMER_GetClockIndex+0x1e>
1a0023ae:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a0023b2:	4298      	cmp	r0, r3
1a0023b4:	d105      	bne.n	1a0023c2 <Chip_TIMER_GetClockIndex+0x22>
1a0023b6:	2085      	movs	r0, #133	; 0x85
1a0023b8:	4770      	bx	lr
1a0023ba:	20a4      	movs	r0, #164	; 0xa4
1a0023bc:	4770      	bx	lr
1a0023be:	20a3      	movs	r0, #163	; 0xa3
1a0023c0:	4770      	bx	lr
1a0023c2:	2084      	movs	r0, #132	; 0x84
1a0023c4:	4770      	bx	lr
1a0023c6:	bf00      	nop
1a0023c8:	400c4000 	.word	0x400c4000

1a0023cc <Chip_TIMER_Init>:
1a0023cc:	b508      	push	{r3, lr}
1a0023ce:	f7ff ffe7 	bl	1a0023a0 <Chip_TIMER_GetClockIndex>
1a0023d2:	f7ff fd67 	bl	1a001ea4 <Chip_Clock_Enable>
1a0023d6:	bd08      	pop	{r3, pc}

1a0023d8 <Chip_TIMER_DeInit>:
1a0023d8:	b508      	push	{r3, lr}
1a0023da:	f7ff ffe1 	bl	1a0023a0 <Chip_TIMER_GetClockIndex>
1a0023de:	f7ff fd87 	bl	1a001ef0 <Chip_Clock_Disable>
1a0023e2:	bd08      	pop	{r3, pc}

1a0023e4 <Chip_TIMER_Reset>:
1a0023e4:	6842      	ldr	r2, [r0, #4]
1a0023e6:	2300      	movs	r3, #0
1a0023e8:	6043      	str	r3, [r0, #4]
1a0023ea:	2301      	movs	r3, #1
1a0023ec:	6083      	str	r3, [r0, #8]
1a0023ee:	2302      	movs	r3, #2
1a0023f0:	6043      	str	r3, [r0, #4]
1a0023f2:	6883      	ldr	r3, [r0, #8]
1a0023f4:	2b00      	cmp	r3, #0
1a0023f6:	d1fc      	bne.n	1a0023f2 <Chip_TIMER_Reset+0xe>
1a0023f8:	6042      	str	r2, [r0, #4]
1a0023fa:	4770      	bx	lr

1a0023fc <Chip_TIMER_ExtMatchControlSet>:
1a0023fc:	b470      	push	{r4, r5, r6}
1a0023fe:	2401      	movs	r4, #1
1a002400:	fa04 f603 	lsl.w	r6, r4, r3
1a002404:	1c9d      	adds	r5, r3, #2
1a002406:	40a5      	lsls	r5, r4
1a002408:	2403      	movs	r4, #3
1a00240a:	40ac      	lsls	r4, r5
1a00240c:	4334      	orrs	r4, r6
1a00240e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
1a002410:	ea26 0404 	bic.w	r4, r6, r4
1a002414:	63c4      	str	r4, [r0, #60]	; 0x3c
1a002416:	4099      	lsls	r1, r3
1a002418:	430c      	orrs	r4, r1
1a00241a:	40aa      	lsls	r2, r5
1a00241c:	4314      	orrs	r4, r2
1a00241e:	63c4      	str	r4, [r0, #60]	; 0x3c
1a002420:	bc70      	pop	{r4, r5, r6}
1a002422:	4770      	bx	lr

1a002424 <Chip_UART_GetIndex>:
1a002424:	4b09      	ldr	r3, [pc, #36]	; (1a00244c <Chip_UART_GetIndex+0x28>)
1a002426:	4298      	cmp	r0, r3
1a002428:	d009      	beq.n	1a00243e <Chip_UART_GetIndex+0x1a>
1a00242a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00242e:	4298      	cmp	r0, r3
1a002430:	d007      	beq.n	1a002442 <Chip_UART_GetIndex+0x1e>
1a002432:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002436:	4298      	cmp	r0, r3
1a002438:	d005      	beq.n	1a002446 <Chip_UART_GetIndex+0x22>
1a00243a:	2000      	movs	r0, #0
1a00243c:	4770      	bx	lr
1a00243e:	2002      	movs	r0, #2
1a002440:	4770      	bx	lr
1a002442:	2003      	movs	r0, #3
1a002444:	4770      	bx	lr
1a002446:	2001      	movs	r0, #1
1a002448:	4770      	bx	lr
1a00244a:	bf00      	nop
1a00244c:	400c1000 	.word	0x400c1000

1a002450 <Chip_UART_ABIntHandler>:
1a002450:	6883      	ldr	r3, [r0, #8]
1a002452:	f413 7f80 	tst.w	r3, #256	; 0x100
1a002456:	d00f      	beq.n	1a002478 <Chip_UART_ABIntHandler+0x28>
1a002458:	6a03      	ldr	r3, [r0, #32]
1a00245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a00245e:	6203      	str	r3, [r0, #32]
1a002460:	6843      	ldr	r3, [r0, #4]
1a002462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
1a002466:	6043      	str	r3, [r0, #4]
1a002468:	4b0a      	ldr	r3, [pc, #40]	; (1a002494 <Chip_UART_ABIntHandler+0x44>)
1a00246a:	781b      	ldrb	r3, [r3, #0]
1a00246c:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002470:	d102      	bne.n	1a002478 <Chip_UART_ABIntHandler+0x28>
1a002472:	2201      	movs	r2, #1
1a002474:	4b07      	ldr	r3, [pc, #28]	; (1a002494 <Chip_UART_ABIntHandler+0x44>)
1a002476:	701a      	strb	r2, [r3, #0]
1a002478:	6883      	ldr	r3, [r0, #8]
1a00247a:	f413 7f00 	tst.w	r3, #512	; 0x200
1a00247e:	d007      	beq.n	1a002490 <Chip_UART_ABIntHandler+0x40>
1a002480:	6a03      	ldr	r3, [r0, #32]
1a002482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a002486:	6203      	str	r3, [r0, #32]
1a002488:	6843      	ldr	r3, [r0, #4]
1a00248a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
1a00248e:	6043      	str	r3, [r0, #4]
1a002490:	4770      	bx	lr
1a002492:	bf00      	nop
1a002494:	100000f4 	.word	0x100000f4

1a002498 <Chip_UART_Init>:
1a002498:	b510      	push	{r4, lr}
1a00249a:	b082      	sub	sp, #8
1a00249c:	4604      	mov	r4, r0
1a00249e:	f7ff ffc1 	bl	1a002424 <Chip_UART_GetIndex>
1a0024a2:	4b0f      	ldr	r3, [pc, #60]	; (1a0024e0 <Chip_UART_Init+0x48>)
1a0024a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0024a8:	2101      	movs	r1, #1
1a0024aa:	460a      	mov	r2, r1
1a0024ac:	460b      	mov	r3, r1
1a0024ae:	f7ff fcdb 	bl	1a001e68 <Chip_Clock_EnableOpts>
1a0024b2:	2307      	movs	r3, #7
1a0024b4:	60a3      	str	r3, [r4, #8]
1a0024b6:	2300      	movs	r3, #0
1a0024b8:	65e3      	str	r3, [r4, #92]	; 0x5c
1a0024ba:	6063      	str	r3, [r4, #4]
1a0024bc:	60e3      	str	r3, [r4, #12]
1a0024be:	6223      	str	r3, [r4, #32]
1a0024c0:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0024c2:	6563      	str	r3, [r4, #84]	; 0x54
1a0024c4:	6523      	str	r3, [r4, #80]	; 0x50
1a0024c6:	4b07      	ldr	r3, [pc, #28]	; (1a0024e4 <Chip_UART_Init+0x4c>)
1a0024c8:	429c      	cmp	r4, r3
1a0024ca:	d103      	bne.n	1a0024d4 <Chip_UART_Init+0x3c>
1a0024cc:	2300      	movs	r3, #0
1a0024ce:	6123      	str	r3, [r4, #16]
1a0024d0:	69a3      	ldr	r3, [r4, #24]
1a0024d2:	9301      	str	r3, [sp, #4]
1a0024d4:	2303      	movs	r3, #3
1a0024d6:	60e3      	str	r3, [r4, #12]
1a0024d8:	2310      	movs	r3, #16
1a0024da:	62a3      	str	r3, [r4, #40]	; 0x28
1a0024dc:	b002      	add	sp, #8
1a0024de:	bd10      	pop	{r4, pc}
1a0024e0:	1a0031f8 	.word	0x1a0031f8
1a0024e4:	40082000 	.word	0x40082000

1a0024e8 <Chip_UART_DeInit>:
1a0024e8:	b508      	push	{r3, lr}
1a0024ea:	2200      	movs	r2, #0
1a0024ec:	65c2      	str	r2, [r0, #92]	; 0x5c
1a0024ee:	f7ff ff99 	bl	1a002424 <Chip_UART_GetIndex>
1a0024f2:	4b03      	ldr	r3, [pc, #12]	; (1a002500 <Chip_UART_DeInit+0x18>)
1a0024f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0024f8:	f7ff fcfa 	bl	1a001ef0 <Chip_Clock_Disable>
1a0024fc:	bd08      	pop	{r3, pc}
1a0024fe:	bf00      	nop
1a002500:	1a0031f8 	.word	0x1a0031f8

1a002504 <Chip_UART_Send>:
1a002504:	b410      	push	{r4}
1a002506:	2300      	movs	r3, #0
1a002508:	e003      	b.n	1a002512 <Chip_UART_Send+0xe>
1a00250a:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00250e:	6004      	str	r4, [r0, #0]
1a002510:	3301      	adds	r3, #1
1a002512:	4293      	cmp	r3, r2
1a002514:	da03      	bge.n	1a00251e <Chip_UART_Send+0x1a>
1a002516:	6944      	ldr	r4, [r0, #20]
1a002518:	f014 0f20 	tst.w	r4, #32
1a00251c:	d1f5      	bne.n	1a00250a <Chip_UART_Send+0x6>
1a00251e:	4618      	mov	r0, r3
1a002520:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002524:	4770      	bx	lr
1a002526:	bf00      	nop

1a002528 <Chip_UART_CheckBusy>:
1a002528:	6943      	ldr	r3, [r0, #20]
1a00252a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00252e:	d001      	beq.n	1a002534 <Chip_UART_CheckBusy+0xc>
1a002530:	2000      	movs	r0, #0
1a002532:	4770      	bx	lr
1a002534:	2001      	movs	r0, #1
1a002536:	4770      	bx	lr

1a002538 <Chip_UART_SendBlocking>:
1a002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00253a:	4607      	mov	r7, r0
1a00253c:	460d      	mov	r5, r1
1a00253e:	4614      	mov	r4, r2
1a002540:	2600      	movs	r6, #0
1a002542:	e007      	b.n	1a002554 <Chip_UART_SendBlocking+0x1c>
1a002544:	4638      	mov	r0, r7
1a002546:	4629      	mov	r1, r5
1a002548:	4622      	mov	r2, r4
1a00254a:	f7ff ffdb 	bl	1a002504 <Chip_UART_Send>
1a00254e:	1a24      	subs	r4, r4, r0
1a002550:	4406      	add	r6, r0
1a002552:	4405      	add	r5, r0
1a002554:	2c00      	cmp	r4, #0
1a002556:	dcf5      	bgt.n	1a002544 <Chip_UART_SendBlocking+0xc>
1a002558:	4630      	mov	r0, r6
1a00255a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a00255c <Chip_UART_Read>:
1a00255c:	b410      	push	{r4}
1a00255e:	2300      	movs	r3, #0
1a002560:	e003      	b.n	1a00256a <Chip_UART_Read+0xe>
1a002562:	6804      	ldr	r4, [r0, #0]
1a002564:	f801 4b01 	strb.w	r4, [r1], #1
1a002568:	3301      	adds	r3, #1
1a00256a:	4293      	cmp	r3, r2
1a00256c:	da03      	bge.n	1a002576 <Chip_UART_Read+0x1a>
1a00256e:	6944      	ldr	r4, [r0, #20]
1a002570:	f014 0f01 	tst.w	r4, #1
1a002574:	d1f5      	bne.n	1a002562 <Chip_UART_Read+0x6>
1a002576:	4618      	mov	r0, r3
1a002578:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00257c:	4770      	bx	lr
1a00257e:	bf00      	nop

1a002580 <Chip_UART_ReadBlocking>:
1a002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002582:	4607      	mov	r7, r0
1a002584:	460d      	mov	r5, r1
1a002586:	4614      	mov	r4, r2
1a002588:	2600      	movs	r6, #0
1a00258a:	e007      	b.n	1a00259c <Chip_UART_ReadBlocking+0x1c>
1a00258c:	4638      	mov	r0, r7
1a00258e:	4629      	mov	r1, r5
1a002590:	4622      	mov	r2, r4
1a002592:	f7ff ffe3 	bl	1a00255c <Chip_UART_Read>
1a002596:	1a24      	subs	r4, r4, r0
1a002598:	4406      	add	r6, r0
1a00259a:	4405      	add	r5, r0
1a00259c:	2c00      	cmp	r4, #0
1a00259e:	dcf5      	bgt.n	1a00258c <Chip_UART_ReadBlocking+0xc>
1a0025a0:	4630      	mov	r0, r6
1a0025a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a0025a4 <Chip_UART_SetBaud>:
1a0025a4:	b538      	push	{r3, r4, r5, lr}
1a0025a6:	4605      	mov	r5, r0
1a0025a8:	460c      	mov	r4, r1
1a0025aa:	f7ff ff3b 	bl	1a002424 <Chip_UART_GetIndex>
1a0025ae:	4b0d      	ldr	r3, [pc, #52]	; (1a0025e4 <Chip_UART_SetBaud+0x40>)
1a0025b0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a0025b4:	8900      	ldrh	r0, [r0, #8]
1a0025b6:	f7ff fcc9 	bl	1a001f4c <Chip_Clock_GetRate>
1a0025ba:	0124      	lsls	r4, r4, #4
1a0025bc:	fbb0 f3f4 	udiv	r3, r0, r4
1a0025c0:	68ea      	ldr	r2, [r5, #12]
1a0025c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0025c6:	60ea      	str	r2, [r5, #12]
1a0025c8:	b2da      	uxtb	r2, r3
1a0025ca:	602a      	str	r2, [r5, #0]
1a0025cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0025d0:	606a      	str	r2, [r5, #4]
1a0025d2:	68ea      	ldr	r2, [r5, #12]
1a0025d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0025d8:	60ea      	str	r2, [r5, #12]
1a0025da:	fbb0 f0f3 	udiv	r0, r0, r3
1a0025de:	0900      	lsrs	r0, r0, #4
1a0025e0:	bd38      	pop	{r3, r4, r5, pc}
1a0025e2:	bf00      	nop
1a0025e4:	1a0031f8 	.word	0x1a0031f8

1a0025e8 <Chip_UART_RXIntHandlerRB>:
1a0025e8:	b530      	push	{r4, r5, lr}
1a0025ea:	b083      	sub	sp, #12
1a0025ec:	4604      	mov	r4, r0
1a0025ee:	460d      	mov	r5, r1
1a0025f0:	e006      	b.n	1a002600 <Chip_UART_RXIntHandlerRB+0x18>
1a0025f2:	6823      	ldr	r3, [r4, #0]
1a0025f4:	a902      	add	r1, sp, #8
1a0025f6:	f801 3d01 	strb.w	r3, [r1, #-1]!
1a0025fa:	4628      	mov	r0, r5
1a0025fc:	f7ff fd56 	bl	1a0020ac <RingBuffer_Insert>
1a002600:	6963      	ldr	r3, [r4, #20]
1a002602:	f013 0f01 	tst.w	r3, #1
1a002606:	d1f4      	bne.n	1a0025f2 <Chip_UART_RXIntHandlerRB+0xa>
1a002608:	b003      	add	sp, #12
1a00260a:	bd30      	pop	{r4, r5, pc}

1a00260c <Chip_UART_TXIntHandlerRB>:
1a00260c:	b530      	push	{r4, r5, lr}
1a00260e:	b083      	sub	sp, #12
1a002610:	4604      	mov	r4, r0
1a002612:	460d      	mov	r5, r1
1a002614:	e002      	b.n	1a00261c <Chip_UART_TXIntHandlerRB+0x10>
1a002616:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00261a:	6023      	str	r3, [r4, #0]
1a00261c:	6963      	ldr	r3, [r4, #20]
1a00261e:	f013 0f20 	tst.w	r3, #32
1a002622:	d006      	beq.n	1a002632 <Chip_UART_TXIntHandlerRB+0x26>
1a002624:	4628      	mov	r0, r5
1a002626:	f10d 0107 	add.w	r1, sp, #7
1a00262a:	f7ff fd9f 	bl	1a00216c <RingBuffer_Pop>
1a00262e:	2800      	cmp	r0, #0
1a002630:	d1f1      	bne.n	1a002616 <Chip_UART_TXIntHandlerRB+0xa>
1a002632:	68ea      	ldr	r2, [r5, #12]
1a002634:	692b      	ldr	r3, [r5, #16]
1a002636:	429a      	cmp	r2, r3
1a002638:	d103      	bne.n	1a002642 <Chip_UART_TXIntHandlerRB+0x36>
1a00263a:	6863      	ldr	r3, [r4, #4]
1a00263c:	f023 0302 	bic.w	r3, r3, #2
1a002640:	6063      	str	r3, [r4, #4]
1a002642:	b003      	add	sp, #12
1a002644:	bd30      	pop	{r4, r5, pc}
1a002646:	bf00      	nop

1a002648 <Chip_UART_SendRB>:
1a002648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00264c:	4604      	mov	r4, r0
1a00264e:	460e      	mov	r6, r1
1a002650:	4690      	mov	r8, r2
1a002652:	461f      	mov	r7, r3
1a002654:	6843      	ldr	r3, [r0, #4]
1a002656:	f023 0302 	bic.w	r3, r3, #2
1a00265a:	6043      	str	r3, [r0, #4]
1a00265c:	4608      	mov	r0, r1
1a00265e:	4611      	mov	r1, r2
1a002660:	463a      	mov	r2, r7
1a002662:	f7ff fd3b 	bl	1a0020dc <RingBuffer_InsertMult>
1a002666:	4605      	mov	r5, r0
1a002668:	4620      	mov	r0, r4
1a00266a:	4631      	mov	r1, r6
1a00266c:	f7ff ffce 	bl	1a00260c <Chip_UART_TXIntHandlerRB>
1a002670:	4630      	mov	r0, r6
1a002672:	eb08 0105 	add.w	r1, r8, r5
1a002676:	1b7a      	subs	r2, r7, r5
1a002678:	f7ff fd30 	bl	1a0020dc <RingBuffer_InsertMult>
1a00267c:	6863      	ldr	r3, [r4, #4]
1a00267e:	f043 0302 	orr.w	r3, r3, #2
1a002682:	6063      	str	r3, [r4, #4]
1a002684:	4428      	add	r0, r5
1a002686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00268a:	bf00      	nop

1a00268c <Chip_UART_ReadRB>:
1a00268c:	b508      	push	{r3, lr}
1a00268e:	4608      	mov	r0, r1
1a002690:	4611      	mov	r1, r2
1a002692:	461a      	mov	r2, r3
1a002694:	f7ff fd82 	bl	1a00219c <RingBuffer_PopMult>
1a002698:	bd08      	pop	{r3, pc}
1a00269a:	bf00      	nop

1a00269c <Chip_UART_IRQRBHandler>:
1a00269c:	b570      	push	{r4, r5, r6, lr}
1a00269e:	4604      	mov	r4, r0
1a0026a0:	460e      	mov	r6, r1
1a0026a2:	6843      	ldr	r3, [r0, #4]
1a0026a4:	f013 0f02 	tst.w	r3, #2
1a0026a8:	d00b      	beq.n	1a0026c2 <Chip_UART_IRQRBHandler+0x26>
1a0026aa:	4615      	mov	r5, r2
1a0026ac:	4611      	mov	r1, r2
1a0026ae:	f7ff ffad 	bl	1a00260c <Chip_UART_TXIntHandlerRB>
1a0026b2:	68ea      	ldr	r2, [r5, #12]
1a0026b4:	692b      	ldr	r3, [r5, #16]
1a0026b6:	429a      	cmp	r2, r3
1a0026b8:	d103      	bne.n	1a0026c2 <Chip_UART_IRQRBHandler+0x26>
1a0026ba:	6863      	ldr	r3, [r4, #4]
1a0026bc:	f023 0302 	bic.w	r3, r3, #2
1a0026c0:	6063      	str	r3, [r4, #4]
1a0026c2:	4620      	mov	r0, r4
1a0026c4:	4631      	mov	r1, r6
1a0026c6:	f7ff ff8f 	bl	1a0025e8 <Chip_UART_RXIntHandlerRB>
1a0026ca:	4620      	mov	r0, r4
1a0026cc:	f7ff fec0 	bl	1a002450 <Chip_UART_ABIntHandler>
1a0026d0:	bd70      	pop	{r4, r5, r6, pc}
1a0026d2:	bf00      	nop

1a0026d4 <Chip_UART_SetBaudFDR>:
1a0026d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0026d8:	b083      	sub	sp, #12
1a0026da:	4683      	mov	fp, r0
1a0026dc:	4688      	mov	r8, r1
1a0026de:	f7ff fea1 	bl	1a002424 <Chip_UART_GetIndex>
1a0026e2:	4b35      	ldr	r3, [pc, #212]	; (1a0027b8 <Chip_UART_SetBaudFDR+0xe4>)
1a0026e4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a0026e8:	8900      	ldrh	r0, [r0, #8]
1a0026ea:	f7ff fc2f 	bl	1a001f4c <Chip_Clock_GetRate>
1a0026ee:	4606      	mov	r6, r0
1a0026f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0026f4:	2401      	movs	r4, #1
1a0026f6:	2300      	movs	r3, #0
1a0026f8:	9301      	str	r3, [sp, #4]
1a0026fa:	46a2      	mov	sl, r4
1a0026fc:	4699      	mov	r9, r3
1a0026fe:	e029      	b.n	1a002754 <Chip_UART_SetBaudFDR+0x80>
1a002700:	2300      	movs	r3, #0
1a002702:	0932      	lsrs	r2, r6, #4
1a002704:	0730      	lsls	r0, r6, #28
1a002706:	fba0 0104 	umull	r0, r1, r0, r4
1a00270a:	fb04 1102 	mla	r1, r4, r2, r1
1a00270e:	1962      	adds	r2, r4, r5
1a002710:	fb08 f202 	mul.w	r2, r8, r2
1a002714:	f000 f8b2 	bl	1a00287c <__aeabi_uldivmod>
1a002718:	4603      	mov	r3, r0
1a00271a:	460a      	mov	r2, r1
1a00271c:	2800      	cmp	r0, #0
1a00271e:	da01      	bge.n	1a002724 <Chip_UART_SetBaudFDR+0x50>
1a002720:	4243      	negs	r3, r0
1a002722:	1c4a      	adds	r2, r1, #1
1a002724:	429f      	cmp	r7, r3
1a002726:	d30a      	bcc.n	1a00273e <Chip_UART_SetBaudFDR+0x6a>
1a002728:	b14a      	cbz	r2, 1a00273e <Chip_UART_SetBaudFDR+0x6a>
1a00272a:	0c11      	lsrs	r1, r2, #16
1a00272c:	d107      	bne.n	1a00273e <Chip_UART_SetBaudFDR+0x6a>
1a00272e:	2a02      	cmp	r2, #2
1a002730:	d800      	bhi.n	1a002734 <Chip_UART_SetBaudFDR+0x60>
1a002732:	b925      	cbnz	r5, 1a00273e <Chip_UART_SetBaudFDR+0x6a>
1a002734:	b14b      	cbz	r3, 1a00274a <Chip_UART_SetBaudFDR+0x76>
1a002736:	461f      	mov	r7, r3
1a002738:	9501      	str	r5, [sp, #4]
1a00273a:	46a2      	mov	sl, r4
1a00273c:	4691      	mov	r9, r2
1a00273e:	3501      	adds	r5, #1
1a002740:	e000      	b.n	1a002744 <Chip_UART_SetBaudFDR+0x70>
1a002742:	2500      	movs	r5, #0
1a002744:	42a5      	cmp	r5, r4
1a002746:	d3db      	bcc.n	1a002700 <Chip_UART_SetBaudFDR+0x2c>
1a002748:	e003      	b.n	1a002752 <Chip_UART_SetBaudFDR+0x7e>
1a00274a:	461f      	mov	r7, r3
1a00274c:	9501      	str	r5, [sp, #4]
1a00274e:	46a2      	mov	sl, r4
1a002750:	4691      	mov	r9, r2
1a002752:	3401      	adds	r4, #1
1a002754:	b10f      	cbz	r7, 1a00275a <Chip_UART_SetBaudFDR+0x86>
1a002756:	2c0f      	cmp	r4, #15
1a002758:	d9f3      	bls.n	1a002742 <Chip_UART_SetBaudFDR+0x6e>
1a00275a:	f1b9 0f00 	cmp.w	r9, #0
1a00275e:	d026      	beq.n	1a0027ae <Chip_UART_SetBaudFDR+0xda>
1a002760:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002768:	f8cb 300c 	str.w	r3, [fp, #12]
1a00276c:	fa5f f389 	uxtb.w	r3, r9
1a002770:	f8cb 3000 	str.w	r3, [fp]
1a002774:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a002778:	f8cb 3004 	str.w	r3, [fp, #4]
1a00277c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002784:	f8cb 300c 	str.w	r3, [fp, #12]
1a002788:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00278c:	b2da      	uxtb	r2, r3
1a00278e:	9901      	ldr	r1, [sp, #4]
1a002790:	f001 030f 	and.w	r3, r1, #15
1a002794:	4313      	orrs	r3, r2
1a002796:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
1a00279a:	0933      	lsrs	r3, r6, #4
1a00279c:	fb0a f303 	mul.w	r3, sl, r3
1a0027a0:	eb0a 0001 	add.w	r0, sl, r1
1a0027a4:	fb09 f000 	mul.w	r0, r9, r0
1a0027a8:	fbb3 f0f0 	udiv	r0, r3, r0
1a0027ac:	e000      	b.n	1a0027b0 <Chip_UART_SetBaudFDR+0xdc>
1a0027ae:	2000      	movs	r0, #0
1a0027b0:	b003      	add	sp, #12
1a0027b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0027b6:	bf00      	nop
1a0027b8:	1a0031f8 	.word	0x1a0031f8

1a0027bc <Chip_UART_GetABEOStatus>:
1a0027bc:	4b01      	ldr	r3, [pc, #4]	; (1a0027c4 <Chip_UART_GetABEOStatus+0x8>)
1a0027be:	7818      	ldrb	r0, [r3, #0]
1a0027c0:	4770      	bx	lr
1a0027c2:	bf00      	nop
1a0027c4:	100000f4 	.word	0x100000f4

1a0027c8 <Chip_UART_ABCmd>:
1a0027c8:	2b01      	cmp	r3, #1
1a0027ca:	d116      	bne.n	1a0027fa <Chip_UART_ABCmd+0x32>
1a0027cc:	68c3      	ldr	r3, [r0, #12]
1a0027ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0027d2:	60c3      	str	r3, [r0, #12]
1a0027d4:	2300      	movs	r3, #0
1a0027d6:	6003      	str	r3, [r0, #0]
1a0027d8:	6043      	str	r3, [r0, #4]
1a0027da:	68c3      	ldr	r3, [r0, #12]
1a0027dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0027e0:	60c3      	str	r3, [r0, #12]
1a0027e2:	2310      	movs	r3, #16
1a0027e4:	6283      	str	r3, [r0, #40]	; 0x28
1a0027e6:	2901      	cmp	r1, #1
1a0027e8:	d101      	bne.n	1a0027ee <Chip_UART_ABCmd+0x26>
1a0027ea:	2303      	movs	r3, #3
1a0027ec:	e000      	b.n	1a0027f0 <Chip_UART_ABCmd+0x28>
1a0027ee:	2301      	movs	r3, #1
1a0027f0:	b10a      	cbz	r2, 1a0027f6 <Chip_UART_ABCmd+0x2e>
1a0027f2:	f043 0304 	orr.w	r3, r3, #4
1a0027f6:	6203      	str	r3, [r0, #32]
1a0027f8:	4770      	bx	lr
1a0027fa:	2300      	movs	r3, #0
1a0027fc:	6203      	str	r3, [r0, #32]
1a0027fe:	4770      	bx	lr

1a002800 <ResetISR>:
1a002800:	b672      	cpsid	i
1a002802:	4a17      	ldr	r2, [pc, #92]	; (1a002860 <ResetISR+0x60>)
1a002804:	4b17      	ldr	r3, [pc, #92]	; (1a002864 <ResetISR+0x64>)
1a002806:	601a      	str	r2, [r3, #0]
1a002808:	4a17      	ldr	r2, [pc, #92]	; (1a002868 <ResetISR+0x68>)
1a00280a:	3304      	adds	r3, #4
1a00280c:	601a      	str	r2, [r3, #0]
1a00280e:	2300      	movs	r3, #0
1a002810:	e005      	b.n	1a00281e <ResetISR+0x1e>
1a002812:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a002816:	4a15      	ldr	r2, [pc, #84]	; (1a00286c <ResetISR+0x6c>)
1a002818:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
1a00281c:	3301      	adds	r3, #1
1a00281e:	2b07      	cmp	r3, #7
1a002820:	d9f7      	bls.n	1a002812 <ResetISR+0x12>
1a002822:	b510      	push	{r4, lr}
1a002824:	b662      	cpsie	i
1a002826:	f7fe ff25 	bl	1a001674 <SystemInit>
1a00282a:	4b11      	ldr	r3, [pc, #68]	; (1a002870 <ResetISR+0x70>)
1a00282c:	e007      	b.n	1a00283e <ResetISR+0x3e>
1a00282e:	f103 040c 	add.w	r4, r3, #12
1a002832:	6818      	ldr	r0, [r3, #0]
1a002834:	6859      	ldr	r1, [r3, #4]
1a002836:	689a      	ldr	r2, [r3, #8]
1a002838:	f7fd fcb4 	bl	1a0001a4 <data_init>
1a00283c:	4623      	mov	r3, r4
1a00283e:	4a0d      	ldr	r2, [pc, #52]	; (1a002874 <ResetISR+0x74>)
1a002840:	4293      	cmp	r3, r2
1a002842:	d3f4      	bcc.n	1a00282e <ResetISR+0x2e>
1a002844:	e006      	b.n	1a002854 <ResetISR+0x54>
1a002846:	461c      	mov	r4, r3
1a002848:	f854 0b08 	ldr.w	r0, [r4], #8
1a00284c:	6859      	ldr	r1, [r3, #4]
1a00284e:	f7fd fcb7 	bl	1a0001c0 <bss_init>
1a002852:	4623      	mov	r3, r4
1a002854:	4a08      	ldr	r2, [pc, #32]	; (1a002878 <ResetISR+0x78>)
1a002856:	4293      	cmp	r3, r2
1a002858:	d3f5      	bcc.n	1a002846 <ResetISR+0x46>
1a00285a:	f7fe f885 	bl	1a000968 <main>
1a00285e:	e7fe      	b.n	1a00285e <ResetISR+0x5e>
1a002860:	10df1000 	.word	0x10df1000
1a002864:	40053100 	.word	0x40053100
1a002868:	01dff7ff 	.word	0x01dff7ff
1a00286c:	e000e280 	.word	0xe000e280
1a002870:	1a000114 	.word	0x1a000114
1a002874:	1a000150 	.word	0x1a000150
1a002878:	1a000178 	.word	0x1a000178

1a00287c <__aeabi_uldivmod>:
1a00287c:	b953      	cbnz	r3, 1a002894 <__aeabi_uldivmod+0x18>
1a00287e:	b94a      	cbnz	r2, 1a002894 <__aeabi_uldivmod+0x18>
1a002880:	2900      	cmp	r1, #0
1a002882:	bf08      	it	eq
1a002884:	2800      	cmpeq	r0, #0
1a002886:	bf1c      	itt	ne
1a002888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00288c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002890:	f000 b83c 	b.w	1a00290c <__aeabi_idiv0>
1a002894:	b082      	sub	sp, #8
1a002896:	46ec      	mov	ip, sp
1a002898:	e92d 5000 	stmdb	sp!, {ip, lr}
1a00289c:	f000 f81e 	bl	1a0028dc <__gnu_uldivmod_helper>
1a0028a0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0028a4:	b002      	add	sp, #8
1a0028a6:	bc0c      	pop	{r2, r3}
1a0028a8:	4770      	bx	lr
1a0028aa:	bf00      	nop

1a0028ac <__gnu_ldivmod_helper>:
1a0028ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0028b0:	9c06      	ldr	r4, [sp, #24]
1a0028b2:	4615      	mov	r5, r2
1a0028b4:	4606      	mov	r6, r0
1a0028b6:	460f      	mov	r7, r1
1a0028b8:	4698      	mov	r8, r3
1a0028ba:	f000 f829 	bl	1a002910 <__divdi3>
1a0028be:	fb05 f301 	mul.w	r3, r5, r1
1a0028c2:	fb00 3808 	mla	r8, r0, r8, r3
1a0028c6:	fba5 2300 	umull	r2, r3, r5, r0
1a0028ca:	1ab2      	subs	r2, r6, r2
1a0028cc:	4443      	add	r3, r8
1a0028ce:	eb67 0303 	sbc.w	r3, r7, r3
1a0028d2:	e9c4 2300 	strd	r2, r3, [r4]
1a0028d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0028da:	bf00      	nop

1a0028dc <__gnu_uldivmod_helper>:
1a0028dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0028e0:	9c06      	ldr	r4, [sp, #24]
1a0028e2:	4690      	mov	r8, r2
1a0028e4:	4606      	mov	r6, r0
1a0028e6:	460f      	mov	r7, r1
1a0028e8:	461d      	mov	r5, r3
1a0028ea:	f000 f95f 	bl	1a002bac <__udivdi3>
1a0028ee:	fb00 f505 	mul.w	r5, r0, r5
1a0028f2:	fba0 2308 	umull	r2, r3, r0, r8
1a0028f6:	fb08 5501 	mla	r5, r8, r1, r5
1a0028fa:	1ab2      	subs	r2, r6, r2
1a0028fc:	442b      	add	r3, r5
1a0028fe:	eb67 0303 	sbc.w	r3, r7, r3
1a002902:	e9c4 2300 	strd	r2, r3, [r4]
1a002906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00290a:	bf00      	nop

1a00290c <__aeabi_idiv0>:
1a00290c:	4770      	bx	lr
1a00290e:	bf00      	nop

1a002910 <__divdi3>:
1a002910:	2900      	cmp	r1, #0
1a002912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002916:	f2c0 80a6 	blt.w	1a002a66 <__divdi3+0x156>
1a00291a:	2600      	movs	r6, #0
1a00291c:	2b00      	cmp	r3, #0
1a00291e:	f2c0 809c 	blt.w	1a002a5a <__divdi3+0x14a>
1a002922:	4688      	mov	r8, r1
1a002924:	4694      	mov	ip, r2
1a002926:	469e      	mov	lr, r3
1a002928:	4615      	mov	r5, r2
1a00292a:	4604      	mov	r4, r0
1a00292c:	460f      	mov	r7, r1
1a00292e:	2b00      	cmp	r3, #0
1a002930:	d13d      	bne.n	1a0029ae <__divdi3+0x9e>
1a002932:	428a      	cmp	r2, r1
1a002934:	d959      	bls.n	1a0029ea <__divdi3+0xda>
1a002936:	fab2 f382 	clz	r3, r2
1a00293a:	b13b      	cbz	r3, 1a00294c <__divdi3+0x3c>
1a00293c:	f1c3 0220 	rsb	r2, r3, #32
1a002940:	409f      	lsls	r7, r3
1a002942:	fa20 f202 	lsr.w	r2, r0, r2
1a002946:	409d      	lsls	r5, r3
1a002948:	4317      	orrs	r7, r2
1a00294a:	409c      	lsls	r4, r3
1a00294c:	0c29      	lsrs	r1, r5, #16
1a00294e:	0c22      	lsrs	r2, r4, #16
1a002950:	fbb7 fef1 	udiv	lr, r7, r1
1a002954:	b2a8      	uxth	r0, r5
1a002956:	fb01 771e 	mls	r7, r1, lr, r7
1a00295a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a00295e:	fb00 f30e 	mul.w	r3, r0, lr
1a002962:	42bb      	cmp	r3, r7
1a002964:	d90a      	bls.n	1a00297c <__divdi3+0x6c>
1a002966:	197f      	adds	r7, r7, r5
1a002968:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
1a00296c:	f080 8105 	bcs.w	1a002b7a <__divdi3+0x26a>
1a002970:	42bb      	cmp	r3, r7
1a002972:	f240 8102 	bls.w	1a002b7a <__divdi3+0x26a>
1a002976:	f1ae 0e02 	sub.w	lr, lr, #2
1a00297a:	442f      	add	r7, r5
1a00297c:	1aff      	subs	r7, r7, r3
1a00297e:	b2a4      	uxth	r4, r4
1a002980:	fbb7 f3f1 	udiv	r3, r7, r1
1a002984:	fb01 7713 	mls	r7, r1, r3, r7
1a002988:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a00298c:	fb00 f003 	mul.w	r0, r0, r3
1a002990:	42b8      	cmp	r0, r7
1a002992:	d908      	bls.n	1a0029a6 <__divdi3+0x96>
1a002994:	197f      	adds	r7, r7, r5
1a002996:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a00299a:	f080 80f0 	bcs.w	1a002b7e <__divdi3+0x26e>
1a00299e:	42b8      	cmp	r0, r7
1a0029a0:	f240 80ed 	bls.w	1a002b7e <__divdi3+0x26e>
1a0029a4:	3b02      	subs	r3, #2
1a0029a6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a0029aa:	2200      	movs	r2, #0
1a0029ac:	e003      	b.n	1a0029b6 <__divdi3+0xa6>
1a0029ae:	428b      	cmp	r3, r1
1a0029b0:	d90f      	bls.n	1a0029d2 <__divdi3+0xc2>
1a0029b2:	2200      	movs	r2, #0
1a0029b4:	4613      	mov	r3, r2
1a0029b6:	1c34      	adds	r4, r6, #0
1a0029b8:	bf18      	it	ne
1a0029ba:	2401      	movne	r4, #1
1a0029bc:	4260      	negs	r0, r4
1a0029be:	f04f 0500 	mov.w	r5, #0
1a0029c2:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a0029c6:	4058      	eors	r0, r3
1a0029c8:	4051      	eors	r1, r2
1a0029ca:	1900      	adds	r0, r0, r4
1a0029cc:	4169      	adcs	r1, r5
1a0029ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0029d2:	fab3 f283 	clz	r2, r3
1a0029d6:	2a00      	cmp	r2, #0
1a0029d8:	f040 8086 	bne.w	1a002ae8 <__divdi3+0x1d8>
1a0029dc:	428b      	cmp	r3, r1
1a0029de:	d302      	bcc.n	1a0029e6 <__divdi3+0xd6>
1a0029e0:	4584      	cmp	ip, r0
1a0029e2:	f200 80db 	bhi.w	1a002b9c <__divdi3+0x28c>
1a0029e6:	2301      	movs	r3, #1
1a0029e8:	e7e5      	b.n	1a0029b6 <__divdi3+0xa6>
1a0029ea:	b912      	cbnz	r2, 1a0029f2 <__divdi3+0xe2>
1a0029ec:	2301      	movs	r3, #1
1a0029ee:	fbb3 f5f2 	udiv	r5, r3, r2
1a0029f2:	fab5 f085 	clz	r0, r5
1a0029f6:	2800      	cmp	r0, #0
1a0029f8:	d13b      	bne.n	1a002a72 <__divdi3+0x162>
1a0029fa:	1b78      	subs	r0, r7, r5
1a0029fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002a00:	fa1f fc85 	uxth.w	ip, r5
1a002a04:	2201      	movs	r2, #1
1a002a06:	fbb0 f8fe 	udiv	r8, r0, lr
1a002a0a:	0c21      	lsrs	r1, r4, #16
1a002a0c:	fb0e 0718 	mls	r7, lr, r8, r0
1a002a10:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a002a14:	fb0c f308 	mul.w	r3, ip, r8
1a002a18:	42bb      	cmp	r3, r7
1a002a1a:	d907      	bls.n	1a002a2c <__divdi3+0x11c>
1a002a1c:	197f      	adds	r7, r7, r5
1a002a1e:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
1a002a22:	d202      	bcs.n	1a002a2a <__divdi3+0x11a>
1a002a24:	42bb      	cmp	r3, r7
1a002a26:	f200 80bd 	bhi.w	1a002ba4 <__divdi3+0x294>
1a002a2a:	4688      	mov	r8, r1
1a002a2c:	1aff      	subs	r7, r7, r3
1a002a2e:	b2a4      	uxth	r4, r4
1a002a30:	fbb7 f3fe 	udiv	r3, r7, lr
1a002a34:	fb0e 7713 	mls	r7, lr, r3, r7
1a002a38:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a002a3c:	fb0c fc03 	mul.w	ip, ip, r3
1a002a40:	45bc      	cmp	ip, r7
1a002a42:	d907      	bls.n	1a002a54 <__divdi3+0x144>
1a002a44:	197f      	adds	r7, r7, r5
1a002a46:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
1a002a4a:	d202      	bcs.n	1a002a52 <__divdi3+0x142>
1a002a4c:	45bc      	cmp	ip, r7
1a002a4e:	f200 80a7 	bhi.w	1a002ba0 <__divdi3+0x290>
1a002a52:	460b      	mov	r3, r1
1a002a54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002a58:	e7ad      	b.n	1a0029b6 <__divdi3+0xa6>
1a002a5a:	4252      	negs	r2, r2
1a002a5c:	ea6f 0606 	mvn.w	r6, r6
1a002a60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002a64:	e75d      	b.n	1a002922 <__divdi3+0x12>
1a002a66:	4240      	negs	r0, r0
1a002a68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002a6c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
1a002a70:	e754      	b.n	1a00291c <__divdi3+0xc>
1a002a72:	f1c0 0220 	rsb	r2, r0, #32
1a002a76:	fa24 f102 	lsr.w	r1, r4, r2
1a002a7a:	fa07 f300 	lsl.w	r3, r7, r0
1a002a7e:	4085      	lsls	r5, r0
1a002a80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002a84:	40d7      	lsrs	r7, r2
1a002a86:	4319      	orrs	r1, r3
1a002a88:	fbb7 f2fe 	udiv	r2, r7, lr
1a002a8c:	0c0b      	lsrs	r3, r1, #16
1a002a8e:	fb0e 7712 	mls	r7, lr, r2, r7
1a002a92:	fa1f fc85 	uxth.w	ip, r5
1a002a96:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a002a9a:	fb0c f702 	mul.w	r7, ip, r2
1a002a9e:	429f      	cmp	r7, r3
1a002aa0:	fa04 f400 	lsl.w	r4, r4, r0
1a002aa4:	d907      	bls.n	1a002ab6 <__divdi3+0x1a6>
1a002aa6:	195b      	adds	r3, r3, r5
1a002aa8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
1a002aac:	d274      	bcs.n	1a002b98 <__divdi3+0x288>
1a002aae:	429f      	cmp	r7, r3
1a002ab0:	d972      	bls.n	1a002b98 <__divdi3+0x288>
1a002ab2:	3a02      	subs	r2, #2
1a002ab4:	442b      	add	r3, r5
1a002ab6:	1bdf      	subs	r7, r3, r7
1a002ab8:	b289      	uxth	r1, r1
1a002aba:	fbb7 f8fe 	udiv	r8, r7, lr
1a002abe:	fb0e 7318 	mls	r3, lr, r8, r7
1a002ac2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002ac6:	fb0c f708 	mul.w	r7, ip, r8
1a002aca:	429f      	cmp	r7, r3
1a002acc:	d908      	bls.n	1a002ae0 <__divdi3+0x1d0>
1a002ace:	195b      	adds	r3, r3, r5
1a002ad0:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
1a002ad4:	d25c      	bcs.n	1a002b90 <__divdi3+0x280>
1a002ad6:	429f      	cmp	r7, r3
1a002ad8:	d95a      	bls.n	1a002b90 <__divdi3+0x280>
1a002ada:	f1a8 0802 	sub.w	r8, r8, #2
1a002ade:	442b      	add	r3, r5
1a002ae0:	1bd8      	subs	r0, r3, r7
1a002ae2:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a002ae6:	e78e      	b.n	1a002a06 <__divdi3+0xf6>
1a002ae8:	f1c2 0320 	rsb	r3, r2, #32
1a002aec:	fa2c f103 	lsr.w	r1, ip, r3
1a002af0:	fa0e fe02 	lsl.w	lr, lr, r2
1a002af4:	fa20 f703 	lsr.w	r7, r0, r3
1a002af8:	ea41 0e0e 	orr.w	lr, r1, lr
1a002afc:	fa08 f002 	lsl.w	r0, r8, r2
1a002b00:	fa28 f103 	lsr.w	r1, r8, r3
1a002b04:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a002b08:	4338      	orrs	r0, r7
1a002b0a:	fbb1 f8f5 	udiv	r8, r1, r5
1a002b0e:	0c03      	lsrs	r3, r0, #16
1a002b10:	fb05 1118 	mls	r1, r5, r8, r1
1a002b14:	fa1f f78e 	uxth.w	r7, lr
1a002b18:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a002b1c:	fb07 f308 	mul.w	r3, r7, r8
1a002b20:	428b      	cmp	r3, r1
1a002b22:	fa0c fc02 	lsl.w	ip, ip, r2
1a002b26:	d909      	bls.n	1a002b3c <__divdi3+0x22c>
1a002b28:	eb11 010e 	adds.w	r1, r1, lr
1a002b2c:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
1a002b30:	d230      	bcs.n	1a002b94 <__divdi3+0x284>
1a002b32:	428b      	cmp	r3, r1
1a002b34:	d92e      	bls.n	1a002b94 <__divdi3+0x284>
1a002b36:	f1a8 0802 	sub.w	r8, r8, #2
1a002b3a:	4471      	add	r1, lr
1a002b3c:	1ac9      	subs	r1, r1, r3
1a002b3e:	b280      	uxth	r0, r0
1a002b40:	fbb1 f3f5 	udiv	r3, r1, r5
1a002b44:	fb05 1113 	mls	r1, r5, r3, r1
1a002b48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a002b4c:	fb07 f703 	mul.w	r7, r7, r3
1a002b50:	428f      	cmp	r7, r1
1a002b52:	d908      	bls.n	1a002b66 <__divdi3+0x256>
1a002b54:	eb11 010e 	adds.w	r1, r1, lr
1a002b58:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
1a002b5c:	d216      	bcs.n	1a002b8c <__divdi3+0x27c>
1a002b5e:	428f      	cmp	r7, r1
1a002b60:	d914      	bls.n	1a002b8c <__divdi3+0x27c>
1a002b62:	3b02      	subs	r3, #2
1a002b64:	4471      	add	r1, lr
1a002b66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002b6a:	1bc9      	subs	r1, r1, r7
1a002b6c:	fba3 890c 	umull	r8, r9, r3, ip
1a002b70:	4549      	cmp	r1, r9
1a002b72:	d309      	bcc.n	1a002b88 <__divdi3+0x278>
1a002b74:	d005      	beq.n	1a002b82 <__divdi3+0x272>
1a002b76:	2200      	movs	r2, #0
1a002b78:	e71d      	b.n	1a0029b6 <__divdi3+0xa6>
1a002b7a:	4696      	mov	lr, r2
1a002b7c:	e6fe      	b.n	1a00297c <__divdi3+0x6c>
1a002b7e:	4613      	mov	r3, r2
1a002b80:	e711      	b.n	1a0029a6 <__divdi3+0x96>
1a002b82:	4094      	lsls	r4, r2
1a002b84:	4544      	cmp	r4, r8
1a002b86:	d2f6      	bcs.n	1a002b76 <__divdi3+0x266>
1a002b88:	3b01      	subs	r3, #1
1a002b8a:	e7f4      	b.n	1a002b76 <__divdi3+0x266>
1a002b8c:	4603      	mov	r3, r0
1a002b8e:	e7ea      	b.n	1a002b66 <__divdi3+0x256>
1a002b90:	4688      	mov	r8, r1
1a002b92:	e7a5      	b.n	1a002ae0 <__divdi3+0x1d0>
1a002b94:	46c8      	mov	r8, r9
1a002b96:	e7d1      	b.n	1a002b3c <__divdi3+0x22c>
1a002b98:	4602      	mov	r2, r0
1a002b9a:	e78c      	b.n	1a002ab6 <__divdi3+0x1a6>
1a002b9c:	4613      	mov	r3, r2
1a002b9e:	e70a      	b.n	1a0029b6 <__divdi3+0xa6>
1a002ba0:	3b02      	subs	r3, #2
1a002ba2:	e757      	b.n	1a002a54 <__divdi3+0x144>
1a002ba4:	f1a8 0802 	sub.w	r8, r8, #2
1a002ba8:	442f      	add	r7, r5
1a002baa:	e73f      	b.n	1a002a2c <__divdi3+0x11c>

1a002bac <__udivdi3>:
1a002bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002bb0:	2b00      	cmp	r3, #0
1a002bb2:	d144      	bne.n	1a002c3e <__udivdi3+0x92>
1a002bb4:	428a      	cmp	r2, r1
1a002bb6:	4615      	mov	r5, r2
1a002bb8:	4604      	mov	r4, r0
1a002bba:	d94f      	bls.n	1a002c5c <__udivdi3+0xb0>
1a002bbc:	fab2 f782 	clz	r7, r2
1a002bc0:	460e      	mov	r6, r1
1a002bc2:	b14f      	cbz	r7, 1a002bd8 <__udivdi3+0x2c>
1a002bc4:	f1c7 0320 	rsb	r3, r7, #32
1a002bc8:	40b9      	lsls	r1, r7
1a002bca:	fa20 f603 	lsr.w	r6, r0, r3
1a002bce:	fa02 f507 	lsl.w	r5, r2, r7
1a002bd2:	430e      	orrs	r6, r1
1a002bd4:	fa00 f407 	lsl.w	r4, r0, r7
1a002bd8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002bdc:	0c23      	lsrs	r3, r4, #16
1a002bde:	fbb6 f0fe 	udiv	r0, r6, lr
1a002be2:	b2af      	uxth	r7, r5
1a002be4:	fb0e 6110 	mls	r1, lr, r0, r6
1a002be8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002bec:	fb07 f100 	mul.w	r1, r7, r0
1a002bf0:	4299      	cmp	r1, r3
1a002bf2:	d909      	bls.n	1a002c08 <__udivdi3+0x5c>
1a002bf4:	195b      	adds	r3, r3, r5
1a002bf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a002bfa:	f080 80ec 	bcs.w	1a002dd6 <__udivdi3+0x22a>
1a002bfe:	4299      	cmp	r1, r3
1a002c00:	f240 80e9 	bls.w	1a002dd6 <__udivdi3+0x22a>
1a002c04:	3802      	subs	r0, #2
1a002c06:	442b      	add	r3, r5
1a002c08:	1a5a      	subs	r2, r3, r1
1a002c0a:	b2a4      	uxth	r4, r4
1a002c0c:	fbb2 f3fe 	udiv	r3, r2, lr
1a002c10:	fb0e 2213 	mls	r2, lr, r3, r2
1a002c14:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a002c18:	fb07 f703 	mul.w	r7, r7, r3
1a002c1c:	4297      	cmp	r7, r2
1a002c1e:	d908      	bls.n	1a002c32 <__udivdi3+0x86>
1a002c20:	1952      	adds	r2, r2, r5
1a002c22:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
1a002c26:	f080 80d8 	bcs.w	1a002dda <__udivdi3+0x22e>
1a002c2a:	4297      	cmp	r7, r2
1a002c2c:	f240 80d5 	bls.w	1a002dda <__udivdi3+0x22e>
1a002c30:	3b02      	subs	r3, #2
1a002c32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a002c36:	2600      	movs	r6, #0
1a002c38:	4631      	mov	r1, r6
1a002c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002c3e:	428b      	cmp	r3, r1
1a002c40:	d847      	bhi.n	1a002cd2 <__udivdi3+0x126>
1a002c42:	fab3 f683 	clz	r6, r3
1a002c46:	2e00      	cmp	r6, #0
1a002c48:	d148      	bne.n	1a002cdc <__udivdi3+0x130>
1a002c4a:	428b      	cmp	r3, r1
1a002c4c:	d302      	bcc.n	1a002c54 <__udivdi3+0xa8>
1a002c4e:	4282      	cmp	r2, r0
1a002c50:	f200 80cd 	bhi.w	1a002dee <__udivdi3+0x242>
1a002c54:	2001      	movs	r0, #1
1a002c56:	4631      	mov	r1, r6
1a002c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002c5c:	b912      	cbnz	r2, 1a002c64 <__udivdi3+0xb8>
1a002c5e:	2501      	movs	r5, #1
1a002c60:	fbb5 f5f2 	udiv	r5, r5, r2
1a002c64:	fab5 f885 	clz	r8, r5
1a002c68:	f1b8 0f00 	cmp.w	r8, #0
1a002c6c:	d177      	bne.n	1a002d5e <__udivdi3+0x1b2>
1a002c6e:	1b4a      	subs	r2, r1, r5
1a002c70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002c74:	b2af      	uxth	r7, r5
1a002c76:	2601      	movs	r6, #1
1a002c78:	fbb2 f0fe 	udiv	r0, r2, lr
1a002c7c:	0c23      	lsrs	r3, r4, #16
1a002c7e:	fb0e 2110 	mls	r1, lr, r0, r2
1a002c82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a002c86:	fb07 f300 	mul.w	r3, r7, r0
1a002c8a:	428b      	cmp	r3, r1
1a002c8c:	d907      	bls.n	1a002c9e <__udivdi3+0xf2>
1a002c8e:	1949      	adds	r1, r1, r5
1a002c90:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a002c94:	d202      	bcs.n	1a002c9c <__udivdi3+0xf0>
1a002c96:	428b      	cmp	r3, r1
1a002c98:	f200 80ba 	bhi.w	1a002e10 <__udivdi3+0x264>
1a002c9c:	4610      	mov	r0, r2
1a002c9e:	1ac9      	subs	r1, r1, r3
1a002ca0:	b2a4      	uxth	r4, r4
1a002ca2:	fbb1 f3fe 	udiv	r3, r1, lr
1a002ca6:	fb0e 1113 	mls	r1, lr, r3, r1
1a002caa:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a002cae:	fb07 f703 	mul.w	r7, r7, r3
1a002cb2:	42a7      	cmp	r7, r4
1a002cb4:	d908      	bls.n	1a002cc8 <__udivdi3+0x11c>
1a002cb6:	1964      	adds	r4, r4, r5
1a002cb8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a002cbc:	f080 808f 	bcs.w	1a002dde <__udivdi3+0x232>
1a002cc0:	42a7      	cmp	r7, r4
1a002cc2:	f240 808c 	bls.w	1a002dde <__udivdi3+0x232>
1a002cc6:	3b02      	subs	r3, #2
1a002cc8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a002ccc:	4631      	mov	r1, r6
1a002cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002cd2:	2600      	movs	r6, #0
1a002cd4:	4630      	mov	r0, r6
1a002cd6:	4631      	mov	r1, r6
1a002cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002cdc:	f1c6 0420 	rsb	r4, r6, #32
1a002ce0:	fa22 f504 	lsr.w	r5, r2, r4
1a002ce4:	40b3      	lsls	r3, r6
1a002ce6:	432b      	orrs	r3, r5
1a002ce8:	fa20 fc04 	lsr.w	ip, r0, r4
1a002cec:	fa01 f706 	lsl.w	r7, r1, r6
1a002cf0:	fa21 f504 	lsr.w	r5, r1, r4
1a002cf4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a002cf8:	ea4c 0707 	orr.w	r7, ip, r7
1a002cfc:	fbb5 f8fe 	udiv	r8, r5, lr
1a002d00:	0c39      	lsrs	r1, r7, #16
1a002d02:	fb0e 5518 	mls	r5, lr, r8, r5
1a002d06:	fa1f fc83 	uxth.w	ip, r3
1a002d0a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a002d0e:	fb0c f108 	mul.w	r1, ip, r8
1a002d12:	42a9      	cmp	r1, r5
1a002d14:	fa02 f206 	lsl.w	r2, r2, r6
1a002d18:	d904      	bls.n	1a002d24 <__udivdi3+0x178>
1a002d1a:	18ed      	adds	r5, r5, r3
1a002d1c:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
1a002d20:	d367      	bcc.n	1a002df2 <__udivdi3+0x246>
1a002d22:	46a0      	mov	r8, r4
1a002d24:	1a6d      	subs	r5, r5, r1
1a002d26:	b2bf      	uxth	r7, r7
1a002d28:	fbb5 f4fe 	udiv	r4, r5, lr
1a002d2c:	fb0e 5514 	mls	r5, lr, r4, r5
1a002d30:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a002d34:	fb0c fc04 	mul.w	ip, ip, r4
1a002d38:	458c      	cmp	ip, r1
1a002d3a:	d904      	bls.n	1a002d46 <__udivdi3+0x19a>
1a002d3c:	18c9      	adds	r1, r1, r3
1a002d3e:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
1a002d42:	d35c      	bcc.n	1a002dfe <__udivdi3+0x252>
1a002d44:	462c      	mov	r4, r5
1a002d46:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a002d4a:	ebcc 0101 	rsb	r1, ip, r1
1a002d4e:	fba4 2302 	umull	r2, r3, r4, r2
1a002d52:	4299      	cmp	r1, r3
1a002d54:	d348      	bcc.n	1a002de8 <__udivdi3+0x23c>
1a002d56:	d044      	beq.n	1a002de2 <__udivdi3+0x236>
1a002d58:	4620      	mov	r0, r4
1a002d5a:	2600      	movs	r6, #0
1a002d5c:	e76c      	b.n	1a002c38 <__udivdi3+0x8c>
1a002d5e:	f1c8 0420 	rsb	r4, r8, #32
1a002d62:	fa01 f308 	lsl.w	r3, r1, r8
1a002d66:	fa05 f508 	lsl.w	r5, r5, r8
1a002d6a:	fa20 f704 	lsr.w	r7, r0, r4
1a002d6e:	40e1      	lsrs	r1, r4
1a002d70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002d74:	431f      	orrs	r7, r3
1a002d76:	fbb1 f6fe 	udiv	r6, r1, lr
1a002d7a:	0c3a      	lsrs	r2, r7, #16
1a002d7c:	fb0e 1116 	mls	r1, lr, r6, r1
1a002d80:	fa1f fc85 	uxth.w	ip, r5
1a002d84:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a002d88:	fb0c f206 	mul.w	r2, ip, r6
1a002d8c:	429a      	cmp	r2, r3
1a002d8e:	fa00 f408 	lsl.w	r4, r0, r8
1a002d92:	d907      	bls.n	1a002da4 <__udivdi3+0x1f8>
1a002d94:	195b      	adds	r3, r3, r5
1a002d96:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
1a002d9a:	d237      	bcs.n	1a002e0c <__udivdi3+0x260>
1a002d9c:	429a      	cmp	r2, r3
1a002d9e:	d935      	bls.n	1a002e0c <__udivdi3+0x260>
1a002da0:	3e02      	subs	r6, #2
1a002da2:	442b      	add	r3, r5
1a002da4:	1a9b      	subs	r3, r3, r2
1a002da6:	b2bf      	uxth	r7, r7
1a002da8:	fbb3 f0fe 	udiv	r0, r3, lr
1a002dac:	fb0e 3310 	mls	r3, lr, r0, r3
1a002db0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a002db4:	fb0c f100 	mul.w	r1, ip, r0
1a002db8:	4299      	cmp	r1, r3
1a002dba:	d907      	bls.n	1a002dcc <__udivdi3+0x220>
1a002dbc:	195b      	adds	r3, r3, r5
1a002dbe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a002dc2:	d221      	bcs.n	1a002e08 <__udivdi3+0x25c>
1a002dc4:	4299      	cmp	r1, r3
1a002dc6:	d91f      	bls.n	1a002e08 <__udivdi3+0x25c>
1a002dc8:	3802      	subs	r0, #2
1a002dca:	442b      	add	r3, r5
1a002dcc:	1a5a      	subs	r2, r3, r1
1a002dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a002dd2:	4667      	mov	r7, ip
1a002dd4:	e750      	b.n	1a002c78 <__udivdi3+0xcc>
1a002dd6:	4610      	mov	r0, r2
1a002dd8:	e716      	b.n	1a002c08 <__udivdi3+0x5c>
1a002dda:	460b      	mov	r3, r1
1a002ddc:	e729      	b.n	1a002c32 <__udivdi3+0x86>
1a002dde:	4613      	mov	r3, r2
1a002de0:	e772      	b.n	1a002cc8 <__udivdi3+0x11c>
1a002de2:	40b0      	lsls	r0, r6
1a002de4:	4290      	cmp	r0, r2
1a002de6:	d2b7      	bcs.n	1a002d58 <__udivdi3+0x1ac>
1a002de8:	1e60      	subs	r0, r4, #1
1a002dea:	2600      	movs	r6, #0
1a002dec:	e724      	b.n	1a002c38 <__udivdi3+0x8c>
1a002dee:	4630      	mov	r0, r6
1a002df0:	e722      	b.n	1a002c38 <__udivdi3+0x8c>
1a002df2:	42a9      	cmp	r1, r5
1a002df4:	d995      	bls.n	1a002d22 <__udivdi3+0x176>
1a002df6:	f1a8 0802 	sub.w	r8, r8, #2
1a002dfa:	441d      	add	r5, r3
1a002dfc:	e792      	b.n	1a002d24 <__udivdi3+0x178>
1a002dfe:	458c      	cmp	ip, r1
1a002e00:	d9a0      	bls.n	1a002d44 <__udivdi3+0x198>
1a002e02:	3c02      	subs	r4, #2
1a002e04:	4419      	add	r1, r3
1a002e06:	e79e      	b.n	1a002d46 <__udivdi3+0x19a>
1a002e08:	4610      	mov	r0, r2
1a002e0a:	e7df      	b.n	1a002dcc <__udivdi3+0x220>
1a002e0c:	460e      	mov	r6, r1
1a002e0e:	e7c9      	b.n	1a002da4 <__udivdi3+0x1f8>
1a002e10:	3802      	subs	r0, #2
1a002e12:	4429      	add	r1, r5
1a002e14:	e743      	b.n	1a002c9e <__udivdi3+0xf2>
1a002e16:	bf00      	nop

1a002e18 <memcpy>:
1a002e18:	b510      	push	{r4, lr}
1a002e1a:	1e43      	subs	r3, r0, #1
1a002e1c:	440a      	add	r2, r1
1a002e1e:	4291      	cmp	r1, r2
1a002e20:	d004      	beq.n	1a002e2c <memcpy+0x14>
1a002e22:	f811 4b01 	ldrb.w	r4, [r1], #1
1a002e26:	f803 4f01 	strb.w	r4, [r3, #1]!
1a002e2a:	e7f8      	b.n	1a002e1e <memcpy+0x6>
1a002e2c:	bd10      	pop	{r4, pc}

1a002e2e <memset>:
1a002e2e:	4402      	add	r2, r0
1a002e30:	4603      	mov	r3, r0
1a002e32:	4293      	cmp	r3, r2
1a002e34:	d002      	beq.n	1a002e3c <memset+0xe>
1a002e36:	f803 1b01 	strb.w	r1, [r3], #1
1a002e3a:	e7fa      	b.n	1a002e32 <memset+0x4>
1a002e3c:	4770      	bx	lr
	...

1a002e40 <gLedsGpioMap>:
1a002e40:	002a 0000 0028 0000 0029 0000 002d 0000     *...(...)...-...
1a002e50:	002c 0000 002b 0000                         ,...+...

1a002e58 <gBlinkPeriodsArray>:
1a002e58:	0032 0000 0064 0000 03e8 0000 05a5 1a00     2...d...........
1a002e68:	05d9 1a00                                   ....

1a002e6c <buttonPressed>:
1a002e6c:	0001 0000 2ea4 1a00 04ad 1a00 0000 0000     ................
	...

1a002e84 <buttonRelased>:
1a002e84:	0002 0000 2ec8 1a00 04ad 1a00 0000 0000     ................
	...

1a002e9c <buttonsGpioBoardMap>:
1a002e9c:	0024 0000 0025 0000                         $...%...

1a002ea4 <buttonTransitionReleasing>:
1a002ea4:	0001 0000 2e84 1a00 04cd 1a00 0002 0000     ................
1a002eb4:	2e6c 1a00 04a9 1a00 0000 0000 0000 0000     l...............
1a002ec4:	0000 0000                                   ....

1a002ec8 <buttonTransitionPressing>:
1a002ec8:	0001 0000 2e84 1a00 04a9 1a00 0002 0000     ................
1a002ed8:	2e6c 1a00 04bd 1a00 0000 0000 0000 0000     l...............
1a002ee8:	0000 0000                                   ....

1a002eec <ledsGpioBoardMap>:
1a002eec:	002a 0000 0028 0000 0029 0000 002d 0000     *...(...)...-...
1a002efc:	002c 0000 002b 0000                         ,...+...

1a002f04 <ledBlinkOnWaitPeriodTimeout>:
1a002f04:	0001 0000 2f1c 1a00 07cd 1a00 0000 0000     ...../..........
	...

1a002f1c <ledBlinkOffWaitPeriodTimeout>:
1a002f1c:	0001 0000 2f04 1a00 07e9 1a00 0000 0000     ...../..........
	...

1a002f34 <gpioPinsConfig>:
1a002f34:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a002f44:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a002f54:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a002f64:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a002f74:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a002f84:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a002f94:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a002fa4:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a002fb4:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a002fc4:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a002fd4:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a002fe4:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a002ff4:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a003004:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a003014:	020b 000c 0c01 0004 0200 0400 0001 0102     ................
1a003024:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a003034:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a003044:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a003054:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a003064:	010e 0005 0801 0000                         ........

1a00306c <timer_sd>:
1a00306c:	4000 4008 0020 0000 000c 0000 5000 4008     .@.@ ........P.@
1a00307c:	0021 0000 000d 0000 3000 400c 0022 0000     !........0.@"...
1a00308c:	000e 0000 4000 400c 0023 0000 000f 0000     .....@.@#.......

1a00309c <gpioLEDBits>:
1a00309c:	0e00 0b01 0c01 0005 0105 0205 6000 1237     .............`7.
1a0030ac:	5634 0000                                   4V..

1a0030b0 <OscRateIn>:
1a0030b0:	1b00 00b7                                   ....

1a0030b4 <ExtRateIn>:
1a0030b4:	0000 0000                                   ....

1a0030b8 <pinmuxing>:
1a0030b8:	0a02 0040 0b02 0040 0c02 0040 0002 0044     ..@...@...@...D.
1a0030c8:	0102 0044 0202 0044 0302 0052 0402 0052     ..D...D...R...R.
1a0030d8:	0509 0052 0609 0057 0206 0057 0001 0050     ..R...W...W...P.
1a0030e8:	0101 0050 0201 0050 0601 0050 0f01 00f3     ..P...P...P.....
1a0030f8:	1001 00f7 1101 00f3 1201 00b3 1301 00f0     ................
1a003108:	1401 00b3 0707 00b6 0000 00f2 0100 00b6     ................

1a003118 <InitClkStates>:
1a003118:	0308 0001 0307 0001 0f01 0101               ............

1a003124 <usbPLLSetup>:
1a003124:	601d 0000 7ffa 0616 0000 0000 0000 0000     .`..............
1a003134:	3800 1c9c                                   .8..

1a003138 <periph_to_base>:
1a003138:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a003148:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a003158:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a003168:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a003178:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a003188:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a003198:	0222 0222 000d 0223 0223 001c 0201 0804     "."...#.#.......
1a0031a8:	0f03 0f0f 00ff 0000                         ........

1a0031b0 <InitClkStates>:
1a0031b0:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0031c0:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a0031d0:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a0031e0:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a0031f0:	111a 0001 111b 0001                         ........

1a0031f8 <UART_PClock>:
1a0031f8:	0081 0082 00a1 00a2                         ........

1a003200 <UART_BClock>:
1a003200:	01c2 01a2 0182 0162                         ......b.
